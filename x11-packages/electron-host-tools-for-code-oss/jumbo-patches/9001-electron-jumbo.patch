From ba646fbe7bebb0debfb6bb271573352d20ccccc4 Mon Sep 17 00:00:00 2001
From: Chongyun Lee <licy183@termux.dev>
Date: Sat, 10 May 2025 02:42:36 +0800
Subject: [PATCH] jumbo

---
 BUILD.gn                                      | 27 ++++++++++++++++++-
 shell/browser/api/electron_api_app.cc         |  9 ++++---
 .../browser/api/electron_api_auto_updater.cc  |  9 ++++---
 shell/browser/api/electron_api_base_window.cc |  9 ++++---
 .../api/electron_api_browser_window.cc        |  9 ++++---
 .../api/electron_api_content_tracing.cc       | 10 ++++---
 .../api/electron_api_crash_reporter.cc        |  9 ++++---
 .../api/electron_api_desktop_capturer.cc      | 10 ++++---
 shell/browser/api/electron_api_dialog.cc      |  9 ++++---
 .../browser/api/electron_api_download_item.cc |  8 +++---
 .../browser/api/electron_api_event_emitter.cc | 10 ++++---
 .../api/electron_api_global_shortcut.cc       | 10 ++++---
 .../api/electron_api_in_app_purchase.cc       | 10 ++++---
 shell/browser/api/electron_api_menu.cc        |  9 ++++---
 .../browser/api/electron_api_native_theme.cc  |  9 ++++---
 .../browser/api/electron_api_notification.cc  |  9 ++++---
 .../browser/api/electron_api_power_monitor.cc |  9 ++++---
 .../api/electron_api_power_save_blocker.cc    | 11 +++++---
 shell/browser/api/electron_api_printing.cc    |  9 ++++---
 shell/browser/api/electron_api_protocol.cc    |  9 ++++---
 .../api/electron_api_push_notifications.cc    | 11 +++++---
 .../browser/api/electron_api_safe_storage.cc  | 11 +++++---
 shell/browser/api/electron_api_screen.cc      |  9 ++++---
 shell/browser/api/electron_api_session.cc     | 17 +++++++-----
 .../api/electron_api_system_preferences.cc    | 11 +++++---
 shell/browser/api/electron_api_tray.cc        |  9 ++++---
 .../api/electron_api_utility_process.cc       | 10 ++++---
 shell/browser/api/electron_api_view.cc        |  9 ++++---
 .../browser/api/electron_api_web_contents.cc  |  9 ++++---
 .../api/electron_api_web_contents_view.cc     | 11 +++++---
 .../api/electron_api_web_frame_main.cc        |  9 ++++---
 .../api/electron_api_web_view_manager.cc      | 10 ++++---
 shell/browser/api/message_port.cc             |  9 ++++---
 .../api/views/electron_api_image_view.cc      |  9 ++++---
 shell/browser/electron_browser_main_parts.cc  |  4 +--
 .../electron_browser_main_parts_linux.cc      |  7 ++---
 .../extension_action/extension_action_api.cc  |  2 --
 .../extension_action_api.cc.orig              |  7 +++++
 .../electron_extension_host_delegate.cc       |  2 +-
 .../electron_extensions_api_client.cc         |  8 +++---
 .../extensions/electron_messaging_delegate.cc |  4 +--
 shell/browser/ui/devtools_manager_delegate.cc |  4 +--
 .../ui/devtools_ui_theme_data_source.cc       |  8 +++---
 .../ui/views/client_frame_view_linux.cc       |  4 +--
 shell/common/api/crashpad_support.cc          | 10 ++++---
 shell/common/api/electron_api_asar.cc         |  9 ++++---
 shell/common/api/electron_api_clipboard.cc    |  9 ++++---
 shell/common/api/electron_api_command_line.cc |  9 ++++---
 shell/common/api/electron_api_environment.cc  |  9 ++++---
 shell/common/api/electron_api_native_image.cc |  9 ++++---
 shell/common/api/electron_api_net.cc          |  9 ++++---
 shell/common/api/electron_api_shell.cc        |  9 ++++---
 shell/common/api/electron_api_testing.cc      |  9 ++++---
 shell/common/api/electron_api_v8_util.cc      |  9 ++++---
 shell/common/api/features.cc                  |  9 ++++---
 shell/common/process_util.cc                  |  8 +++---
 .../api/electron_api_context_bridge.cc        | 10 ++++---
 .../electron_api_crash_reporter_renderer.cc   | 10 ++++---
 .../renderer/api/electron_api_ipc_renderer.cc |  9 ++++---
 shell/renderer/api/electron_api_web_frame.cc  |  9 ++++---
 shell/renderer/api/electron_api_web_utils.cc  |  9 ++++---
 62 files changed, 371 insertions(+), 184 deletions(-)

diff --git a/BUILD.gn b/BUILD.gn
index f125cf6..118f307 100644
--- a/electron/BUILD.gn
+++ b/electron/BUILD.gn
@@ -1,3 +1,4 @@
+import("//build/config/jumbo.gni")
 import("//build/config/locales.gni")
 import("//build/config/ui.gni")
 import("//build/config/win/manifest.gni")
@@ -405,7 +406,7 @@ action("electron_generate_node_defines") {
   args = [ rebase_path(target_gen_dir) ] + rebase_path(inputs)
 }
 
-source_set("electron_lib") {
+jumbo_source_set("electron_lib") {
   configs += [
     "//v8:external_startup_data",
     "//third_party/electron_node:node_internals",
@@ -539,6 +540,22 @@ source_set("electron_lib") {
   deps += [ "//electron/build/config:generate_mas_config" ]
 
   sources = filenames.lib_sources
+  jumbo_excluded_sources = [
+    # call to deleted constructor of 'base::OnceCallback<void (bool, const u16string &)>'
+    "shell/app/electron_main_delegate.cc",
+
+    # invalid operands to binary expression ('x11::EventMask' and 'x11::EventMask')
+    "shell/browser/api/electron_api_desktop_capturer.cc",
+
+    # redefinition of 'Converter<mojo::StructPtr<device::mojom::SerialPortInfo>>'
+    "shell/browser/serial/serial_chooser_controller.cc",
+
+    # no member named 'ToV8' in 'gin::Converter<std::vector<std::pair<std::string, std::vector<std::string>>>>'
+    "shell/common/gin_converters/file_dialog_converter.cc",
+
+    # invalid application of 'sizeof' to a function type
+    "shell/utility/electron_content_utility_client.cc",
+  ]
   if (is_win) {
     sources += filenames.lib_sources_win
   }
@@ -553,6 +570,10 @@ source_set("electron_lib") {
   }
   if (!is_mac) {
     sources += filenames.lib_sources_views
+    jumbo_excluded_sources += [
+      # invalid operands to binary expression ('x11::EventMask' and 'x11::EventMask')
+      "shell/browser/native_window_views.cc",
+    ]
   }
 
   if (is_component_build) {
@@ -646,6 +667,10 @@ source_set("electron_lib") {
         "//ui/base/x",
         "//ui/ozone/platform/x11",
       ]
+      jumbo_excluded_sources += [
+        # invalid operands to binary expression ('x11::EventMask' and 'x11::EventMask')
+        "shell/browser/ui/x/x_window_utils.cc",
+      ]
     }
     configs += [ ":gio_unix" ]
     defines += [
diff --git a/shell/browser/api/electron_api_app.cc b/shell/browser/api/electron_api_app.cc
index e7774c4..05d35b9 100644
--- a/electron/shell/browser/api/electron_api_app.cc
+++ b/electron/shell/browser/api/electron_api_app.cc
@@ -1837,7 +1837,7 @@ const char* App::GetTypeName() {
 
 }  // namespace electron::api
 
-namespace {
+namespace a_electron_browser_app {
 
 void Initialize(v8::Local<v8::Object> exports,
                 v8::Local<v8::Value> unused,
@@ -1848,6 +1848,9 @@ void Initialize(v8::Local<v8::Object> exports,
   dict.Set("app", electron::api::App::Create(isolate));
 }
 
-}  // namespace
+}  // namespace a_electron_browser_app
 
-NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_app, Initialize)
+#define _module _module_electron_browser_app
+NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_app,
+                                  a_electron_browser_app::Initialize)
+#undef _module
diff --git a/shell/browser/api/electron_api_auto_updater.cc b/shell/browser/api/electron_api_auto_updater.cc
index 2a1feaa..dd1b137 100644
--- a/electron/shell/browser/api/electron_api_auto_updater.cc
+++ b/electron/shell/browser/api/electron_api_auto_updater.cc
@@ -147,7 +147,7 @@ const char* AutoUpdater::GetTypeName() {
 
 }  // namespace electron::api
 
-namespace {
+namespace a_electron_browser_auto_updater {
 
 using electron::api::AutoUpdater;
 
@@ -160,6 +160,9 @@ void Initialize(v8::Local<v8::Object> exports,
   dict.Set("autoUpdater", AutoUpdater::Create(isolate));
 }
 
-}  // namespace
+}  // namespace a_electron_browser_auto_updater
 
-NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_auto_updater, Initialize)
+#define _module _module_electron_browser_auto_updater
+NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_auto_updater,
+                                  a_electron_browser_auto_updater::Initialize)
+#undef _module
diff --git a/shell/browser/api/electron_api_base_window.cc b/shell/browser/api/electron_api_base_window.cc
index 3bbd4ae..0e82e10 100644
--- a/electron/shell/browser/api/electron_api_base_window.cc
+++ b/electron/shell/browser/api/electron_api_base_window.cc
@@ -1302,7 +1302,7 @@ void BaseWindow::BuildPrototype(v8::Isolate* isolate,
 
 }  // namespace electron::api
 
-namespace {
+namespace a_electron_browser_base_window {
 
 using electron::api::BaseWindow;
 
@@ -1324,6 +1324,9 @@ void Initialize(v8::Local<v8::Object> exports,
   dict.Set("BaseWindow", constructor);
 }
 
-}  // namespace
+}  // namespace a_electron_browser_base_window
 
-NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_base_window, Initialize)
+#define _module _module_electron_browser_base_window
+NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_base_window,
+                                  a_electron_browser_base_window::Initialize)
+#undef _module
diff --git a/shell/browser/api/electron_api_browser_window.cc b/shell/browser/api/electron_api_browser_window.cc
index eb30d2f..502ad2f 100644
--- a/electron/shell/browser/api/electron_api_browser_window.cc
+++ b/electron/shell/browser/api/electron_api_browser_window.cc
@@ -320,7 +320,7 @@ v8::Local<v8::Value> BrowserWindow::From(v8::Isolate* isolate,
 
 }  // namespace electron::api
 
-namespace {
+namespace a_electron_browser_window {
 
 using electron::api::BrowserWindow;
 
@@ -335,6 +335,9 @@ void Initialize(v8::Local<v8::Object> exports,
                isolate, base::BindRepeating(&BrowserWindow::New)));
 }
 
-}  // namespace
+}  // namespace a_electron_browser_window
 
-NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_window, Initialize)
+#define _module _module_electron_browser_window
+NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_window,
+                                  a_electron_browser_window::Initialize)
+#undef _module
diff --git a/shell/browser/api/electron_api_content_tracing.cc b/shell/browser/api/electron_api_content_tracing.cc
index 70215fb..659bcef 100644
--- a/electron/shell/browser/api/electron_api_content_tracing.cc
+++ b/electron/shell/browser/api/electron_api_content_tracing.cc
@@ -56,7 +56,7 @@ struct Converter<base::trace_event::TraceConfig> {
 
 }  // namespace gin
 
-namespace {
+namespace a_electron_browser_content_tracing {
 
 using CompletionCallback = base::OnceCallback<void(const base::FilePath&)>;
 
@@ -178,6 +178,10 @@ void Initialize(v8::Local<v8::Object> exports,
   dict.SetMethod("getTraceBufferUsage", &GetTraceBufferUsage);
 }
 
-}  // namespace
+}  // namespace a_electron_browser_content_tracing
 
-NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_content_tracing, Initialize)
+#define _module _module_electron_browser_content_tracing
+NODE_LINKED_BINDING_CONTEXT_AWARE(
+    electron_browser_content_tracing,
+    a_electron_browser_content_tracing::Initialize)
+#undef _module
diff --git a/shell/browser/api/electron_api_crash_reporter.cc b/shell/browser/api/electron_api_crash_reporter.cc
index 7ded05d..09a764e 100644
--- a/electron/shell/browser/api/electron_api_crash_reporter.cc
+++ b/electron/shell/browser/api/electron_api_crash_reporter.cc
@@ -179,7 +179,7 @@ void Start(const std::string& submit_url,
 
 }  // namespace electron::api::crash_reporter
 
-namespace {
+namespace a_electron_browser_crash_reporter {
 
 #if IS_MAS_BUILD()
 void GetUploadedReports(
@@ -276,6 +276,9 @@ void Initialize(v8::Local<v8::Object> exports,
   dict.SetMethod("getUploadToServer", &GetUploadToServer);
 }
 
-}  // namespace
+}  // namespace a_electron_browser_crash_reporter
 
-NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_crash_reporter, Initialize)
+#define _module _module_electron_browser_crash_reporter
+NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_crash_reporter,
+                                  a_electron_browser_crash_reporter::Initialize)
+#undef _module
diff --git a/shell/browser/api/electron_api_desktop_capturer.cc b/shell/browser/api/electron_api_desktop_capturer.cc
index acd9763..9020db7 100644
--- a/electron/shell/browser/api/electron_api_desktop_capturer.cc
+++ b/electron/shell/browser/api/electron_api_desktop_capturer.cc
@@ -524,7 +524,7 @@ const char* DesktopCapturer::GetTypeName() {
 
 }  // namespace electron::api
 
-namespace {
+namespace a_electron_browser_desktop_capturer {
 
 void Initialize(v8::Local<v8::Object> exports,
                 v8::Local<v8::Value> unused,
@@ -538,6 +538,10 @@ void Initialize(v8::Local<v8::Object> exports,
       &electron::api::DesktopCapturer::IsDisplayMediaSystemPickerAvailable);
 }
 
-}  // namespace
+}  // namespace a_electron_browser_desktop_capturer
 
-NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_desktop_capturer, Initialize)
+#define _module _module_electron_browser_desktop_capturer
+NODE_LINKED_BINDING_CONTEXT_AWARE(
+    electron_browser_desktop_capturer,
+    a_electron_browser_desktop_capturer::Initialize)
+#undef _module
diff --git a/shell/browser/api/electron_api_dialog.cc b/shell/browser/api/electron_api_dialog.cc
index 66c7bf2..a3c8778 100644
--- a/electron/shell/browser/api/electron_api_dialog.cc
+++ b/electron/shell/browser/api/electron_api_dialog.cc
@@ -21,7 +21,7 @@
 #include "v8/include/v8-local-handle.h"
 #include "v8/include/v8-promise.h"
 
-namespace {
+namespace a_electron_browser_dialog {
 
 int ShowMessageBoxSync(const electron::MessageBoxSettings& settings) {
   return electron::ShowMessageBoxSync(settings);
@@ -106,6 +106,9 @@ void Initialize(v8::Local<v8::Object> exports,
 #endif
 }
 
-}  // namespace
+}  // namespace a_electron_browser_dialog
 
-NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_dialog, Initialize)
+#define _module _module_electron_browser_dialog
+NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_dialog,
+                                  a_electron_browser_dialog::Initialize)
+#undef _module
diff --git a/shell/browser/api/electron_api_download_item.cc b/shell/browser/api/electron_api_download_item.cc
index 04488d3..eb2c7e3 100644
--- a/electron/shell/browser/api/electron_api_download_item.cc
+++ b/electron/shell/browser/api/electron_api_download_item.cc
@@ -57,8 +57,8 @@ namespace {
 // V8. So this makes a weak link. The lifetimes of download::DownloadItem and
 // api::DownloadItem are fully independent, and either one may be destroyed
 // before the other.
-struct UserDataLink : base::SupportsUserData::Data {
-  explicit UserDataLink(base::WeakPtr<DownloadItem> item)
+struct UserDataLink2 : base::SupportsUserData::Data {
+  explicit UserDataLink2(base::WeakPtr<DownloadItem> item)
       : download_item(item) {}
 
   base::WeakPtr<DownloadItem> download_item;
@@ -73,7 +73,7 @@ gin::WrapperInfo DownloadItem::kWrapperInfo = {gin::kEmbedderNativeGin};
 // static
 DownloadItem* DownloadItem::FromDownloadItem(download::DownloadItem* item) {
   // ^- say that 7 times fast in a row
-  auto* data = static_cast<UserDataLink*>(
+  auto* data = static_cast<UserDataLink2*>(
       item->GetUserData(kElectronApiDownloadItemKey));
   return data ? data->download_item.get() : nullptr;
 }
@@ -83,7 +83,7 @@ DownloadItem::DownloadItem(v8::Isolate* isolate, download::DownloadItem* item)
   download_item_->AddObserver(this);
   download_item_->SetUserData(
       kElectronApiDownloadItemKey,
-      std::make_unique<UserDataLink>(weak_factory_.GetWeakPtr()));
+      std::make_unique<UserDataLink2>(weak_factory_.GetWeakPtr()));
 }
 
 DownloadItem::~DownloadItem() {
diff --git a/shell/browser/api/electron_api_event_emitter.cc b/shell/browser/api/electron_api_event_emitter.cc
index d346b75..c62b8a0 100644
--- a/electron/shell/browser/api/electron_api_event_emitter.cc
+++ b/electron/shell/browser/api/electron_api_event_emitter.cc
@@ -11,7 +11,7 @@
 #include "shell/common/node_includes.h"
 #include "v8/include/v8.h"
 
-namespace {
+namespace a_electron_browser_event_emitter {
 
 v8::Global<v8::Object>* GetEventEmitterPrototypeReference() {
   static base::NoDestructor<v8::Global<v8::Object>> event_emitter_prototype;
@@ -34,15 +34,19 @@ void Initialize(v8::Local<v8::Object> exports,
            base::BindRepeating(&SetEventEmitterPrototype));
 }
 
-}  // namespace
+}  // namespace a_electron_browser_event_emitter
 
 namespace electron {
 
 v8::Local<v8::Object> GetEventEmitterPrototype(v8::Isolate* isolate) {
+  using namespace a_electron_browser_event_emitter;
   CHECK(!GetEventEmitterPrototypeReference()->IsEmpty());
   return GetEventEmitterPrototypeReference()->Get(isolate);
 }
 
 }  // namespace electron
 
-NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_event_emitter, Initialize)
+#define _module _module_electron_browser_event_emitter
+NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_event_emitter,
+                                  a_electron_browser_event_emitter::Initialize)
+#undef _module
diff --git a/shell/browser/api/electron_api_global_shortcut.cc b/shell/browser/api/electron_api_global_shortcut.cc
index 25bbeb4..075cf7d 100644
--- a/electron/shell/browser/api/electron_api_global_shortcut.cc
+++ b/electron/shell/browser/api/electron_api_global_shortcut.cc
@@ -172,7 +172,7 @@ const char* GlobalShortcut::GetTypeName() {
 
 }  // namespace electron::api
 
-namespace {
+namespace a_electron_browser_global_shortcut {
 
 void Initialize(v8::Local<v8::Object> exports,
                 v8::Local<v8::Value> unused,
@@ -183,6 +183,10 @@ void Initialize(v8::Local<v8::Object> exports,
   dict.Set("globalShortcut", electron::api::GlobalShortcut::Create(isolate));
 }
 
-}  // namespace
+}  // namespace a_electron_browser_global_shortcut
 
-NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_global_shortcut, Initialize)
+#define _module _module_electron_browser_global_shortcut
+NODE_LINKED_BINDING_CONTEXT_AWARE(
+    electron_browser_global_shortcut,
+    a_electron_browser_global_shortcut::Initialize)
+#undef _module
diff --git a/shell/browser/api/electron_api_in_app_purchase.cc b/shell/browser/api/electron_api_in_app_purchase.cc
index 6bc1408..ea2bbab 100644
--- a/electron/shell/browser/api/electron_api_in_app_purchase.cc
+++ b/electron/shell/browser/api/electron_api_in_app_purchase.cc
@@ -206,7 +206,7 @@ void InAppPurchase::OnTransactionsUpdated(
 
 }  // namespace electron::api
 
-namespace {
+namespace a_electron_browser_in_app_purchase {
 
 using electron::api::InAppPurchase;
 
@@ -221,6 +221,10 @@ void Initialize(v8::Local<v8::Object> exports,
 #endif
 }
 
-}  // namespace
+}  // namespace a_electron_browser_in_app_purchase
 
-NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_in_app_purchase, Initialize)
+#define _module _module_electron_browser_in_app_purchase
+NODE_LINKED_BINDING_CONTEXT_AWARE(
+    electron_browser_in_app_purchase,
+    a_electron_browser_in_app_purchase::Initialize)
+#undef _module
diff --git a/shell/browser/api/electron_api_menu.cc b/shell/browser/api/electron_api_menu.cc
index daef734..c2de640 100644
--- a/electron/shell/browser/api/electron_api_menu.cc
+++ b/electron/shell/browser/api/electron_api_menu.cc
@@ -310,7 +310,7 @@ const char* Menu::GetTypeName() {
 
 }  // namespace electron::api
 
-namespace {
+namespace a_electron_browser_menu {
 
 using electron::api::Menu;
 
@@ -329,6 +329,9 @@ void Initialize(v8::Local<v8::Object> exports,
 #endif
 }
 
-}  // namespace
+}  // namespace a_electron_browser_menu
 
-NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_menu, Initialize)
+#define _module _module_electron_browser_menu
+NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_menu,
+                                  a_electron_browser_menu::Initialize)
+#undef _module
diff --git a/shell/browser/api/electron_api_native_theme.cc b/shell/browser/api/electron_api_native_theme.cc
index a86481e..30ac938 100644
--- a/electron/shell/browser/api/electron_api_native_theme.cc
+++ b/electron/shell/browser/api/electron_api_native_theme.cc
@@ -122,7 +122,7 @@ const char* NativeTheme::GetTypeName() {
 
 }  // namespace electron::api
 
-namespace {
+namespace a_electron_browser_native_theme {
 
 using electron::api::NativeTheme;
 
@@ -135,7 +135,7 @@ void Initialize(v8::Local<v8::Object> exports,
   dict.Set("nativeTheme", NativeTheme::Create(isolate));
 }
 
-}  // namespace
+}  // namespace a_electron_browser_native_theme
 
 namespace gin {
 
@@ -175,4 +175,7 @@ bool Converter<ui::NativeTheme::ThemeSource>::FromV8(
 
 }  // namespace gin
 
-NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_native_theme, Initialize)
+#define _module _module_electron_browser_native_theme
+NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_native_theme,
+                                  a_electron_browser_native_theme::Initialize)
+#undef _module
diff --git a/shell/browser/api/electron_api_notification.cc b/shell/browser/api/electron_api_notification.cc
index db63ac7..9851a65 100644
--- a/electron/shell/browser/api/electron_api_notification.cc
+++ b/electron/shell/browser/api/electron_api_notification.cc
@@ -242,7 +242,7 @@ void Notification::WillBeDestroyed() {
 
 }  // namespace electron::api
 
-namespace {
+namespace a_electron_browser_notification {
 
 using electron::api::Notification;
 
@@ -256,6 +256,9 @@ void Initialize(v8::Local<v8::Object> exports,
   dict.SetMethod("isSupported", &Notification::IsSupported);
 }
 
-}  // namespace
+}  // namespace a_electron_browser_notification
 
-NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_notification, Initialize)
+#define _module _module_electron_browser_notification
+NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_notification,
+                                  a_electron_browser_notification::Initialize)
+#undef _module
diff --git a/shell/browser/api/electron_api_power_monitor.cc b/shell/browser/api/electron_api_power_monitor.cc
index b0b9b56..791c73e 100644
--- a/electron/shell/browser/api/electron_api_power_monitor.cc
+++ b/electron/shell/browser/api/electron_api_power_monitor.cc
@@ -166,7 +166,7 @@ const char* PowerMonitor::GetTypeName() {
 
 }  // namespace electron::api
 
-namespace {
+namespace a_electron_browser_power_monitor {
 
 using electron::api::PowerMonitor;
 
@@ -208,6 +208,9 @@ void Initialize(v8::Local<v8::Object> exports,
   dict.SetMethod("isOnBatteryPower", base::BindRepeating(&IsOnBatteryPower));
 }
 
-}  // namespace
+}  // namespace a_electron_browser_power_monitor
 
-NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_power_monitor, Initialize)
+#define _module _module_electron_browser_power_monitor
+NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_power_monitor,
+                                  a_electron_browser_power_monitor::Initialize)
+#undef _module
diff --git a/shell/browser/api/electron_api_power_save_blocker.cc b/shell/browser/api/electron_api_power_save_blocker.cc
index e3420e1..d00e451 100644
--- a/electron/shell/browser/api/electron_api_power_save_blocker.cc
+++ b/electron/shell/browser/api/electron_api_power_save_blocker.cc
@@ -131,7 +131,7 @@ const char* PowerSaveBlocker::GetTypeName() {
 
 }  // namespace electron::api
 
-namespace {
+namespace a_electron_browser_power_save_blocker {
 
 void Initialize(v8::Local<v8::Object> exports,
                 v8::Local<v8::Value> unused,
@@ -143,7 +143,10 @@ void Initialize(v8::Local<v8::Object> exports,
            electron::api::PowerSaveBlocker::Create(isolate));
 }
 
-}  // namespace
+}  // namespace a_electron_browser_power_save_blocker
 
-NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_power_save_blocker,
-                                  Initialize)
+#define _module _module_electron_browser_power_save_blocker
+NODE_LINKED_BINDING_CONTEXT_AWARE(
+    electron_browser_power_save_blocker,
+    a_electron_browser_power_save_blocker::Initialize)
+#undef _module
diff --git a/shell/browser/api/electron_api_printing.cc b/shell/browser/api/electron_api_printing.cc
index 3d58422..5b139a4 100644
--- a/electron/shell/browser/api/electron_api_printing.cc
+++ b/electron/shell/browser/api/electron_api_printing.cc
@@ -70,7 +70,7 @@ v8::Local<v8::Promise> GetPrinterListAsync(v8::Isolate* isolate) {
 
 }  // namespace electron::api
 
-namespace {
+namespace a_electron_browser_printing {
 
 #if BUILDFLAG(ENABLE_PRINTING)
 using electron::api::GetPrinterListAsync;
@@ -88,6 +88,9 @@ void Initialize(v8::Local<v8::Object> exports,
 #endif
 }
 
-}  // namespace
+}  // namespace a_electron_browser_printing
 
-NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_printing, Initialize)
+#define _module _module_electron_browser_printing
+NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_printing,
+                                  a_electron_browser_printing::Initialize)
+#undef _module
diff --git a/shell/browser/api/electron_api_protocol.cc b/shell/browser/api/electron_api_protocol.cc
index 362613d..31cafe7 100644
--- a/electron/shell/browser/api/electron_api_protocol.cc
+++ b/electron/shell/browser/api/electron_api_protocol.cc
@@ -341,7 +341,7 @@ const char* Protocol::GetTypeName() {
 
 }  // namespace electron::api
 
-namespace {
+namespace a_electron_browser_protocol {
 
 void RegisterSchemesAsPrivileged(gin_helper::ErrorThrower thrower,
                                  v8::Local<v8::Value> val) {
@@ -366,6 +366,9 @@ void Initialize(v8::Local<v8::Object> exports,
   dict.SetMethod("getStandardSchemes", &electron::api::GetStandardSchemes);
 }
 
-}  // namespace
+}  // namespace a_electron_browser_protocol
 
-NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_protocol, Initialize)
+#define _module _module_electron_browser_protocol
+NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_protocol,
+                                  a_electron_browser_protocol::Initialize)
+#undef _module
diff --git a/shell/browser/api/electron_api_push_notifications.cc b/shell/browser/api/electron_api_push_notifications.cc
index c443e24..38e4fc8 100644
--- a/electron/shell/browser/api/electron_api_push_notifications.cc
+++ b/electron/shell/browser/api/electron_api_push_notifications.cc
@@ -54,7 +54,7 @@ const char* PushNotifications::GetTypeName() {
 
 }  // namespace electron::api
 
-namespace {
+namespace a_electron_browser_push_notifications {
 
 void Initialize(v8::Local<v8::Object> exports,
                 v8::Local<v8::Value> unused,
@@ -66,7 +66,10 @@ void Initialize(v8::Local<v8::Object> exports,
            electron::api::PushNotifications::Create(isolate));
 }
 
-}  // namespace
+}  // namespace a_electron_browser_push_notifications
 
-NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_push_notifications,
-                                  Initialize)
+#define _module _module_electron_browser_push_notifications
+NODE_LINKED_BINDING_CONTEXT_AWARE(
+    electron_browser_push_notifications,
+    a_electron_browser_push_notifications::Initialize)
+#undef _module
diff --git a/shell/browser/api/electron_api_safe_storage.cc b/shell/browser/api/electron_api_safe_storage.cc
index f9ecdd0..52d640b 100644
--- a/electron/shell/browser/api/electron_api_safe_storage.cc
+++ b/electron/shell/browser/api/electron_api_safe_storage.cc
@@ -12,7 +12,7 @@
 #include "shell/common/gin_helper/dictionary.h"
 #include "shell/common/node_includes.h"
 
-namespace {
+namespace a_electron_browser_safe_storage {
 
 const char* kEncryptionVersionPrefixV10 = "v10";
 const char* kEncryptionVersionPrefixV11 = "v11";
@@ -125,8 +125,6 @@ std::string DecryptString(v8::Isolate* isolate, v8::Local<v8::Value> buffer) {
   return plaintext;
 }
 
-}  // namespace
-
 void Initialize(v8::Local<v8::Object> exports,
                 v8::Local<v8::Value> unused,
                 v8::Local<v8::Context> context,
@@ -142,4 +140,9 @@ void Initialize(v8::Local<v8::Object> exports,
   dict.SetMethod("setUsePlainTextEncryption", &SetUsePasswordV10);
 }
 
-NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_safe_storage, Initialize)
+}  // namespace a_electron_browser_safe_storage
+
+#define _module _module_electron_browser_safe_storage
+NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_safe_storage,
+                                  a_electron_browser_safe_storage::Initialize)
+#undef _module
diff --git a/shell/browser/api/electron_api_screen.cc b/shell/browser/api/electron_api_screen.cc
index 1f8fa48..8454d4c 100644
--- a/electron/shell/browser/api/electron_api_screen.cc
+++ b/electron/shell/browser/api/electron_api_screen.cc
@@ -168,7 +168,7 @@ const char* Screen::GetTypeName() {
 
 }  // namespace electron::api
 
-namespace {
+namespace a_electron_browser_screen {
 
 using electron::api::Screen;
 
@@ -181,6 +181,9 @@ void Initialize(v8::Local<v8::Object> exports,
   dict.SetMethod("createScreen", base::BindRepeating(&Screen::Create));
 }
 
-}  // namespace
+}  // namespace a_electron_browser_screen
 
-NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_screen, Initialize)
+#define _module _module_electron_browser_screen
+NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_screen,
+                                  a_electron_browser_screen::Initialize)
+#undef _module
diff --git a/shell/browser/api/electron_api_session.cc b/shell/browser/api/electron_api_session.cc
index 1118f14..b5f695c 100644
--- a/electron/shell/browser/api/electron_api_session.cc
+++ b/electron/shell/browser/api/electron_api_session.cc
@@ -533,8 +533,8 @@ class DictionaryObserver final : public SpellcheckCustomDictionary::Observer {
 };
 #endif  // BUILDFLAG(ENABLE_BUILTIN_SPELLCHECKER)
 
-struct UserDataLink : base::SupportsUserData::Data {
-  explicit UserDataLink(base::WeakPtr<Session> session_in)
+struct UserDataLink3 : base::SupportsUserData::Data {
+  explicit UserDataLink3(base::WeakPtr<Session> session_in)
       : session{std::move(session_in)} {}
 
   base::WeakPtr<Session> session;
@@ -562,7 +562,7 @@ Session::Session(v8::Isolate* isolate, ElectronBrowserContext* browser_context)
 
   browser_context->SetUserData(
       kElectronApiSessionKey,
-      std::make_unique<UserDataLink>(weak_factory_.GetWeakPtr()));
+      std::make_unique<UserDataLink3>(weak_factory_.GetWeakPtr()));
 
 #if BUILDFLAG(ENABLE_BUILTIN_SPELLCHECKER)
   if (auto* service =
@@ -1686,7 +1686,7 @@ bool Session::IsSpellCheckerEnabled() const {
 // static
 Session* Session::FromBrowserContext(content::BrowserContext* context) {
   auto* data =
-      static_cast<UserDataLink*>(context->GetUserData(kElectronApiSessionKey));
+      static_cast<UserDataLink3*>(context->GetUserData(kElectronApiSessionKey));
   return data ? data->session.get() : nullptr;
 }
 
@@ -1857,7 +1857,7 @@ void Session::WillBeDestroyed() {
 
 }  // namespace electron::api
 
-namespace {
+namespace a_electron_browser_session {
 
 using electron::api::Session;
 
@@ -1901,6 +1901,9 @@ void Initialize(v8::Local<v8::Object> exports,
   dict.SetMethod("fromPath", &FromPath);
 }
 
-}  // namespace
+}  // namespace a_electron_browser_session
 
-NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_session, Initialize)
+#define _module _module_electron_browser_session
+NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_session,
+                                  a_electron_browser_session::Initialize)
+#undef _module
diff --git a/shell/browser/api/electron_api_system_preferences.cc b/shell/browser/api/electron_api_system_preferences.cc
index dec3d1f..f9911a4 100644
--- a/electron/shell/browser/api/electron_api_system_preferences.cc
+++ b/electron/shell/browser/api/electron_api_system_preferences.cc
@@ -108,7 +108,7 @@ const char* SystemPreferences::GetTypeName() {
 
 }  // namespace electron::api
 
-namespace {
+namespace a_electron_browser_system_preferences {
 
 using electron::api::SystemPreferences;
 
@@ -121,7 +121,10 @@ void Initialize(v8::Local<v8::Object> exports,
   dict.Set("systemPreferences", SystemPreferences::Create(isolate));
 }
 
-}  // namespace
+}  // namespace a_electron_browser_system_preferences
 
-NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_system_preferences,
-                                  Initialize)
+#define _module _module_electron_browser_system_preferences
+NODE_LINKED_BINDING_CONTEXT_AWARE(
+    electron_browser_system_preferences,
+    a_electron_browser_system_preferences::Initialize)
+#undef _module
diff --git a/shell/browser/api/electron_api_tray.cc b/shell/browser/api/electron_api_tray.cc
index 0cfd053..6d58364 100644
--- a/electron/shell/browser/api/electron_api_tray.cc
+++ b/electron/shell/browser/api/electron_api_tray.cc
@@ -437,7 +437,7 @@ void Tray::WillBeDestroyed() {
 
 }  // namespace electron::api
 
-namespace {
+namespace a_electron_browser_tray {
 
 using electron::api::Tray;
 
@@ -451,6 +451,9 @@ void Initialize(v8::Local<v8::Object> exports,
   dict.Set("Tray", Tray::GetConstructor(context));
 }
 
-}  // namespace
+}  // namespace a_electron_browser_tray
 
-NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_tray, Initialize)
+#define _module _module_electron_browser_tray
+NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_tray,
+                                  a_electron_browser_tray::Initialize)
+#undef _module
diff --git a/shell/browser/api/electron_api_utility_process.cc b/shell/browser/api/electron_api_utility_process.cc
index 573d384..8a21d9a 100644
--- a/electron/shell/browser/api/electron_api_utility_process.cc
+++ b/electron/shell/browser/api/electron_api_utility_process.cc
@@ -502,7 +502,7 @@ const char* UtilityProcessWrapper::GetTypeName() {
 
 }  // namespace electron
 
-namespace {
+namespace a_electron_browser_utility_process {
 
 void Initialize(v8::Local<v8::Object> exports,
                 v8::Local<v8::Value> unused,
@@ -513,6 +513,10 @@ void Initialize(v8::Local<v8::Object> exports,
   dict.SetMethod("_fork", &electron::api::UtilityProcessWrapper::Create);
 }
 
-}  // namespace
+}  // namespace a_electron_browser_utility_process
 
-NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_utility_process, Initialize)
+#define _module _module_electron_browser_utility_process
+NODE_LINKED_BINDING_CONTEXT_AWARE(
+    electron_browser_utility_process,
+    a_electron_browser_utility_process::Initialize)
+#undef _module
diff --git a/shell/browser/api/electron_api_view.cc b/shell/browser/api/electron_api_view.cc
index d19d397..a4281a6 100644
--- a/electron/shell/browser/api/electron_api_view.cc
+++ b/electron/shell/browser/api/electron_api_view.cc
@@ -455,7 +455,7 @@ void View::BuildPrototype(v8::Isolate* isolate,
 
 }  // namespace electron::api
 
-namespace {
+namespace a_electron_browser_view {
 
 using electron::api::View;
 
@@ -469,6 +469,9 @@ void Initialize(v8::Local<v8::Object> exports,
   dict.Set("View", View::GetConstructor(isolate));
 }
 
-}  // namespace
+}  // namespace a_electron_browser_view
 
-NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_view, Initialize)
+#define _module _module_electron_browser_view
+NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_view,
+                                  a_electron_browser_view::Initialize)
+#undef _module
diff --git a/shell/browser/api/electron_api_web_contents.cc b/shell/browser/api/electron_api_web_contents.cc
index c8110c8..ce6518a 100644
--- a/electron/shell/browser/api/electron_api_web_contents.cc
+++ b/electron/shell/browser/api/electron_api_web_contents.cc
@@ -4719,7 +4719,7 @@ gin::WrapperInfo WebContents::kWrapperInfo = {gin::kEmbedderNativeGin};
 
 }  // namespace electron::api
 
-namespace {
+namespace a_electron_browser_web_contents {
 
 using electron::api::GetAllWebContents;
 using electron::api::WebContents;
@@ -4773,6 +4773,9 @@ void Initialize(v8::Local<v8::Object> exports,
   dict.SetMethod("getAllWebContents", &GetAllWebContentsAsV8);
 }
 
-}  // namespace
+}  // namespace a_electron_browser_web_contents
 
-NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_web_contents, Initialize)
+#define _module _module_electron_browser_web_contents
+NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_web_contents,
+                                  a_electron_browser_web_contents::Initialize)
+#undef _module
diff --git a/shell/browser/api/electron_api_web_contents_view.cc b/shell/browser/api/electron_api_web_contents_view.cc
index 764bc56..1ef5f18 100644
--- a/electron/shell/browser/api/electron_api_web_contents_view.cc
+++ b/electron/shell/browser/api/electron_api_web_contents_view.cc
@@ -235,7 +235,7 @@ void WebContentsView::BuildPrototype(
 
 }  // namespace electron::api
 
-namespace {
+namespace a_electron_browser_web_contents_view {
 
 using electron::api::WebContentsView;
 
@@ -248,7 +248,10 @@ void Initialize(v8::Local<v8::Object> exports,
   dict.Set("WebContentsView", WebContentsView::GetConstructor(isolate));
 }
 
-}  // namespace
+}  // namespace a_electron_browser_web_contents_view
 
-NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_web_contents_view,
-                                  Initialize)
+#define _module _module_electron_browser_web_contents_view
+NODE_LINKED_BINDING_CONTEXT_AWARE(
+    electron_browser_web_contents_view,
+    a_electron_browser_web_contents_view::Initialize)
+#undef _module
diff --git a/shell/browser/api/electron_api_web_frame_main.cc b/shell/browser/api/electron_api_web_frame_main.cc
index a65fa23..a37966b 100644
--- a/electron/shell/browser/api/electron_api_web_frame_main.cc
+++ b/electron/shell/browser/api/electron_api_web_frame_main.cc
@@ -610,7 +610,7 @@ const char* WebFrameMain::GetTypeName() {
 
 }  // namespace electron::api
 
-namespace {
+namespace a_electron_browser_web_frame_main {
 
 using electron::api::WebFrameMain;
 
@@ -670,6 +670,9 @@ void Initialize(v8::Local<v8::Object> exports,
   dict.SetMethod("_fromFtnIdIfExists", &FromFtnIdIfExists);
 }
 
-}  // namespace
+}  // namespace a_electron_browser_web_frame_main
 
-NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_web_frame_main, Initialize)
+#define _module _module_electron_browser_web_frame_main
+NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_web_frame_main,
+                                  a_electron_browser_web_frame_main::Initialize)
+#undef _module
diff --git a/shell/browser/api/electron_api_web_view_manager.cc b/shell/browser/api/electron_api_web_view_manager.cc
index 55b86d1..d17012d 100644
--- a/electron/shell/browser/api/electron_api_web_view_manager.cc
+++ b/electron/shell/browser/api/electron_api_web_view_manager.cc
@@ -13,7 +13,7 @@
 
 using electron::WebContentsPreferences;
 
-namespace {
+namespace a_electron_browser_web_view_manager {
 
 void AddGuest(int guest_instance_id,
               content::WebContents* embedder,
@@ -45,6 +45,10 @@ void Initialize(v8::Local<v8::Object> exports,
   dict.SetMethod("removeGuest", &RemoveGuest);
 }
 
-}  // namespace
+}  // namespace a_electron_browser_web_view_manager
 
-NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_web_view_manager, Initialize)
+#define _module _module_electron_browser_web_view_manager
+NODE_LINKED_BINDING_CONTEXT_AWARE(
+    electron_browser_web_view_manager,
+    a_electron_browser_web_view_manager::Initialize)
+#undef _module
diff --git a/shell/browser/api/message_port.cc b/shell/browser/api/message_port.cc
index 7d48119..3513088 100644
--- a/electron/shell/browser/api/message_port.cc
+++ b/electron/shell/browser/api/message_port.cc
@@ -312,7 +312,7 @@ void MessagePort::WillBeDestroyed() {
 
 }  // namespace electron
 
-namespace {
+namespace a_electron_browser_message_port {
 
 using electron::MessagePort;
 
@@ -337,6 +337,9 @@ void Initialize(v8::Local<v8::Object> exports,
   dict.SetMethod("createPair", &CreatePair);
 }
 
-}  // namespace
+}  // namespace a_electron_browser_message_port
 
-NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_message_port, Initialize)
+#define _module _module_electron_browser_message_port
+NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_message_port,
+                                  a_electron_browser_message_port::Initialize)
+#undef _module
diff --git a/shell/browser/api/views/electron_api_image_view.cc b/shell/browser/api/views/electron_api_image_view.cc
index 1d60af2..702d62f 100644
--- a/electron/shell/browser/api/views/electron_api_image_view.cc
+++ b/electron/shell/browser/api/views/electron_api_image_view.cc
@@ -41,7 +41,7 @@ void ImageView::BuildPrototype(v8::Isolate* isolate,
 
 }  // namespace electron::api
 
-namespace {
+namespace a_electron_browser_image_view {
 
 using electron::api::ImageView;
 
@@ -55,6 +55,9 @@ void Initialize(v8::Local<v8::Object> exports,
                             isolate, base::BindRepeating(&ImageView::New)));
 }
 
-}  // namespace
+}  // namespace a_electron_browser_image_view
 
-NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_image_view, Initialize)
+#define _module _module_electron_browser_image_view
+NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_image_view,
+                                  a_electron_browser_image_view::Initialize)
+#undef _module
diff --git a/shell/browser/electron_browser_main_parts.cc b/shell/browser/electron_browser_main_parts.cc
index 1603230..78f09da 100644
--- a/electron/shell/browser/electron_browser_main_parts.cc
+++ b/electron/shell/browser/electron_browser_main_parts.cc
@@ -454,7 +454,7 @@ int ElectronBrowserMainParts::PreMainMessageLoopRun() {
       ElectronWebUIControllerFactory::GetInstance());
 
   auto* command_line = base::CommandLine::ForCurrentProcess();
-  if (command_line->HasSwitch(switches::kRemoteDebuggingPipe)) {
+  if (command_line->HasSwitch(::switches::kRemoteDebuggingPipe)) {
     // --remote-debugging-pipe
     auto on_disconnect = base::BindOnce([]() {
       content::GetUIThreadTaskRunner({})->PostTask(
@@ -462,7 +462,7 @@ int ElectronBrowserMainParts::PreMainMessageLoopRun() {
     });
     content::DevToolsAgentHost::StartRemoteDebuggingPipeHandler(
         std::move(on_disconnect));
-  } else if (command_line->HasSwitch(switches::kRemoteDebuggingPort)) {
+  } else if (command_line->HasSwitch(::switches::kRemoteDebuggingPort)) {
     // --remote-debugging-port
     DevToolsManagerDelegate::StartHttpHandler();
   }
diff --git a/shell/browser/electron_browser_main_parts_linux.cc b/shell/browser/electron_browser_main_parts_linux.cc
index 85d1ad9..7c9f01f 100644
--- a/electron/shell/browser/electron_browser_main_parts_linux.cc
+++ b/electron/shell/browser/electron_browser_main_parts_linux.cc
@@ -123,15 +123,16 @@ std::string MaybeFixPlatformName(const std::string& ozone_platform_hint) {
 void ElectronBrowserMainParts::DetectOzonePlatform() {
   auto const env = base::Environment::Create();
   auto* const command_line = base::CommandLine::ForCurrentProcess();
-  if (!command_line->HasSwitch(switches::kOzonePlatform)) {
+  if (!command_line->HasSwitch(::switches::kOzonePlatform)) {
     auto ozone_platform_hint =
-        command_line->GetSwitchValueASCII(switches::kOzonePlatformHint);
+        command_line->GetSwitchValueASCII(::switches::kOzonePlatformHint);
     if (ozone_platform_hint.empty()) {
       env->GetVar(kElectronOzonePlatformHint, &ozone_platform_hint);
     }
     if (!ozone_platform_hint.empty()) {
       command_line->AppendSwitchASCII(
-          switches::kOzonePlatform, MaybeFixPlatformName(ozone_platform_hint));
+          ::switches::kOzonePlatform,
+          MaybeFixPlatformName(ozone_platform_hint));
     }
   }
 
diff --git a/shell/browser/extensions/api/extension_action/extension_action_api.cc b/shell/browser/extensions/api/extension_action/extension_action_api.cc
index d7fe4f9..8ecdbd5 100644
--- a/electron/shell/browser/extensions/api/extension_action/extension_action_api.cc
+++ b/electron/shell/browser/extensions/api/extension_action/extension_action_api.cc
@@ -14,8 +14,6 @@
 #include "extensions/browser/extension_util.h"
 #include "extensions/common/mojom/view_type.mojom.h"
 
-using content::WebContents;
-
 namespace extensions {
 
 //
diff --git a/shell/browser/extensions/api/extension_action/extension_action_api.cc.orig b/shell/browser/extensions/api/extension_action/extension_action_api.cc.orig
index 0b05be8..d7fe4f9 100644
--- a/electron/shell/browser/extensions/api/extension_action/extension_action_api.cc.orig
+++ b/electron/shell/browser/extensions/api/extension_action/extension_action_api.cc.orig
@@ -143,6 +143,13 @@ ExtensionActionGetPopupFunction::RunExtensionAction() {
   return RespondNow(WithArguments(""));
 }
 
+ExtensionFunction::ResponseAction
+ExtensionActionOpenPopupFunction::RunExtensionAction() {
+  LOG(INFO) << "chrome.action.openPopup is not supported in Electron";
+
+  return RespondNow(NoArguments());
+}
+
 ExtensionFunction::ResponseAction
 ExtensionActionGetBadgeTextFunction::RunExtensionAction() {
   LOG(INFO) << "chrome.action.getBadgeText is not supported in Electron";
diff --git a/shell/browser/extensions/electron_extension_host_delegate.cc b/shell/browser/extensions/electron_extension_host_delegate.cc
index 9b4f233..c1acdad 100644
--- a/electron/shell/browser/extensions/electron_extension_host_delegate.cc
+++ b/electron/shell/browser/extensions/electron_extension_host_delegate.cc
@@ -24,7 +24,7 @@ void ElectronExtensionHostDelegate::OnExtensionHostCreated(
   ElectronExtensionWebContentsObserver::CreateForWebContents(web_contents);
   v8::Isolate* isolate = v8::Isolate::GetCurrent();
   v8::HandleScope scope(isolate);
-  electron::api::WebContents::FromOrCreate(isolate, web_contents);
+  ::electron::api::WebContents::FromOrCreate(isolate, web_contents);
 }
 
 content::JavaScriptDialogManager*
diff --git a/shell/browser/extensions/electron_extensions_api_client.cc b/shell/browser/extensions/electron_extensions_api_client.cc
index d00066c..cf18cc1 100644
--- a/electron/shell/browser/extensions/electron_extensions_api_client.cc
+++ b/electron/shell/browser/extensions/electron_extensions_api_client.cc
@@ -40,7 +40,7 @@ class ElectronGuestViewManagerDelegate
   void OnGuestAdded(content::WebContents* guest_web_contents) const override {
     v8::Isolate* isolate = v8::Isolate::GetCurrent();
     v8::HandleScope scope(isolate);
-    electron::api::WebContents::FromOrCreate(isolate, guest_web_contents);
+    ::electron::api::WebContents::FromOrCreate(isolate, guest_web_contents);
   }
 };
 
@@ -64,8 +64,8 @@ class ElectronMimeHandlerViewGuestDelegate
     if (!web_contents)
       return true;
 
-    electron::api::WebContents* api_web_contents =
-        electron::api::WebContents::From(
+    ::electron::api::WebContents* api_web_contents =
+        ::electron::api::WebContents::From(
             web_contents->GetOutermostWebContents());
     if (api_web_contents)
       api_web_contents->HandleContextMenu(render_frame_host, params);
@@ -89,7 +89,7 @@ MessagingDelegate* ElectronExtensionsAPIClient::GetMessagingDelegate() {
 void ElectronExtensionsAPIClient::AttachWebContentsHelpers(
     content::WebContents* web_contents) const {
 #if BUILDFLAG(ENABLE_PRINTING)
-  electron::PrintViewManagerElectron::CreateForWebContents(web_contents);
+  ::electron::PrintViewManagerElectron::CreateForWebContents(web_contents);
   printing::CreateCompositeClientIfNeeded(web_contents, std::string());
 #endif
 
diff --git a/shell/browser/extensions/electron_messaging_delegate.cc b/shell/browser/extensions/electron_messaging_delegate.cc
index 711f426..8b5e477 100644
--- a/electron/shell/browser/extensions/electron_messaging_delegate.cc
+++ b/electron/shell/browser/extensions/electron_messaging_delegate.cc
@@ -42,7 +42,7 @@ ElectronMessagingDelegate::IsNativeMessagingHostAllowed(
 std::optional<base::Value::Dict> ElectronMessagingDelegate::MaybeGetTabInfo(
     content::WebContents* web_contents) {
   if (web_contents) {
-    auto* api_contents = electron::api::WebContents::From(web_contents);
+    auto* api_contents = ::electron::api::WebContents::From(web_contents);
     if (api_contents) {
       api::tabs::Tab tab;
       tab.id = api_contents->ID();
@@ -58,7 +58,7 @@ std::optional<base::Value::Dict> ElectronMessagingDelegate::MaybeGetTabInfo(
 content::WebContents* ElectronMessagingDelegate::GetWebContentsByTabId(
     content::BrowserContext* browser_context,
     int tab_id) {
-  auto* contents = electron::api::WebContents::FromID(tab_id);
+  auto* contents = ::electron::api::WebContents::FromID(tab_id);
   if (!contents) {
     return nullptr;
   }
diff --git a/shell/browser/ui/devtools_manager_delegate.cc b/shell/browser/ui/devtools_manager_delegate.cc
index 4b36716..a232db3 100644
--- a/electron/shell/browser/ui/devtools_manager_delegate.cc
+++ b/electron/shell/browser/ui/devtools_manager_delegate.cc
@@ -68,10 +68,10 @@ std::unique_ptr<content::DevToolsSocketFactory> CreateSocketFactory() {
   // See if the user specified a port on the command line (useful for
   // automation). If not, use an ephemeral port by specifying 0.
   int port = 0;
-  if (command_line.HasSwitch(switches::kRemoteDebuggingPort)) {
+  if (command_line.HasSwitch(::switches::kRemoteDebuggingPort)) {
     int temp_port;
     std::string port_str =
-        command_line.GetSwitchValueASCII(switches::kRemoteDebuggingPort);
+        command_line.GetSwitchValueASCII(::switches::kRemoteDebuggingPort);
     if (base::StringToInt(port_str, &temp_port) && temp_port >= 0 &&
         temp_port < 65535) {
       port = temp_port;
diff --git a/shell/browser/ui/devtools_ui_theme_data_source.cc b/shell/browser/ui/devtools_ui_theme_data_source.cc
index 452325b..dcce3b3 100644
--- a/electron/shell/browser/ui/devtools_ui_theme_data_source.cc
+++ b/electron/shell/browser/ui/devtools_ui_theme_data_source.cc
@@ -35,13 +35,13 @@ GURL GetThemeUrl(const std::string& path) {
               std::string(chrome::kChromeUIThemeHost) + "/" + path);
 }
 
-scoped_refptr<base::RefCountedMemory> CreateNotFoundResponse() {
+scoped_refptr<base::RefCountedMemory> CreateNotFoundResponse2() {
   const char kHttpNotFound[] = "HTTP/1.1 404 Not Found\n\n";
   return base::MakeRefCounted<base::RefCountedStaticMemory>(
       base::byte_span_from_cstring(kHttpNotFound));
 }
 
-std::string GetMimeTypeForUrl(const GURL& url) {
+std::string GetMimeTypeForUrl2(const GURL& url) {
   std::string filename = url.ExtractFileName();
   if (base::EndsWith(filename, ".html", base::CompareCase::INSENSITIVE_ASCII)) {
     return "text/html";
@@ -103,11 +103,11 @@ void ThemeDataSource::StartDataRequest(
     return;
   }
 
-  std::move(callback).Run(CreateNotFoundResponse());
+  std::move(callback).Run(CreateNotFoundResponse2());
 }
 
 std::string ThemeDataSource::GetMimeType(const GURL& url) {
-  return GetMimeTypeForUrl(url);
+  return GetMimeTypeForUrl2(url);
 }
 
 void ThemeDataSource::SendColorsCss(
diff --git a/shell/browser/ui/views/client_frame_view_linux.cc b/shell/browser/ui/views/client_frame_view_linux.cc
index 98f6f0b..4c43d25 100644
--- a/electron/shell/browser/ui/views/client_frame_view_linux.cc
+++ b/electron/shell/browser/ui/views/client_frame_view_linux.cc
@@ -40,7 +40,7 @@ namespace {
 
 // These values should be the same as Chromium uses.
 constexpr int kResizeBorder = 10;
-constexpr int kResizeInsideBoundsSize = 5;
+constexpr int kResizeInsideBoundsSize2 = 5;
 
 ui::NavButtonProvider::ButtonState ButtonStateToNavButtonProviderState(
     views::Button::ButtonState state) {
@@ -199,7 +199,7 @@ void ClientFrameViewLinux::OnWindowButtonOrderingChange() {
 int ClientFrameViewLinux::ResizingBorderHitTest(const gfx::Point& point) {
   return ResizingBorderHitTestImpl(point,
                                    RestoredMirroredFrameBorderInsets() +
-                                       gfx::Insets(kResizeInsideBoundsSize));
+                                       gfx::Insets(kResizeInsideBoundsSize2));
 }
 
 gfx::Rect ClientFrameViewLinux::GetBoundsForClientView() const {
diff --git a/shell/common/api/crashpad_support.cc b/shell/common/api/crashpad_support.cc
index 6106304..966e518 100644
--- a/electron/shell/common/api/crashpad_support.cc
+++ b/electron/shell/common/api/crashpad_support.cc
@@ -9,7 +9,7 @@
 #include "components/crash/core/app/crashpad.h"  // nogncheck
 #endif
 
-namespace {
+namespace a_electron_common_crashpad_support {
 
 #if BUILDFLAG(IS_LINUX)
 int GetCrashdumpSignalFD() {
@@ -34,6 +34,10 @@ void Initialize(v8::Local<v8::Object> exports,
 #endif
 }
 
-}  // namespace
+}  // namespace a_electron_common_crashpad_support
 
-NODE_LINKED_BINDING_CONTEXT_AWARE(electron_common_crashpad_support, Initialize)
+#define _module _module_electron_common_crashpad_support
+NODE_LINKED_BINDING_CONTEXT_AWARE(
+    electron_common_crashpad_support,
+    a_electron_common_crashpad_support::Initialize)
+#undef _module
diff --git a/shell/common/api/electron_api_asar.cc b/shell/common/api/electron_api_asar.cc
index 2661292..3c4ae53 100644
--- a/electron/shell/common/api/electron_api_asar.cc
+++ b/electron/shell/common/api/electron_api_asar.cc
@@ -11,7 +11,7 @@
 #include "shell/common/gin_helper/dictionary.h"
 #include "shell/common/node_includes.h"
 
-namespace {
+namespace a_electron_common_asar {
 
 class Archive : public node::ObjectWrap {
  public:
@@ -226,6 +226,9 @@ void Initialize(v8::Local<v8::Object> exports,
   NODE_SET_METHOD(exports, "splitPath", &SplitPath);
 }
 
-}  // namespace
+}  // namespace a_electron_common_asar
 
-NODE_LINKED_BINDING_CONTEXT_AWARE(electron_common_asar, Initialize)
+#define _module _module_electron_common_asar
+NODE_LINKED_BINDING_CONTEXT_AWARE(electron_common_asar,
+                                  a_electron_common_asar::Initialize)
+#undef _module
diff --git a/shell/common/api/electron_api_clipboard.cc b/shell/common/api/electron_api_clipboard.cc
index b335ea7..33c3202 100644
--- a/electron/shell/common/api/electron_api_clipboard.cc
+++ b/electron/shell/common/api/electron_api_clipboard.cc
@@ -288,7 +288,7 @@ void Clipboard::WriteFilesForTesting(const std::vector<base::FilePath>& files) {
 
 }  // namespace electron::api
 
-namespace {
+namespace a_electron_common_clipboard {
 
 void Initialize(v8::Local<v8::Object> exports,
                 v8::Local<v8::Value> unused,
@@ -319,6 +319,9 @@ void Initialize(v8::Local<v8::Object> exports,
   dict.SetMethod("clear", &electron::api::Clipboard::Clear);
 }
 
-}  // namespace
+}  // namespace a_electron_common_clipboard
 
-NODE_LINKED_BINDING_CONTEXT_AWARE(electron_common_clipboard, Initialize)
+#define _module _module_electron_common_clipboard
+NODE_LINKED_BINDING_CONTEXT_AWARE(electron_common_clipboard,
+                                  a_electron_common_clipboard::Initialize)
+#undef _module
diff --git a/shell/common/api/electron_api_command_line.cc b/shell/common/api/electron_api_command_line.cc
index 7862969..5372962 100644
--- a/electron/shell/common/api/electron_api_command_line.cc
+++ b/electron/shell/common/api/electron_api_command_line.cc
@@ -10,7 +10,7 @@
 #include "shell/common/gin_helper/dictionary.h"
 #include "shell/common/node_includes.h"
 
-namespace {
+namespace a_electron_common_command_line {
 
 bool HasSwitch(const std::string& name) {
   return base::CommandLine::ForCurrentProcess()->HasSwitch(name);
@@ -63,6 +63,9 @@ void Initialize(v8::Local<v8::Object> exports,
   dict.SetMethod("appendArgument", &AppendArg);
 }
 
-}  // namespace
+}  // namespace a_electron_common_command_line
 
-NODE_LINKED_BINDING_CONTEXT_AWARE(electron_common_command_line, Initialize)
+#define _module _module_electron_common_command_line
+NODE_LINKED_BINDING_CONTEXT_AWARE(electron_common_command_line,
+                                  a_electron_common_command_line::Initialize)
+#undef _module
diff --git a/shell/common/api/electron_api_environment.cc b/shell/common/api/electron_api_environment.cc
index f785c08..cd1aee1 100644
--- a/electron/shell/common/api/electron_api_environment.cc
+++ b/electron/shell/common/api/electron_api_environment.cc
@@ -6,7 +6,7 @@
 #include "shell/common/gin_helper/dictionary.h"
 #include "shell/common/node_includes.h"
 
-namespace {
+namespace a_electron_common_environment {
 
 v8::Local<v8::Value> GetVar(v8::Isolate* isolate, const std::string& name) {
   std::string value;
@@ -35,6 +35,9 @@ void Initialize(v8::Local<v8::Object> exports,
   dict.SetMethod("setVar", &SetVar);
 }
 
-}  // namespace
+}  // namespace a_electron_common_environment
 
-NODE_LINKED_BINDING_CONTEXT_AWARE(electron_common_environment, Initialize)
+#define _module _module_electron_common_environment
+NODE_LINKED_BINDING_CONTEXT_AWARE(electron_common_environment,
+                                  a_electron_common_environment::Initialize)
+#undef _module
diff --git a/shell/common/api/electron_api_native_image.cc b/shell/common/api/electron_api_native_image.cc
index 18b4683..8b34155 100644
--- a/electron/shell/common/api/electron_api_native_image.cc
+++ b/electron/shell/common/api/electron_api_native_image.cc
@@ -620,7 +620,7 @@ gin::WrapperInfo NativeImage::kWrapperInfo = {gin::kEmbedderNativeGin};
 
 }  // namespace electron::api
 
-namespace {
+namespace a_electron_common_native_image {
 
 using electron::api::NativeImage;
 
@@ -646,6 +646,9 @@ void Initialize(v8::Local<v8::Object> exports,
 #endif
 }
 
-}  // namespace
+}  // namespace a_electron_common_native_image
 
-NODE_LINKED_BINDING_CONTEXT_AWARE(electron_common_native_image, Initialize)
+#define _module _module_electron_common_native_image
+NODE_LINKED_BINDING_CONTEXT_AWARE(electron_common_native_image,
+                                  a_electron_common_native_image::Initialize)
+#undef _module
diff --git a/shell/common/api/electron_api_net.cc b/shell/common/api/electron_api_net.cc
index 78a3b0a..5de0131 100644
--- a/electron/shell/common/api/electron_api_net.cc
+++ b/electron/shell/common/api/electron_api_net.cc
@@ -21,7 +21,7 @@
 #include "shell/common/gin_helper/promise.h"
 #include "shell/common/node_includes.h"
 
-namespace {
+namespace a_electron_common_net {
 
 bool IsOnline() {
   return !net::NetworkChangeNotifier::IsOffline();
@@ -91,6 +91,9 @@ void Initialize(v8::Local<v8::Object> exports,
   dict.SetMethod("resolveHost", &ResolveHost);
 }
 
-}  // namespace
+}  // namespace a_electron_common_net
 
-NODE_LINKED_BINDING_CONTEXT_AWARE(electron_common_net, Initialize)
+#define _module _module_electron_common_net
+NODE_LINKED_BINDING_CONTEXT_AWARE(electron_common_net,
+                                  a_electron_common_net::Initialize)
+#undef _module
diff --git a/shell/common/api/electron_api_shell.cc b/shell/common/api/electron_api_shell.cc
index d6097e7..dab51a4 100644
--- a/electron/shell/common/api/electron_api_shell.cc
+++ b/electron/shell/common/api/electron_api_shell.cc
@@ -45,7 +45,7 @@ struct Converter<base::win::ShortcutOperation> {
 }  // namespace gin
 #endif
 
-namespace {
+namespace a_electron_common_shell {
 
 void OnOpenFinished(gin_helper::Promise<void> promise,
                     const std::string& error) {
@@ -185,6 +185,9 @@ void Initialize(v8::Local<v8::Object> exports,
 #endif
 }
 
-}  // namespace
+}  // namespace a_electron_common_shell
 
-NODE_LINKED_BINDING_CONTEXT_AWARE(electron_common_shell, Initialize)
+#define _module _module_electron_common_shell
+NODE_LINKED_BINDING_CONTEXT_AWARE(electron_common_shell,
+                                  a_electron_common_shell::Initialize)
+#undef _module
diff --git a/shell/common/api/electron_api_testing.cc b/shell/common/api/electron_api_testing.cc
index 8d88fca..7ac706c 100644
--- a/electron/shell/common/api/electron_api_testing.cc
+++ b/electron/shell/common/api/electron_api_testing.cc
@@ -9,7 +9,7 @@
 #include "v8/include/v8.h"
 
 #if DCHECK_IS_ON()
-namespace {
+namespace a_electron_common_testing {
 
 void Log(int severity, std::string text) {
   switch (severity) {
@@ -42,7 +42,10 @@ void Initialize(v8::Local<v8::Object> exports,
   dict.SetMethod("log", &Log);
 }
 
-}  // namespace
+}  // namespace a_electron_common_testing
 
-NODE_LINKED_BINDING_CONTEXT_AWARE(electron_common_testing, Initialize)
+#define _module _module_electron_common_testing
+NODE_LINKED_BINDING_CONTEXT_AWARE(electron_common_testing,
+                                  a_electron_common_testing::Initialize)
+#undef _module
 #endif
diff --git a/shell/common/api/electron_api_v8_util.cc b/shell/common/api/electron_api_v8_util.cc
index 4f3d8ec..889d591 100644
--- a/electron/shell/common/api/electron_api_v8_util.cc
+++ b/electron/shell/common/api/electron_api_v8_util.cc
@@ -39,7 +39,7 @@ struct Converter<std::pair<Type1, Type2>> {
 
 }  // namespace gin
 
-namespace {
+namespace a_electron_common_v8_util {
 
 v8::Local<v8::Value> GetHiddenValue(v8::Isolate* isolate,
                                     v8::Local<v8::Object> object,
@@ -110,6 +110,9 @@ void Initialize(v8::Local<v8::Object> exports,
   dict.SetMethod("runUntilIdle", &RunUntilIdle);
 }
 
-}  // namespace
+}  // namespace a_electron_common_v8_util
 
-NODE_LINKED_BINDING_CONTEXT_AWARE(electron_common_v8_util, Initialize)
+#define _module _module_electron_common_v8_util
+NODE_LINKED_BINDING_CONTEXT_AWARE(electron_common_v8_util,
+                                  a_electron_common_v8_util::Initialize)
+#undef _module
diff --git a/shell/common/api/features.cc b/shell/common/api/features.cc
index af5d530..59c4c27 100644
--- a/electron/shell/common/api/features.cc
+++ b/electron/shell/common/api/features.cc
@@ -7,7 +7,7 @@
 #include "shell/common/gin_helper/dictionary.h"
 #include "shell/common/node_includes.h"
 
-namespace {
+namespace a_electron_common_features {
 
 bool IsBuiltinSpellCheckerEnabled() {
   return BUILDFLAG(ENABLE_BUILTIN_SPELLCHECKER);
@@ -51,6 +51,9 @@ void Initialize(v8::Local<v8::Object> exports,
   dict.SetMethod("isExtensionsEnabled", &IsExtensionsEnabled);
 }
 
-}  // namespace
+}  // namespace a_electron_common_features
 
-NODE_LINKED_BINDING_CONTEXT_AWARE(electron_common_features, Initialize)
+#define _module _module_electron_common_features
+NODE_LINKED_BINDING_CONTEXT_AWARE(electron_common_features,
+                                  a_electron_common_features::Initialize)
+#undef _module
diff --git a/shell/common/process_util.cc b/shell/common/process_util.cc
index 6e68a01..e09794f 100644
--- a/electron/shell/common/process_util.cc
+++ b/electron/shell/common/process_util.cc
@@ -14,7 +14,7 @@ namespace electron {
 
 std::string GetProcessType() {
   auto* command_line = base::CommandLine::ForCurrentProcess();
-  return command_line->GetSwitchValueASCII(switches::kProcessType);
+  return command_line->GetSwitchValueASCII(::switches::kProcessType);
 }
 
 bool IsBrowserProcess() {
@@ -23,17 +23,17 @@ bool IsBrowserProcess() {
 }
 
 bool IsRendererProcess() {
-  static bool result = GetProcessType() == switches::kRendererProcess;
+  static bool result = GetProcessType() == ::switches::kRendererProcess;
   return result;
 }
 
 bool IsUtilityProcess() {
-  static bool result = GetProcessType() == switches::kUtilityProcess;
+  static bool result = GetProcessType() == ::switches::kUtilityProcess;
   return result;
 }
 
 bool IsZygoteProcess() {
-  static bool result = GetProcessType() == switches::kZygoteProcess;
+  static bool result = GetProcessType() == ::switches::kZygoteProcess;
   return result;
 }
 
diff --git a/shell/renderer/api/electron_api_context_bridge.cc b/shell/renderer/api/electron_api_context_bridge.cc
index 43c77d4..e053dc9 100644
--- a/electron/shell/renderer/api/electron_api_context_bridge.cc
+++ b/electron/shell/renderer/api/electron_api_context_bridge.cc
@@ -825,7 +825,7 @@ bool IsCalledFromMainWorld(v8::Isolate* isolate) {
 
 }  // namespace electron
 
-namespace {
+namespace a_electron_renderer_context_bridge {
 
 void Initialize(v8::Local<v8::Object> exports,
                 v8::Local<v8::Value> unused,
@@ -845,6 +845,10 @@ void Initialize(v8::Local<v8::Object> exports,
 #endif
 }
 
-}  // namespace
+}  // namespace a_electron_renderer_context_bridge
 
-NODE_LINKED_BINDING_CONTEXT_AWARE(electron_renderer_context_bridge, Initialize)
+#define _module _module_electron_renderer_context_bridge
+NODE_LINKED_BINDING_CONTEXT_AWARE(
+    electron_renderer_context_bridge,
+    a_electron_renderer_context_bridge::Initialize)
+#undef _module
diff --git a/shell/renderer/api/electron_api_crash_reporter_renderer.cc b/shell/renderer/api/electron_api_crash_reporter_renderer.cc
index 1045eb6..0ee0861 100644
--- a/electron/shell/renderer/api/electron_api_crash_reporter_renderer.cc
+++ b/electron/shell/renderer/api/electron_api_crash_reporter_renderer.cc
@@ -10,7 +10,7 @@
 #include "shell/common/crash_keys.h"
 #endif
 
-namespace {
+namespace a_electron_renderer_crash_reporter {
 
 v8::Local<v8::Value> GetParameters(v8::Isolate* isolate) {
   std::map<std::string, std::string> keys;
@@ -40,6 +40,10 @@ void Initialize(v8::Local<v8::Object> exports,
   dict.SetMethod("getParameters", &GetParameters);
 }
 
-}  // namespace
+}  // namespace a_electron_renderer_crash_reporter
 
-NODE_LINKED_BINDING_CONTEXT_AWARE(electron_renderer_crash_reporter, Initialize)
+#define _module _module_electron_renderer_crash_reporter
+NODE_LINKED_BINDING_CONTEXT_AWARE(
+    electron_renderer_crash_reporter,
+    a_electron_renderer_crash_reporter::Initialize)
+#undef _module
diff --git a/shell/renderer/api/electron_api_ipc_renderer.cc b/shell/renderer/api/electron_api_ipc_renderer.cc
index 29305a4..6f55214 100644
--- a/electron/shell/renderer/api/electron_api_ipc_renderer.cc
+++ b/electron/shell/renderer/api/electron_api_ipc_renderer.cc
@@ -27,7 +27,7 @@
 using blink::WebLocalFrame;
 using content::RenderFrame;
 
-namespace {
+namespace a_electron_renderer_ipc {
 
 const char kIPCMethodCalledAfterContextReleasedError[] =
     "IPC method called after context was released";
@@ -216,6 +216,9 @@ void Initialize(v8::Local<v8::Object> exports,
   dict.Set("ipc", IPCRenderer::Create(context->GetIsolate()));
 }
 
-}  // namespace
+}  // namespace a_electron_renderer_ipc
 
-NODE_LINKED_BINDING_CONTEXT_AWARE(electron_renderer_ipc, Initialize)
+#define _module _module_electron_renderer_ipc
+NODE_LINKED_BINDING_CONTEXT_AWARE(electron_renderer_ipc,
+                                  a_electron_renderer_ipc::Initialize)
+#undef _module
diff --git a/shell/renderer/api/electron_api_web_frame.cc b/shell/renderer/api/electron_api_web_frame.cc
index 59a42c0..6a6f82c 100644
--- a/electron/shell/renderer/api/electron_api_web_frame.cc
+++ b/electron/shell/renderer/api/electron_api_web_frame.cc
@@ -911,7 +911,7 @@ std::set<SpellCheckerHolder*> SpellCheckerHolder::instances_;
 
 }  // namespace electron
 
-namespace {
+namespace a_electron_renderer_web_frame {
 
 void Initialize(v8::Local<v8::Object> exports,
                 v8::Local<v8::Value> unused,
@@ -925,6 +925,9 @@ void Initialize(v8::Local<v8::Object> exports,
                             isolate, electron::GetRenderFrame(exports)));
 }
 
-}  // namespace
+}  // namespace a_electron_renderer_web_frame
 
-NODE_LINKED_BINDING_CONTEXT_AWARE(electron_renderer_web_frame, Initialize)
+#define _module _module_electron_renderer_web_frame
+NODE_LINKED_BINDING_CONTEXT_AWARE(electron_renderer_web_frame,
+                                  a_electron_renderer_web_frame::Initialize)
+#undef _module
diff --git a/shell/renderer/api/electron_api_web_utils.cc b/shell/renderer/api/electron_api_web_utils.cc
index c1c399f..51b5b35 100644
--- a/electron/shell/renderer/api/electron_api_web_utils.cc
+++ b/electron/shell/renderer/api/electron_api_web_utils.cc
@@ -24,7 +24,7 @@ std::string GetPathForFile(v8::Isolate* isolate, v8::Local<v8::Value> file) {
 
 }  // namespace electron::api::web_utils
 
-namespace {
+namespace a_electron_renderer_web_utils {
 
 void Initialize(v8::Local<v8::Object> exports,
                 v8::Local<v8::Value> unused,
@@ -35,6 +35,9 @@ void Initialize(v8::Local<v8::Object> exports,
   dict.SetMethod("getPathForFile", &electron::api::web_utils::GetPathForFile);
 }
 
-}  // namespace
+}  // namespace a_electron_renderer_web_utils
 
-NODE_LINKED_BINDING_CONTEXT_AWARE(electron_renderer_web_utils, Initialize)
+#define _module _module_electron_renderer_web_utils
+NODE_LINKED_BINDING_CONTEXT_AWARE(electron_renderer_web_utils,
+                                  a_electron_renderer_web_utils::Initialize)
+#undef _module
