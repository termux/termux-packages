From 943a8c834c77219426620b196603d993d4c984c1 Mon Sep 17 00:00:00 2001
From: Chongyun Lee <licy183@termux.dev>
Date: Fri, 18 Apr 2025 23:54:01 +0800
Subject: [PATCH] reland jumbo 9

Enable jumbo build for the following component(s)/source_set(s):

- //content:browser
- //content:devtools_protocol
- //content/child:child
- //content/common:common
- //content/gpu:gpu_sources
- //content/public/browser:browser_sources
- //content/public/child:child_sources
- //content/public/common:common_sources
- //content/public/renderer:renderer_sources
- //content/renderer:renderer
- //content/services/auction_worklet:auction_worklet
- //content/utility:utility

---
 content/browser/BUILD.gn                      | 176 +++++++++++-------
 .../aggregation_service_storage_sql.cc        |   4 +
 .../aggregatable_debug_report.cc              |   4 +-
 .../attribution_storage_sql.cc                |   6 +
 content/browser/devtools/BUILD.gn             |   2 +-
 .../devtools/protocol/fedcm_handler.cc        |   2 +-
 .../browser/devtools/protocol/page_handler.cc |   4 +-
 .../render_frame_devtools_agent_host.cc       |   4 +
 .../web_contents_devtools_agent_host.cc       |   4 +
 .../direct_sockets_service_impl.cc            |   4 +
 .../file_system_access_change_source.cc       |   4 +
 .../file_system_access_watcher_manager.cc     |   4 +
 content/browser/gpu/compositor_util.cc        |  30 +--
 .../gpu/gpu_data_manager_impl_private.cc      |   4 +-
 content/browser/gpu/gpu_process_host.cc       |   6 +-
 content/browser/hid/hid_service.cc            |   4 +
 .../installed_app_provider_impl.cc            |   6 +-
 .../interest_group/ad_auction_headers_util.cc |   2 +-
 .../ad_auction_result_metrics.cc              |   4 +-
 .../interest_group/ad_auction_service_impl.cc |   8 +-
 .../browser/interest_group/auction_runner.cc  |   4 +-
 .../interest_group/auction_worklet_manager.cc |   2 +-
 .../bidding_and_auction_response.cc           |   4 +
 .../bidding_and_auction_serializer.cc         |   4 +
 .../interest_group_manager_impl.cc            |   4 +
 .../interest_group_permissions_checker.cc     |   4 +
 .../interest_group_update_manager.cc          |   4 +
 .../interest_group/trusted_signals_fetcher.cc |   4 +
 content/browser/media/cdm_storage_common.cc   |   4 +
 content/browser/media/cdm_storage_database.cc |   6 +
 content/browser/media/cdm_storage_manager.cc  |   6 +
 .../browser/media/media_license_database.cc   |   6 +
 .../browser/media/media_license_manager.cc    |   4 +
 .../preloading/prefetch/prefetch_service.cc   |   4 +
 .../prefetch_url_loader_interceptor.cc        |   4 +
 .../prerender_commit_deferring_condition.cc   |   4 +
 ..._vary_search_commit_deferring_condition.cc |   4 +
 .../media/media_devices_manager.cc            |   6 +
 .../media/media_stream_manager.cc             |   6 +
 ...render_frame_audio_input_stream_factory.cc |   4 +
 .../pepper_internal_file_ref_backend.cc       |   4 +-
 .../private_network_access_util.cc            |  18 +-
 .../renderer_host/render_frame_host_impl.cc   |  36 ++--
 .../render_frame_host_manager.cc              |  52 +++---
 .../renderer_host/render_frame_proxy_host.cc  |   6 +-
 .../renderer_host/render_message_filter.cc    |   2 +-
 .../renderer_host/render_process_host_impl.cc |   2 +-
 .../render_widget_host_view_aura.cc           |   2 +-
 .../cross_origin_opener_policy_reporter.cc    |   4 +
 content/child/BUILD.gn                        |   5 +-
 content/common/BUILD.gn                       |   6 +-
 content/gpu/BUILD.gn                          |   5 +-
 content/public/browser/BUILD.gn               |   3 +-
 content/public/child/BUILD.gn                 |   3 +-
 content/public/common/BUILD.gn                |   3 +-
 content/public/renderer/BUILD.gn              |   5 +-
 content/renderer/BUILD.gn                     |   5 +-
 .../service_worker_subresource_loader.cc      |   4 +
 .../web_service_worker_provider_impl.cc       |   4 +
 content/services/auction_worklet/BUILD.gn     |   7 +-
 content/test/BUILD.gn                         |   5 +-
 content/utility/BUILD.gn                      |   3 +-
 62 files changed, 374 insertions(+), 180 deletions(-)

diff --git a/content/browser/BUILD.gn b/content/browser/BUILD.gn
index 53baef7c2f..af9a951bd1 100644
--- a/content/browser/BUILD.gn
+++ b/content/browser/BUILD.gn
@@ -8,6 +8,7 @@ import("//build/config/chromeos/ui_mode.gni")
 import("//build/config/chromeos/ui_mode.gni")
 import("//build/config/compiler/pgo/pgo.gni")
 import("//build/config/features.gni")
+import("//build/config/jumbo.gni")
 import("//build/config/linux/pangocairo/pangocairo.gni")
 import("//build/config/ozone.gni")
 import("//build/config/ui.gni")
@@ -51,7 +52,104 @@ if (is_android) {
   }
 }
 
-source_set("browser") {
+jumbo_static_library("devtools_protocol") {
+  configs += [
+    "//build/config:precompiled_headers",
+    "//content:content_implementation",
+  ]
+
+  deps = [
+    "//base",
+    "//content/browser/devtools:devtools_background_services_proto",
+    "//content/browser/devtools:protocol_sources",
+    "//content/common:buildflags",
+    "//services/viz/privileged/mojom",
+    "//third_party/blink/public/mojom:mojom_platform",
+    "//third_party/inspector_protocol:crdtp",
+  ]
+
+  sources = [
+    "$target_gen_dir/devtools/protocol/audits.cc",
+    "$target_gen_dir/devtools/protocol/audits.h",
+    "$target_gen_dir/devtools/protocol/background_service.cc",
+    "$target_gen_dir/devtools/protocol/background_service.h",
+    "$target_gen_dir/devtools/protocol/browser.cc",
+    "$target_gen_dir/devtools/protocol/browser.h",
+    "$target_gen_dir/devtools/protocol/device_access.cc",
+    "$target_gen_dir/devtools/protocol/device_access.h",
+    "$target_gen_dir/devtools/protocol/device_orientation.cc",
+    "$target_gen_dir/devtools/protocol/device_orientation.h",
+    "$target_gen_dir/devtools/protocol/dom.cc",
+    "$target_gen_dir/devtools/protocol/dom.h",
+    "$target_gen_dir/devtools/protocol/emulation.cc",
+    "$target_gen_dir/devtools/protocol/emulation.h",
+    "$target_gen_dir/devtools/protocol/fed_cm.cc",
+    "$target_gen_dir/devtools/protocol/fed_cm.h",
+    "$target_gen_dir/devtools/protocol/fetch.cc",
+    "$target_gen_dir/devtools/protocol/fetch.h",
+    "$target_gen_dir/devtools/protocol/forward.h",
+    "$target_gen_dir/devtools/protocol/input.cc",
+    "$target_gen_dir/devtools/protocol/input.h",
+    "$target_gen_dir/devtools/protocol/inspector.cc",
+    "$target_gen_dir/devtools/protocol/inspector.h",
+    "$target_gen_dir/devtools/protocol/io.cc",
+    "$target_gen_dir/devtools/protocol/io.h",
+    "$target_gen_dir/devtools/protocol/log.cc",
+    "$target_gen_dir/devtools/protocol/log.h",
+    "$target_gen_dir/devtools/protocol/memory.cc",
+    "$target_gen_dir/devtools/protocol/memory.h",
+    "$target_gen_dir/devtools/protocol/network.cc",
+    "$target_gen_dir/devtools/protocol/network.h",
+    "$target_gen_dir/devtools/protocol/overlay.cc",
+    "$target_gen_dir/devtools/protocol/overlay.h",
+    "$target_gen_dir/devtools/protocol/page.cc",
+    "$target_gen_dir/devtools/protocol/page.h",
+    "$target_gen_dir/devtools/protocol/preload.cc",
+    "$target_gen_dir/devtools/protocol/preload.h",
+    "$target_gen_dir/devtools/protocol/protocol.h",
+    "$target_gen_dir/devtools/protocol/runtime.cc",
+    "$target_gen_dir/devtools/protocol/runtime.h",
+    "$target_gen_dir/devtools/protocol/schema.cc",
+    "$target_gen_dir/devtools/protocol/schema.h",
+    "$target_gen_dir/devtools/protocol/security.cc",
+    "$target_gen_dir/devtools/protocol/security.h",
+    "$target_gen_dir/devtools/protocol/service_worker.cc",
+    "$target_gen_dir/devtools/protocol/service_worker.h",
+    "$target_gen_dir/devtools/protocol/storage.cc",
+    "$target_gen_dir/devtools/protocol/storage.h",
+    "$target_gen_dir/devtools/protocol/system_info.cc",
+    "$target_gen_dir/devtools/protocol/system_info.h",
+    "$target_gen_dir/devtools/protocol/target.cc",
+    "$target_gen_dir/devtools/protocol/target.h",
+    "$target_gen_dir/devtools/protocol/tethering.cc",
+    "$target_gen_dir/devtools/protocol/tethering.h",
+    "$target_gen_dir/devtools/protocol/tracing.cc",
+    "$target_gen_dir/devtools/protocol/tracing.h",
+  ]
+  if (!is_android) {
+    # The WebAuthn devtools protocol API is not supported in Android yet.
+    sources += [
+      "$target_gen_dir/devtools/protocol/web_authn.cc",
+      "$target_gen_dir/devtools/protocol/web_authn.h",
+    ]
+  }
+
+  if (use_viz_debugger) {
+    sources += [
+      "$target_gen_dir/devtools/protocol/visual_debugger.cc",
+      "$target_gen_dir/devtools/protocol/visual_debugger.h",
+    ]
+  }
+
+  if (use_clang_profiling_inside_sandbox && chrome_pgo_phase == 1) {
+    sources += [
+      "$target_gen_dir/devtools/protocol/native_profiling.cc",
+      "$target_gen_dir/devtools/protocol/native_profiling.h",
+    ]
+  }
+}
+
+jumbo_source_set("browser") {
   # Only the public target should depend on this. All other targets (even
   # internal content ones) should depend on the public one.
   visibility = [
@@ -150,8 +248,6 @@ source_set("browser") {
     "//content/browser/cache_storage:cache_storage_proto",
     "//content/browser/content_index:content_index_proto",
     "//content/browser/cookie_store:cookie_store_proto",
-    "//content/browser/devtools:devtools_background_services_proto",
-    "//content/browser/devtools:protocol_sources",
     "//content/browser/download:proto",
     "//content/browser/file_system_access:proto",
     "//content/browser/indexed_db:internals_mojo_bindings",
@@ -326,6 +422,7 @@ source_set("browser") {
     "//ui/touch_selection",
     "//v8:v8_version",
     "//electron/build/config:generate_mas_config",
+    ":devtools_protocol",
   ]
 
   public_deps = [
@@ -343,62 +440,6 @@ source_set("browser") {
   ]
 
   sources = [
-    "$target_gen_dir/devtools/protocol/audits.cc",
-    "$target_gen_dir/devtools/protocol/audits.h",
-    "$target_gen_dir/devtools/protocol/background_service.cc",
-    "$target_gen_dir/devtools/protocol/background_service.h",
-    "$target_gen_dir/devtools/protocol/browser.cc",
-    "$target_gen_dir/devtools/protocol/browser.h",
-    "$target_gen_dir/devtools/protocol/device_access.cc",
-    "$target_gen_dir/devtools/protocol/device_access.h",
-    "$target_gen_dir/devtools/protocol/device_orientation.cc",
-    "$target_gen_dir/devtools/protocol/device_orientation.h",
-    "$target_gen_dir/devtools/protocol/dom.cc",
-    "$target_gen_dir/devtools/protocol/dom.h",
-    "$target_gen_dir/devtools/protocol/emulation.cc",
-    "$target_gen_dir/devtools/protocol/emulation.h",
-    "$target_gen_dir/devtools/protocol/fed_cm.cc",
-    "$target_gen_dir/devtools/protocol/fed_cm.h",
-    "$target_gen_dir/devtools/protocol/fetch.cc",
-    "$target_gen_dir/devtools/protocol/fetch.h",
-    "$target_gen_dir/devtools/protocol/forward.h",
-    "$target_gen_dir/devtools/protocol/input.cc",
-    "$target_gen_dir/devtools/protocol/input.h",
-    "$target_gen_dir/devtools/protocol/inspector.cc",
-    "$target_gen_dir/devtools/protocol/inspector.h",
-    "$target_gen_dir/devtools/protocol/io.cc",
-    "$target_gen_dir/devtools/protocol/io.h",
-    "$target_gen_dir/devtools/protocol/log.cc",
-    "$target_gen_dir/devtools/protocol/log.h",
-    "$target_gen_dir/devtools/protocol/memory.cc",
-    "$target_gen_dir/devtools/protocol/memory.h",
-    "$target_gen_dir/devtools/protocol/network.cc",
-    "$target_gen_dir/devtools/protocol/network.h",
-    "$target_gen_dir/devtools/protocol/overlay.cc",
-    "$target_gen_dir/devtools/protocol/overlay.h",
-    "$target_gen_dir/devtools/protocol/page.cc",
-    "$target_gen_dir/devtools/protocol/page.h",
-    "$target_gen_dir/devtools/protocol/preload.cc",
-    "$target_gen_dir/devtools/protocol/preload.h",
-    "$target_gen_dir/devtools/protocol/protocol.h",
-    "$target_gen_dir/devtools/protocol/runtime.cc",
-    "$target_gen_dir/devtools/protocol/runtime.h",
-    "$target_gen_dir/devtools/protocol/schema.cc",
-    "$target_gen_dir/devtools/protocol/schema.h",
-    "$target_gen_dir/devtools/protocol/security.cc",
-    "$target_gen_dir/devtools/protocol/security.h",
-    "$target_gen_dir/devtools/protocol/service_worker.cc",
-    "$target_gen_dir/devtools/protocol/service_worker.h",
-    "$target_gen_dir/devtools/protocol/storage.cc",
-    "$target_gen_dir/devtools/protocol/storage.h",
-    "$target_gen_dir/devtools/protocol/system_info.cc",
-    "$target_gen_dir/devtools/protocol/system_info.h",
-    "$target_gen_dir/devtools/protocol/target.cc",
-    "$target_gen_dir/devtools/protocol/target.h",
-    "$target_gen_dir/devtools/protocol/tethering.cc",
-    "$target_gen_dir/devtools/protocol/tethering.h",
-    "$target_gen_dir/devtools/protocol/tracing.cc",
-    "$target_gen_dir/devtools/protocol/tracing.h",
     "about_url_loader_factory.cc",
     "about_url_loader_factory.h",
     "accessibility/accessibility_tree_formatter_blink.cc",
@@ -2386,6 +2427,7 @@ source_set("browser") {
     "worker_host/worker_script_loader_factory.cc",
     "worker_host/worker_script_loader_factory.h",
   ]
+  jumbo_excluded_sources = []
 
   if (is_android) {
     sources += [
@@ -2438,8 +2480,6 @@ source_set("browser") {
 
   if (use_viz_debugger) {
     sources += [
-      "$target_gen_dir/devtools/protocol/visual_debugger.cc",
-      "$target_gen_dir/devtools/protocol/visual_debugger.h",
       "devtools/protocol/visual_debugger_handler.cc",
       "devtools/protocol/visual_debugger_handler.h",
     ]
@@ -2800,6 +2840,9 @@ source_set("browser") {
       ]
       public_deps += [ "//ui/base/cursor" ]
       deps += [ "//third_party/webrtc_overrides:webrtc_component" ]
+      jumbo_excluded_sources += [
+        "media/capture/desktop_capture_device.cc",
+      ]
     }
     if (use_aura) {
       sources += [
@@ -3275,6 +3318,12 @@ source_set("browser") {
       "web_contents/web_contents_view_android.h",
     ]
 
+    jumbo_excluded_sources += [
+      # Files with kJavaLangClass and similar constants:
+      # Bug https://crbug.com/787557.
+      "android/java/java_method.cc",  # and in gin_java_bound_object.cc.
+    ]
+
     deps += [
       ":fontations_name_table_ffi",
       ":reflection_jni_headers",
@@ -3306,9 +3355,6 @@ source_set("browser") {
   } else {
     # Not Android.
     sources += [
-      # The WebAuthn devtools protocol API is not supported in Android yet.
-      "$target_gen_dir/devtools/protocol/web_authn.cc",
-      "$target_gen_dir/devtools/protocol/web_authn.h",
       "devtools/protocol/webauthn_handler.cc",
       "devtools/protocol/webauthn_handler.h",
       "media/session/audio_focus_delegate_default.cc",
@@ -3548,8 +3594,6 @@ source_set("browser") {
 
   if (use_clang_profiling_inside_sandbox && chrome_pgo_phase == 1) {
     sources += [
-      "$target_gen_dir/devtools/protocol/native_profiling.cc",
-      "$target_gen_dir/devtools/protocol/native_profiling.h",
       "devtools/protocol/native_profiling_handler.cc",
       "devtools/protocol/native_profiling_handler.h",
       "profiling_utils.cc",
diff --git a/content/browser/aggregation_service/aggregation_service_storage_sql.cc b/content/browser/aggregation_service/aggregation_service_storage_sql.cc
index b361ac9164..44dc7136f2 100644
--- a/content/browser/aggregation_service/aggregation_service_storage_sql.cc
+++ b/content/browser/aggregation_service/aggregation_service_storage_sql.cc
@@ -45,6 +45,8 @@
 #include "url/gurl.h"
 #include "url/origin.h"
 
+#define kDatabasePath kDatabasePath_AggregationServiceStorageSql
+
 namespace content {
 
 // Version number of the database.
@@ -1093,3 +1095,5 @@ void AggregationServiceStorageSql::DatabaseErrorCallback(int extended_error,
 }
 
 }  // namespace content
+
+#undef kDatabasePath
diff --git a/content/browser/attribution_reporting/aggregatable_debug_report.cc b/content/browser/attribution_reporting/aggregatable_debug_report.cc
index d2c89d8e2d..3b84afec1e 100644
--- a/content/browser/attribution_reporting/aggregatable_debug_report.cc
+++ b/content/browser/attribution_reporting/aggregatable_debug_report.cc
@@ -193,7 +193,7 @@ GetAggregatableContributions(
   return contributions;
 }
 
-bool IsAggregatableFilteringIdsEnabled() {
+bool IsAggregatableFilteringIdsEnabled2() {
   return base::FeatureList::IsEnabled(
              attribution_reporting::features::
                  kAttributionReportingAggregatableFilteringIds) &&
@@ -366,7 +366,7 @@ AggregatableDebugReport::CreateAggregatableReportRequest() const {
   CHECK(report_id_.is_valid());
 
   std::optional<size_t> filtering_id_max_bytes;
-  if (IsAggregatableFilteringIdsEnabled()) {
+  if (IsAggregatableFilteringIdsEnabled2()) {
     filtering_id_max_bytes =
         attribution_reporting::AggregatableFilteringIdsMaxBytes().value();
   }
diff --git a/content/browser/attribution_reporting/attribution_storage_sql.cc b/content/browser/attribution_reporting/attribution_storage_sql.cc
index e8eed2ab0b..fae620c9ba 100644
--- a/content/browser/attribution_reporting/attribution_storage_sql.cc
+++ b/content/browser/attribution_reporting/attribution_storage_sql.cc
@@ -98,6 +98,9 @@
 #include "third_party/blink/public/mojom/aggregation_service/aggregatable_report.mojom.h"
 #include "url/origin.h"
 
+#define kDatabasePath  kDatabasePath_AttributionStorageSQL
+#define kUnsetRecordId kUnsetRecordId_AttributionStorageSQL
+
 namespace content {
 
 namespace {
@@ -3095,3 +3098,6 @@ int64_t AttributionStorageSql::CountUniqueReportingOriginsPerSiteForAttribution(
 }
 
 }  // namespace content
+
+#undef kDatabasePath
+#undef kUnsetRecordId
diff --git a/content/browser/devtools/BUILD.gn b/content/browser/devtools/BUILD.gn
index fad8c1c626..591985c632 100644
--- a/content/browser/devtools/BUILD.gn
+++ b/content/browser/devtools/BUILD.gn
@@ -83,7 +83,7 @@ action("concatenate_protocols") {
 }
 
 inspector_protocol_generate("protocol_sources") {
-  visibility = [ "//content/browser" ]
+  visibility = [ "//content/browser:*" ]
   deps = [ ":concatenate_protocols" ]
   inspector_protocol_dir = "//third_party/inspector_protocol"
   out_dir = target_gen_dir
diff --git a/content/browser/devtools/protocol/fedcm_handler.cc b/content/browser/devtools/protocol/fedcm_handler.cc
index 394b8ee89f..9e8f1fb21f 100644
--- a/content/browser/devtools/protocol/fedcm_handler.cc
+++ b/content/browser/devtools/protocol/fedcm_handler.cc
@@ -343,7 +343,7 @@ FederatedAuthRequestPageData* FedCmHandler::GetPageData() {
   if (!frame_host_) {
     return nullptr;
   }
-  Page& page = frame_host_->GetPage();
+  content::Page& page = frame_host_->GetPage();
   return PageUserData<FederatedAuthRequestPageData>::GetOrCreateForPage(page);
 }
 
diff --git a/content/browser/devtools/protocol/page_handler.cc b/content/browser/devtools/protocol/page_handler.cc
index 42c1bf5ff5..95a0ac6d85 100644
--- a/content/browser/devtools/protocol/page_handler.cc
+++ b/content/browser/devtools/protocol/page_handler.cc
@@ -95,7 +95,7 @@ namespace {
 constexpr const char* kMhtml = "mhtml";
 constexpr int kDefaultScreenshotQuality = 80;
 constexpr int kMaxScreencastFramesInFlight = 2;
-constexpr char kCommandIsOnlyAvailableAtTopTarget[] =
+constexpr char kCommandIsOnlyAvailableAtTopTarget2[] =
     "Command can only be executed on top-level targets";
 constexpr char kErrorNotAttached[] = "Not attached to a page";
 constexpr char kErrorInactivePage[] = "Not attached to an active page";
@@ -2251,7 +2251,7 @@ Response PageHandler::AssureTopLevelActiveFrame() {
     return Response::ServerError(kErrorNotAttached);
 
   if (host_->GetParentOrOuterDocument())
-    return Response::ServerError(kCommandIsOnlyAvailableAtTopTarget);
+    return Response::ServerError(kCommandIsOnlyAvailableAtTopTarget2);
 
   if (!host_->IsActive())
     return Response::ServerError(kErrorInactivePage);
diff --git a/content/browser/devtools/render_frame_devtools_agent_host.cc b/content/browser/devtools/render_frame_devtools_agent_host.cc
index 1756266017..a1510f9f0e 100644
--- a/content/browser/devtools/render_frame_devtools_agent_host.cc
+++ b/content/browser/devtools/render_frame_devtools_agent_host.cc
@@ -88,6 +88,8 @@
 #include "content/browser/devtools/protocol/visual_debugger_handler.h"
 #endif
 
+#define g_agent_host_instances g_agent_host_instances_render_frame_devtools_agent_host
+
 namespace content {
 
 namespace {
@@ -1074,3 +1076,5 @@ bool RenderFrameDevToolsAgentHost::HasSessionsWithoutTabTargetSupport() const {
 }
 
 }  // namespace content
+
+#undef g_agent_host_instances
diff --git a/content/browser/devtools/web_contents_devtools_agent_host.cc b/content/browser/devtools/web_contents_devtools_agent_host.cc
index b56dae5768..ffcb95b81e 100644
--- a/content/browser/devtools/web_contents_devtools_agent_host.cc
+++ b/content/browser/devtools/web_contents_devtools_agent_host.cc
@@ -14,6 +14,8 @@
 #include "content/browser/renderer_host/frame_tree_node.h"
 #include "content/browser/web_contents/web_contents_impl.h"
 
+#define g_agent_host_instances g_agent_host_instances_web_contents_devtools_agent_host
+
 namespace content {
 
 namespace {
@@ -411,3 +413,5 @@ WebContentsDevToolsAgentHost::RevalidateSessionAccess() {
 }
 
 }  // namespace content
+
+#undef g_agent_host_instances
diff --git a/content/browser/direct_sockets/direct_sockets_service_impl.cc b/content/browser/direct_sockets/direct_sockets_service_impl.cc
index 0a8353b8a7..9174cc8d15 100644
--- a/content/browser/direct_sockets/direct_sockets_service_impl.cc
+++ b/content/browser/direct_sockets/direct_sockets_service_impl.cc
@@ -49,6 +49,8 @@
 #include "services/network/public/mojom/socket_connection_tracker.mojom.h"
 #endif  // BUILDFLAG(IS_CHROMEOS)
 
+#define DocumentHelper DocumentHelper_DirectSocketsServiceImpl
+
 namespace content {
 
 namespace {
@@ -635,3 +637,5 @@ void DirectSocketsServiceImpl::CreateRestrictedUDPSocketImpl(
 }
 
 }  // namespace content
+
+#undef DocumentHelper
diff --git a/content/browser/file_system_access/file_system_access_change_source.cc b/content/browser/file_system_access/file_system_access_change_source.cc
index 2223c61896..9fc09e51fb 100644
--- a/content/browser/file_system_access/file_system_access_change_source.cc
+++ b/content/browser/file_system_access/file_system_access_change_source.cc
@@ -6,6 +6,8 @@
 
 #include "base/functional/callback.h"
 
+#define ToFileSystemURL ToFileSystemURL_FileSystemAccessChangeSource
+
 namespace content {
 
 namespace {
@@ -128,3 +130,5 @@ void FileSystemAccessChangeSource::NotifyOfUsageChange(size_t old_usage,
 }
 
 }  // namespace content
+
+#undef ToFileSystemURL
diff --git a/content/browser/file_system_access/file_system_access_watcher_manager.cc b/content/browser/file_system_access/file_system_access_watcher_manager.cc
index deeab2dfea..55700f65f5 100644
--- a/content/browser/file_system_access/file_system_access_watcher_manager.cc
+++ b/content/browser/file_system_access/file_system_access_watcher_manager.cc
@@ -37,6 +37,8 @@
 #endif  // !BUILDFLAG(IS_ANDROID) && !BUILDFLAG(IS_IOS) &&
         // !BUILDFLAG(IS_FUCHSIA)
 
+#define ToFileSystemURL ToFileSystemURL_FileSystemAccessWatcherManager
+
 namespace content {
 
 using WatchType = FileSystemAccessWatchScope::WatchType;
@@ -493,3 +495,5 @@ FileSystemAccessWatcherManager::CreateOwnedSourceForScope(
 }
 
 }  // namespace content
+
+#undef ToFileSystemURL
diff --git a/content/browser/gpu/compositor_util.cc b/content/browser/gpu/compositor_util.cc
index 5fab709eb1..04f3078d41 100644
--- a/content/browser/gpu/compositor_util.cc
+++ b/content/browser/gpu/compositor_util.cc
@@ -116,7 +116,7 @@ std::vector<GpuFeatureData> GetGpuFeatureData(
       "2d_canvas",
       SafeGetFeatureStatus(
           gpu_feature_info, gpu::GPU_FEATURE_TYPE_ACCELERATED_2D_CANVAS,
-          command_line.HasSwitch(switches::kDisableAccelerated2dCanvas)),
+          command_line.HasSwitch(::switches::kDisableAccelerated2dCanvas)),
       DisableInfo::Problem(
           "Accelerated 2D canvas is unavailable: either disabled "
           "via blocklist or the command line."),
@@ -125,7 +125,7 @@ std::vector<GpuFeatureData> GetGpuFeatureData(
       "canvas_oop_rasterization",
       SafeGetFeatureStatus(
           gpu_feature_info, gpu::GPU_FEATURE_TYPE_CANVAS_OOP_RASTERIZATION,
-          command_line.HasSwitch(switches::kDisableAccelerated2dCanvas)));
+          command_line.HasSwitch(::switches::kDisableAccelerated2dCanvas)));
   features.emplace_back(
       "gpu_compositing",
       // TODO(rivr): Replace with a check to see which backend is used for
@@ -145,7 +145,7 @@ std::vector<GpuFeatureData> GetGpuFeatureData(
       "webgl",
       SafeGetFeatureStatus(gpu_feature_info,
                            gpu::GPU_FEATURE_TYPE_ACCELERATED_WEBGL,
-                           command_line.HasSwitch(switches::kDisableWebGL)),
+                           command_line.HasSwitch(::switches::kDisableWebGL)),
       DisableInfo::Problem(
           "WebGL has been disabled via blocklist or the command line."),
       false);
@@ -156,7 +156,7 @@ std::vector<GpuFeatureData> GetGpuFeatureData(
 #if BUILDFLAG(IS_LINUX)
           !base::FeatureList::IsEnabled(media::kAcceleratedVideoDecodeLinux) ||
 #endif  // BUILDFLAG(IS_LINUX)
-              command_line.HasSwitch(switches::kDisableAcceleratedVideoDecode)),
+              command_line.HasSwitch(::switches::kDisableAcceleratedVideoDecode)),
       DisableInfo::Problem(
           "Accelerated video decode has been disabled, either via blocklist, "
           "about:flags or the command line."),
@@ -168,7 +168,7 @@ std::vector<GpuFeatureData> GetGpuFeatureData(
 #if BUILDFLAG(IS_LINUX)
           !base::FeatureList::IsEnabled(media::kAcceleratedVideoEncodeLinux)),
 #else
-          command_line.HasSwitch(switches::kDisableAcceleratedVideoEncode)),
+          command_line.HasSwitch(::switches::kDisableAcceleratedVideoEncode)),
 #endif  // BUILDFLAG(IS_LINUX)
       DisableInfo::Problem(
           "Accelerated video encode has been disabled, either via blocklist, "
@@ -203,8 +203,8 @@ std::vector<GpuFeatureData> GetGpuFeatureData(
       "webgl2",
       SafeGetFeatureStatus(
           gpu_feature_info, gpu::GPU_FEATURE_TYPE_ACCELERATED_WEBGL2,
-          command_line.HasSwitch(switches::kDisableWebGL) ||
-              command_line.HasSwitch(switches::kDisableWebGL2)),
+          command_line.HasSwitch(::switches::kDisableWebGL) ||
+              command_line.HasSwitch(::switches::kDisableWebGL2)),
       DisableInfo::Problem(
           "WebGL2 has been disabled via blocklist or the command line."),
       false);
@@ -216,7 +216,7 @@ std::vector<GpuFeatureData> GetGpuFeatureData(
       "webgpu",
       SafeGetFeatureStatus(
           gpu_feature_info, gpu::GPU_FEATURE_TYPE_ACCELERATED_WEBGPU,
-          !command_line.HasSwitch(switches::kEnableUnsafeWebGPU) &&
+          !command_line.HasSwitch(::switches::kEnableUnsafeWebGPU) &&
               !base::FeatureList::IsEnabled(::features::kWebGPUService)),
       DisableInfo::Problem(
           "WebGPU has been disabled via blocklist or the command line."),
@@ -284,13 +284,13 @@ base::Value GetFeatureStatusImpl(GpuFeatureInfoType type) {
       if (gpu_feature_data.name == "rasterization") {
         const base::CommandLine& command_line =
             *base::CommandLine::ForCurrentProcess();
-        if (command_line.HasSwitch(switches::kEnableGpuRasterization))
+        if (command_line.HasSwitch(::switches::kEnableGpuRasterization))
           status += "_force";
       }
       if (gpu_feature_data.name == "multiple_raster_threads") {
         const base::CommandLine& command_line =
             *base::CommandLine::ForCurrentProcess();
-        if (command_line.HasSwitch(switches::kNumRasterThreads)) {
+        if (command_line.HasSwitch(::switches::kNumRasterThreads)) {
           status += "_force";
         }
         status += "_on";
@@ -429,11 +429,11 @@ int NumberOfRendererRasterThreads() {
   const base::CommandLine& command_line =
       *base::CommandLine::ForCurrentProcess();
 
-  if (command_line.HasSwitch(switches::kNumRasterThreads)) {
+  if (command_line.HasSwitch(::switches::kNumRasterThreads)) {
     std::string string_value =
-        command_line.GetSwitchValueASCII(switches::kNumRasterThreads);
+        command_line.GetSwitchValueASCII(::switches::kNumRasterThreads);
     if (!base::StringToInt(string_value, &num_raster_threads)) {
-      DLOG(WARNING) << "Failed to parse switch " << switches::kNumRasterThreads
+      DLOG(WARNING) << "Failed to parse switch " << ::switches::kNumRasterThreads
                     << ": " << string_value;
     }
   }
@@ -473,7 +473,7 @@ bool IsGpuMemoryBufferCompositorResourcesEnabled() {
     return true;
   }
   if (command_line.HasSwitch(
-          switches::kDisableGpuMemoryBufferCompositorResources)) {
+          ::switches::kDisableGpuMemoryBufferCompositorResources)) {
     return false;
   }
 
@@ -521,7 +521,7 @@ bool IsMainFrameBeforeActivationEnabled() {
     return false;
 
   if (base::CommandLine::ForCurrentProcess()->HasSwitch(
-          switches::kDisableMainFrameBeforeActivation)) {
+          ::switches::kDisableMainFrameBeforeActivation)) {
     return false;
   }
 
diff --git a/content/browser/gpu/gpu_data_manager_impl_private.cc b/content/browser/gpu/gpu_data_manager_impl_private.cc
index 071d4a394a..fb5d80a1be 100644
--- a/content/browser/gpu/gpu_data_manager_impl_private.cc
+++ b/content/browser/gpu/gpu_data_manager_impl_private.cc
@@ -533,7 +533,7 @@ void GpuDataManagerImplPrivate::InitializeGpuModes() {
     BUILDFLAG(IS_CHROMEOS_ASH)
     CHECK(false) << "GPU acceleration is required on certain platforms!";
 #endif
-  } else if (features::IsSkiaGraphiteEnabled(command_line)) {
+  } else if (::features::IsSkiaGraphiteEnabled(command_line)) {
     // If Graphite is enabled, fall back to Ganesh/GL on platforms that do not
     // support software compositing or sometimes fail dawn initialization.
     // TODO(b/323953910): Eliminate this fallback on each platform once Graphite
@@ -549,7 +549,7 @@ void GpuDataManagerImplPrivate::InitializeGpuModes() {
 #else
     fallback_modes_.push_back(gpu::GpuMode::HARDWARE_GL);
     // Prefer Vulkan over GL if enabled.
-    if (features::IsUsingVulkan()) {
+    if (::features::IsUsingVulkan()) {
       fallback_modes_.push_back(gpu::GpuMode::HARDWARE_VULKAN);
     }
 #endif  // BUILDFLAG(IS_FUCHSIA)
diff --git a/content/browser/gpu/gpu_process_host.cc b/content/browser/gpu/gpu_process_host.cc
index 513b55e316..1e8d8b68fd 100644
--- a/content/browser/gpu/gpu_process_host.cc
+++ b/content/browser/gpu/gpu_process_host.cc
@@ -743,7 +743,7 @@ GpuProcessHost::GpuProcessHost(int host_id, GpuProcessKind kind)
 #if !BUILDFLAG(IS_ANDROID)
   if (!in_process_ && kind != GPU_PROCESS_KIND_INFO_COLLECTION &&
       base::FeatureList::IsEnabled(
-          features::kForwardMemoryPressureEventsToGpuProcess)) {
+          ::features::kForwardMemoryPressureEventsToGpuProcess)) {
     memory_pressure_listener_ = std::make_unique<base::MemoryPressureListener>(
         FROM_HERE, base::BindRepeating(&GpuProcessHost::OnMemoryPressure,
                                        base::Unretained(this)));
@@ -962,7 +962,7 @@ void GpuProcessHost::OnProcessLaunched() {
     gpu_host_->SetProcessId(process_id_);
 
 #if BUILDFLAG(IS_MAC)
-    if (base::FeatureList::IsEnabled(features::kAdjustGpuProcessPriority)) {
+    if (base::FeatureList::IsEnabled(::features::kAdjustGpuProcessPriority)) {
       browser_child_process_backgrounded_bridge_ =
           std::make_unique<BrowserChildProcessBackgroundedBridge>(
               process_.get());
@@ -1277,7 +1277,7 @@ bool GpuProcessHost::LaunchGpuProcess() {
 #if BUILDFLAG(IS_WIN)
   if (kind_ == GPU_PROCESS_KIND_INFO_COLLECTION &&
       base::FeatureList::IsEnabled(
-          features::kGpuInfoCollectionSeparatePrefetch)) {
+          ::features::kGpuInfoCollectionSeparatePrefetch)) {
     cmd_line->AppendArgNative(app_launch_prefetch::GetPrefetchSwitch(
         app_launch_prefetch::SubprocessType::kGPUInfo));
   } else {
diff --git a/content/browser/hid/hid_service.cc b/content/browser/hid/hid_service.cc
index d7bdc419e1..0b83ee3287 100644
--- a/content/browser/hid/hid_service.cc
+++ b/content/browser/hid/hid_service.cc
@@ -25,6 +25,8 @@
 #include "mojo/public/cpp/bindings/self_owned_receiver.h"
 #include "third_party/blink/public/mojom/permissions_policy/permissions_policy.mojom.h"
 
+#define DocumentHelper DocumentHelper_HidService
+
 namespace content {
 
 // Deletes the HidService when the connected document is destroyed.
@@ -568,3 +570,5 @@ BrowserContext* HidService::GetBrowserContext() {
 }
 
 }  // namespace content
+
+#undef DocumentHelper
diff --git a/content/browser/installedapp/installed_app_provider_impl.cc b/content/browser/installedapp/installed_app_provider_impl.cc
index d678deb574..8f5847c96b 100644
--- a/content/browser/installedapp/installed_app_provider_impl.cc
+++ b/content/browser/installedapp/installed_app_provider_impl.cc
@@ -59,7 +59,7 @@ void InstalledAppProviderImpl::FilterInstalledApps(
     const GURL& manifest_url,
     FilterInstalledAppsCallback callback) {
   DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
-  if (!base::FeatureList::IsEnabled(features::kInstalledAppProvider)) {
+  if (!base::FeatureList::IsEnabled(::features::kInstalledAppProvider)) {
     base::SequencedTaskRunner::GetCurrentDefault()->PostTask(
         FROM_HERE,
         base::BindOnce(std::move(callback),
@@ -70,7 +70,7 @@ void InstalledAppProviderImpl::FilterInstalledApps(
   base::ConcurrentCallbacks<FetchRelatedAppsTaskResult> concurrent;
 
 #if BUILDFLAG(IS_WIN)
-  if (base::FeatureList::IsEnabled(features::kFilterInstalledAppsWinMatching)) {
+  if (base::FeatureList::IsEnabled(::features::kFilterInstalledAppsWinMatching)) {
     StartTask(std::make_unique<FetchRelatedWinAppsTask>(
                   native_win_app_fetcher_factory_.Run()),
               related_apps, concurrent.CreateCallback());
@@ -79,7 +79,7 @@ void InstalledAppProviderImpl::FilterInstalledApps(
 
 #if !BUILDFLAG(IS_ANDROID)
   if (base::FeatureList::IsEnabled(
-          features::kFilterInstalledAppsWebAppMatching)) {
+          ::features::kFilterInstalledAppsWebAppMatching)) {
     StartTask(std::make_unique<FetchRelatedWebAppsTask>(
                   render_frame_host().GetBrowserContext()),
               related_apps, concurrent.CreateCallback());
diff --git a/content/browser/interest_group/ad_auction_headers_util.cc b/content/browser/interest_group/ad_auction_headers_util.cc
index d4cbcc7c31..ff0c60d1a6 100644
--- a/content/browser/interest_group/ad_auction_headers_util.cc
+++ b/content/browser/interest_group/ad_auction_headers_util.cc
@@ -140,7 +140,7 @@ bool IsAdAuctionHeadersEligible(
 bool IsAdAuctionHeadersEligibleForNavigation(
     const FrameTreeNode& frame,
     const url::Origin& navigation_request_origin) {
-  if (!base::FeatureList::IsEnabled(features::kEnableIFrameAdAuctionHeaders)) {
+  if (!base::FeatureList::IsEnabled(::features::kEnableIFrameAdAuctionHeaders)) {
     return false;
   }
 
diff --git a/content/browser/interest_group/ad_auction_result_metrics.cc b/content/browser/interest_group/ad_auction_result_metrics.cc
index 44c4114c36..5c2d479a4f 100644
--- a/content/browser/interest_group/ad_auction_result_metrics.cc
+++ b/content/browser/interest_group/ad_auction_result_metrics.cc
@@ -53,9 +53,9 @@ AdAuctionResultMetrics::~AdAuctionResultMetrics() {
 
 bool AdAuctionResultMetrics::ShouldRunAuction() {
   num_requested_auctions_++;
-  if (!base::FeatureList::IsEnabled(features::kFledgeLimitNumAuctions))
+  if (!base::FeatureList::IsEnabled(::features::kFledgeLimitNumAuctions))
     return true;
-  if (num_requested_auctions_ > features::kFledgeLimitNumAuctionsParam.Get()) {
+  if (num_requested_auctions_ > ::features::kFledgeLimitNumAuctionsParam.Get()) {
     num_auctions_not_run_due_to_auction_limit_++;
     return false;
   }
diff --git a/content/browser/interest_group/ad_auction_service_impl.cc b/content/browser/interest_group/ad_auction_service_impl.cc
index fa30b52be2..a230413140 100644
--- a/content/browser/interest_group/ad_auction_service_impl.cc
+++ b/content/browser/interest_group/ad_auction_service_impl.cc
@@ -433,7 +433,7 @@ void AdAuctionServiceImpl::RunAdAuction(
   // been invalidated or the current frame's `PageImpl` has changed to a
   // different one, abort the auction.
   // See crbug.com/1422301.
-  if (base::FeatureList::IsEnabled(features::kDetectInconsistentPageImpl) &&
+  if (base::FeatureList::IsEnabled(::features::kDetectInconsistentPageImpl) &&
       (!GetFrame()->auction_initiator_page() ||
        GetFrame()->auction_initiator_page().get() !=
            &(GetFrame()->GetPage()))) {
@@ -753,7 +753,7 @@ AdAuctionServiceImpl::GetClientSecurityState() {
 
 std::optional<std::string> AdAuctionServiceImpl::GetCookieDeprecationLabel() {
   if (!base::FeatureList::IsEnabled(
-          features::kFledgeFacilitatedTestingSignalsHeaders)) {
+          ::features::kFledgeFacilitatedTestingSignalsHeaders)) {
     return std::nullopt;
   }
 
@@ -929,7 +929,7 @@ void AdAuctionServiceImpl::OnAuctionComplete(
   // been invalidated or the current frame's `PageImpl` has changed to a
   // different one, abort the auction.
   // See crbug.com/1422301.
-  if (base::FeatureList::IsEnabled(features::kDetectInconsistentPageImpl) &&
+  if (base::FeatureList::IsEnabled(::features::kDetectInconsistentPageImpl) &&
       (!GetFrame()->auction_initiator_page() ||
        GetFrame()->auction_initiator_page().get() !=
            &(GetFrame()->GetPage()))) {
@@ -1275,7 +1275,7 @@ AdAuctionPageData* AdAuctionServiceImpl::GetAdAuctionPageData() {
   // been invalidated or the current frame's `PageImpl` has changed to a
   // different one, signal that state is no longer available.
   // See crbug.com/1422301.
-  if (base::FeatureList::IsEnabled(features::kDetectInconsistentPageImpl) &&
+  if (base::FeatureList::IsEnabled(::features::kDetectInconsistentPageImpl) &&
       (!GetFrame()->auction_initiator_page() ||
        GetFrame()->auction_initiator_page().get() !=
            &(GetFrame()->GetPage()))) {
diff --git a/content/browser/interest_group/auction_runner.cc b/content/browser/interest_group/auction_runner.cc
index 347d612205..d564522a55 100644
--- a/content/browser/interest_group/auction_runner.cc
+++ b/content/browser/interest_group/auction_runner.cc
@@ -44,7 +44,7 @@ namespace {
 auction_worklet::mojom::KAnonymityBidMode DetermineKAnonMode() {
   // K-anonymity enforcement is always disabled for the testing population.
   if (base::FeatureList::IsEnabled(
-          features::kCookieDeprecationFacilitatedTesting)) {
+          ::features::kCookieDeprecationFacilitatedTesting)) {
     return auction_worklet::mojom::KAnonymityBidMode::kNone;
   }
   if (base::FeatureList::IsEnabled(
@@ -714,7 +714,7 @@ void AuctionRunner::UpdateInterestGroupsPostAuction() {
   });
 
   if (base::FeatureList::IsEnabled(
-          features::kFledgeDelayPostAuctionInterestGroupUpdate)) {
+          ::features::kFledgeDelayPostAuctionInterestGroupUpdate)) {
     interest_group_manager_->UpdateInterestGroupsOfOwnersWithDelay(
         std::move(update_owners), client_security_state_.Clone(),
         std::move(user_agent_override_), std::move(attestation_callback_),
diff --git a/content/browser/interest_group/auction_worklet_manager.cc b/content/browser/interest_group/auction_worklet_manager.cc
index 291d06b2d1..4228f76b83 100644
--- a/content/browser/interest_group/auction_worklet_manager.cc
+++ b/content/browser/interest_group/auction_worklet_manager.cc
@@ -579,7 +579,7 @@ void AuctionWorkletManager::WorkletOwner::LoadWorkletIfReady(
 
       for (size_t i = 0;
            i < static_cast<size_t>(
-                   features::kFledgeSellerWorkletThreadPoolSize.Get());
+                   ::features::kFledgeSellerWorkletThreadPoolSize.Get());
            ++i) {
         worklet_debugs_.emplace_back(new DebuggableAuctionWorklet(
             delegate->GetFrame(), process_handle_, worklet_info_.script_url,
diff --git a/content/browser/interest_group/bidding_and_auction_response.cc b/content/browser/interest_group/bidding_and_auction_response.cc
index 0d6b05851d..c4a201f2ec 100644
--- a/content/browser/interest_group/bidding_and_auction_response.cc
+++ b/content/browser/interest_group/bidding_and_auction_response.cc
@@ -19,6 +19,8 @@
 #include "third_party/blink/public/common/features.h"
 #include "url/origin.h"
 
+#define kFramingHeaderSize kFramingHeaderSize_BiddingAndAuctionResponse
+
 namespace content {
 
 namespace {
@@ -899,3 +901,5 @@ BiddingAndAuctionResponse::ReportingURLs::TryParse(
 }
 
 }  // namespace content
+
+#undef kFramingHeaderSize
diff --git a/content/browser/interest_group/bidding_and_auction_serializer.cc b/content/browser/interest_group/bidding_and_auction_serializer.cc
index 1cb1342073..556e231111 100644
--- a/content/browser/interest_group/bidding_and_auction_serializer.cc
+++ b/content/browser/interest_group/bidding_and_auction_serializer.cc
@@ -35,6 +35,8 @@
 #include "third_party/blink/public/mojom/interest_group/interest_group_types.mojom.h"
 #include "third_party/zlib/google/compression_utils.h"
 
+#define kFramingHeaderSize kFramingHeaderSize_BiddingAndAuctionSerializer
+
 namespace content {
 
 namespace {
@@ -1081,3 +1083,5 @@ BiddingAndAuctionData BiddingAndAuctionSerializer::Build() {
 }
 
 }  // namespace content
+
+#undef kFramingHeaderSize
diff --git a/content/browser/interest_group/interest_group_manager_impl.cc b/content/browser/interest_group/interest_group_manager_impl.cc
index b969446d7b..2de40edd5d 100644
--- a/content/browser/interest_group/interest_group_manager_impl.cc
+++ b/content/browser/interest_group/interest_group_manager_impl.cc
@@ -54,6 +54,8 @@
 #include "url/gurl.h"
 #include "url/origin.h"
 
+#define kTrafficAnnotation kTrafficAnnotation_InterestGroupManagerImpl
+
 namespace content {
 
 namespace {
@@ -1156,3 +1158,5 @@ InterestGroupManagerImpl::CreateNotifyInterestGroupAccessedCallback(
 }
 
 }  // namespace content
+
+#undef kTrafficAnnotation
diff --git a/content/browser/interest_group/interest_group_permissions_checker.cc b/content/browser/interest_group/interest_group_permissions_checker.cc
index 7f240a09f9..83f5e81889 100644
--- a/content/browser/interest_group/interest_group_permissions_checker.cc
+++ b/content/browser/interest_group/interest_group_permissions_checker.cc
@@ -24,6 +24,8 @@
 #include "url/origin.h"
 #include "url/url_constants.h"
 
+#define kTrafficAnnotation kTrafficAnnotation_InterestGroupPermissionsChecker
+
 namespace content {
 
 namespace {
@@ -230,3 +232,5 @@ bool InterestGroupPermissionsChecker::AllowsOperation(Permissions permissions,
 }
 
 }  // namespace content
+
+#undef kTrafficAnnotation
diff --git a/content/browser/interest_group/interest_group_update_manager.cc b/content/browser/interest_group/interest_group_update_manager.cc
index 24d4b8d655..ac0bebdbcb 100644
--- a/content/browser/interest_group/interest_group_update_manager.cc
+++ b/content/browser/interest_group/interest_group_update_manager.cc
@@ -53,6 +53,8 @@
 #include "url/origin.h"
 #include "url/url_constants.h"
 
+#define kTrafficAnnotation kTrafficAnnotation_InterestGroupUpdateManager
+
 namespace content {
 
 namespace {
@@ -1304,3 +1306,5 @@ void InterestGroupUpdateManager::ReportUpdateFailed(
 }
 
 }  // namespace content
+
+#undef kTrafficAnnotation
diff --git a/content/browser/interest_group/trusted_signals_fetcher.cc b/content/browser/interest_group/trusted_signals_fetcher.cc
index d975b9ce0e..6cf4dc7cbd 100644
--- a/content/browser/interest_group/trusted_signals_fetcher.cc
+++ b/content/browser/interest_group/trusted_signals_fetcher.cc
@@ -44,6 +44,8 @@
 #include "url/gurl.h"
 #include "url/origin.h"
 
+#define kOhttpHeaderSize kOhttpHeaderSize_TrustedSignalsFetcher
+
 namespace content {
 
 namespace {
@@ -605,3 +607,5 @@ std::string TrustedSignalsFetcher::CreateError(
 }
 
 }  // namespace content
+
+#undef kOhttpHeaderSize
diff --git a/content/browser/media/cdm_storage_common.cc b/content/browser/media/cdm_storage_common.cc
index e9b9ec404e..241002a693 100644
--- a/content/browser/media/cdm_storage_common.cc
+++ b/content/browser/media/cdm_storage_common.cc
@@ -6,6 +6,8 @@
 
 #include "content/public/common/content_features.h"
 
+#define kUmaPrefix kUmaPrefix_CdmStorageCommon
+
 namespace content {
 
 namespace {
@@ -41,3 +43,5 @@ std::string GetCdmStorageManagerHistogramName(const std::string& operation,
 }
 
 }  // namespace content
+
+#undef kUmaPrefix
diff --git a/content/browser/media/cdm_storage_database.cc b/content/browser/media/cdm_storage_database.cc
index 95ca6c86e5..c837634c85 100644
--- a/content/browser/media/cdm_storage_database.cc
+++ b/content/browser/media/cdm_storage_database.cc
@@ -12,6 +12,9 @@
 #include "base/metrics/histogram_functions.h"
 #include "sql/statement.h"
 
+#define kUmaPrefix     kUmaPrefix_CdmStorageDatabase
+#define kVersionNumber kVersionNumber_CdmStorageDatabase
+
 namespace content {
 
 namespace {
@@ -688,3 +691,6 @@ void CdmStorageDatabase::OnDatabaseError(int error, sql::Statement* stmt) {
 }
 
 }  // namespace content
+
+#undef kUmaPrefix
+#undef kVersionNumber
diff --git a/content/browser/media/cdm_storage_manager.cc b/content/browser/media/cdm_storage_manager.cc
index 4718f783c8..0eb3dc074e 100644
--- a/content/browser/media/cdm_storage_manager.cc
+++ b/content/browser/media/cdm_storage_manager.cc
@@ -13,6 +13,9 @@
 #include "media/cdm/cdm_type.h"
 #include "media/mojo/mojom/cdm_storage.mojom.h"
 
+#define kUmaPrefix               kUmaPrefix_CdmStorageManager
+#define CreateDatabaseTaskRunner CreateDatabaseTaskRunner_CdmStorageManager
+
 namespace content {
 
 namespace {
@@ -313,3 +316,6 @@ void CdmStorageManager::ReportDatabaseOpenError(CdmStorageOpenError error) {
 }
 
 }  // namespace content
+
+#undef kUmaPrefix
+#undef CreateDatabaseTaskRunner
diff --git a/content/browser/media/media_license_database.cc b/content/browser/media/media_license_database.cc
index faf90f2eb7..ba213f1fc7 100644
--- a/content/browser/media/media_license_database.cc
+++ b/content/browser/media/media_license_database.cc
@@ -12,6 +12,9 @@
 #include "sql/sqlite_result_code_values.h"
 #include "sql/statement.h"
 
+#define kUmaPrefix     kUmaPrefix_MediaLicenseDatabase
+#define kVersionNumber kVersionNumber_MediaLicenseDatabase
+
 namespace content {
 
 using MediaLicenseStorageHostOpenError =
@@ -295,3 +298,6 @@ void MediaLicenseDatabase::OnDatabaseError(int error, sql::Statement* stmt) {
 }
 
 }  // namespace content
+
+#undef kUmaPrefix
+#undef kVersionNumber
diff --git a/content/browser/media/media_license_manager.cc b/content/browser/media/media_license_manager.cc
index 1d7a258715..6ad559c806 100644
--- a/content/browser/media/media_license_manager.cc
+++ b/content/browser/media/media_license_manager.cc
@@ -33,6 +33,8 @@
 #include "third_party/blink/public/mojom/quota/quota_types.mojom-shared.h"
 #include "url/origin.h"
 
+#define CreateDatabaseTaskRunner CreateDatabaseTaskRunner_MediaLicenseManager
+
 namespace content {
 
 using MediaLicenseStorageHostOpenError =
@@ -229,3 +231,5 @@ void MediaLicenseManager::OnHostReceiverDisconnect(
 }
 
 }  // namespace content
+
+#undef CreateDatabaseTaskRunner
diff --git a/content/browser/preloading/prefetch/prefetch_service.cc b/content/browser/preloading/prefetch/prefetch_service.cc
index 64abc64b59..824526a137 100644
--- a/content/browser/preloading/prefetch/prefetch_service.cc
+++ b/content/browser/preloading/prefetch/prefetch_service.cc
@@ -74,6 +74,8 @@
 #include "url/origin.h"
 #include "url/url_constants.h"
 
+#define BrowserContextFromFrameTreeNodeId BrowserContextFromFrameTreeNodeId_PrefetchService
+
 namespace content {
 
 namespace {
@@ -1908,3 +1910,5 @@ void PrefetchService::RecordExistingPrefetchWithMatchingURL(
 }
 
 }  // namespace content
+
+#undef BrowserContextFromFrameTreeNodeId
diff --git a/content/browser/preloading/prefetch/prefetch_url_loader_interceptor.cc b/content/browser/preloading/prefetch/prefetch_url_loader_interceptor.cc
index 8d016240dd..c396bc93d7 100644
--- a/content/browser/preloading/prefetch/prefetch_url_loader_interceptor.cc
+++ b/content/browser/preloading/prefetch/prefetch_url_loader_interceptor.cc
@@ -25,6 +25,8 @@
 #include "services/network/public/cpp/resource_request.h"
 #include "services/network/public/cpp/single_request_url_loader_factory.h"
 
+#define BrowserContextFromFrameTreeNodeId BrowserContextFromFrameTreeNodeId_PrefetchURLLoaderInterceptor
+
 namespace content {
 namespace {
 
@@ -269,3 +271,5 @@ void PrefetchURLLoaderInterceptor::OnGetPrefetchComplete(
 }
 
 }  // namespace content
+
+#undef BrowserContextFromFrameTreeNodeId
diff --git a/content/browser/preloading/prerender/prerender_commit_deferring_condition.cc b/content/browser/preloading/prerender/prerender_commit_deferring_condition.cc
index 279d46371c..31076b1ef4 100644
--- a/content/browser/preloading/prerender/prerender_commit_deferring_condition.cc
+++ b/content/browser/preloading/prerender/prerender_commit_deferring_condition.cc
@@ -13,6 +13,8 @@
 #include "content/browser/renderer_host/navigation_request.h"
 #include "content/public/browser/render_frame_host.h"
 
+#define GetRootPrerenderFrameTreeNode GetRootPrerenderFrameTreeNode_PrerenderCommitDeferringCondition
+
 namespace content {
 
 namespace {
@@ -140,3 +142,5 @@ void PrerenderCommitDeferringCondition::DidFinishNavigation(
 }
 
 }  // namespace content
+
+#undef GetRootPrerenderFrameTreeNode
diff --git a/content/browser/preloading/prerender/prerender_no_vary_search_commit_deferring_condition.cc b/content/browser/preloading/prerender/prerender_no_vary_search_commit_deferring_condition.cc
index 8ac9fddc72..f2d0483f8b 100644
--- a/content/browser/preloading/prerender/prerender_no_vary_search_commit_deferring_condition.cc
+++ b/content/browser/preloading/prerender/prerender_no_vary_search_commit_deferring_condition.cc
@@ -12,6 +12,8 @@
 #include "content/public/browser/render_frame_host.h"
 #include "third_party/blink/public/common/features.h"
 
+#define GetRootPrerenderFrameTreeNode GetRootPrerenderFrameTreeNode_PrerenderNoVarySearchCommitDeferringCondition
+
 namespace content {
 
 namespace {
@@ -120,3 +122,5 @@ const char* PrerenderNoVarySearchCommitDeferringCondition::TraceEventName()
 }
 
 }  // namespace content
+
+#undef GetRootPrerenderFrameTreeNode
diff --git a/content/browser/renderer_host/media/media_devices_manager.cc b/content/browser/renderer_host/media/media_devices_manager.cc
index af68814588..0f0719632a 100644
--- a/content/browser/renderer_host/media/media_devices_manager.cc
+++ b/content/browser/renderer_host/media/media_devices_manager.cc
@@ -54,6 +54,9 @@
 #include "media/device_monitors/device_monitor_mac.h"
 #endif
 
+#define DeviceTypeToString DeviceTypeToString_MediaDevicesManager
+#define SendLogMessage     SendLogMessage_MediaDevicesManager
+
 namespace content {
 
 // Release video source provider in VideoCaptureDevicesChangedObserver
@@ -1520,3 +1523,6 @@ MediaDevicesManager::EnumerationState& MediaDevicesManager::EnumerationState::
 operator=(EnumerationState&& other) = default;
 
 }  // namespace content
+
+#undef DeviceTypeToString
+#undef SendLogMessage
diff --git a/content/browser/renderer_host/media/media_stream_manager.cc b/content/browser/renderer_host/media/media_stream_manager.cc
index 481407b62d..ce6902f2bd 100644
--- a/content/browser/renderer_host/media/media_stream_manager.cc
+++ b/content/browser/renderer_host/media/media_stream_manager.cc
@@ -107,6 +107,9 @@
 
 using ::blink::mojom::MediaDeviceType;
 
+#define DeviceTypeToString DeviceTypeToString_MediaStreamManager
+#define SendLogMessage     SendLogMessage_MediaStreamManager
+
 namespace content {
 
 constinit thread_local MediaStreamManager* media_stream_manager = nullptr;
@@ -4616,3 +4619,6 @@ void MediaStreamManager::OnVideoCaptureHostConnectionError() {
 #endif
 
 }  // namespace content
+
+#undef DeviceTypeToString
+#undef SendLogMessage
diff --git a/content/browser/renderer_host/media/render_frame_audio_input_stream_factory.cc b/content/browser/renderer_host/media/render_frame_audio_input_stream_factory.cc
index 0593c29bb7..76f3f3cfd4 100644
--- a/content/browser/renderer_host/media/render_frame_audio_input_stream_factory.cc
+++ b/content/browser/renderer_host/media/render_frame_audio_input_stream_factory.cc
@@ -41,6 +41,8 @@
 
 using blink::mojom::MediaDeviceType;
 
+#define GotSaltAndOrigin GotSaltAndOrigin_RenderFrameAudioInputStreamFactory
+
 namespace content {
 
 namespace {
@@ -363,3 +365,5 @@ void RenderFrameAudioInputStreamFactory::Core::
 }
 
 }  // namespace content
+
+#undef GotSaltAndOrigin
diff --git a/content/browser/renderer_host/pepper/pepper_internal_file_ref_backend.cc b/content/browser/renderer_host/pepper/pepper_internal_file_ref_backend.cc
index 308d7b83b5..6358de3637 100644
--- a/content/browser/renderer_host/pepper/pepper_internal_file_ref_backend.cc
+++ b/content/browser/renderer_host/pepper/pepper_internal_file_ref_backend.cc
@@ -81,7 +81,7 @@ void CallRemove(scoped_refptr<storage::FileSystemContext> file_system_context,
                                                   std::move(callback));
 }
 
-void CallTouchFile(
+void CallTouchFile2(
     scoped_refptr<storage::FileSystemContext> file_system_context,
     const storage::FileSystemURL& url,
     const base::Time& last_access_time,
@@ -247,7 +247,7 @@ int32_t PepperInternalFileRefBackend::Touch(
   GetIOThreadTaskRunner({})->PostTask(
       FROM_HERE,
       base::BindOnce(
-          CallTouchFile, GetFileSystemContext(), GetFileSystemURL(),
+          CallTouchFile2, GetFileSystemContext(), GetFileSystemURL(),
           last_access_time, last_modified_time,
           base::BindOnce(&PepperInternalFileRefBackend::DidFinishOnIOThread,
                          weak_factory_.GetWeakPtr(), reply_context,
diff --git a/content/browser/renderer_host/private_network_access_util.cc b/content/browser/renderer_host/private_network_access_util.cc
index 888d8be426..42693f4faf 100644
--- a/content/browser/renderer_host/private_network_access_util.cc
+++ b/content/browser/renderer_host/private_network_access_util.cc
@@ -39,24 +39,24 @@ FeatureState FeatureStateForContext(RequestContext request_context) {
       return FeatureState::kEnabled;
     case RequestContext::kWorker:
       if (!base::FeatureList::IsEnabled(
-              features::kPrivateNetworkAccessForWorkers)) {
+              ::features::kPrivateNetworkAccessForWorkers)) {
         return FeatureState::kDisabled;
       }
 
       if (base::FeatureList::IsEnabled(
-              features::kPrivateNetworkAccessForWorkersWarningOnly)) {
+              ::features::kPrivateNetworkAccessForWorkersWarningOnly)) {
         return FeatureState::kWarningOnly;
       }
 
       return FeatureState::kEnabled;
     case RequestContext::kNavigation:
       if (!base::FeatureList::IsEnabled(
-              features::kPrivateNetworkAccessForNavigations)) {
+              ::features::kPrivateNetworkAccessForNavigations)) {
         return FeatureState::kDisabled;
       }
 
       if (base::FeatureList::IsEnabled(
-              features::kPrivateNetworkAccessForNavigationsWarningOnly)) {
+              ::features::kPrivateNetworkAccessForNavigationsWarningOnly)) {
         return FeatureState::kWarningOnly;
       }
 
@@ -81,7 +81,7 @@ Policy DerivePolicyForNonSecureContext(AddressSpace ip_address_space) {
       // because it is unclear why they happen in the first place. The goal is
       // to reduce instances of this happening before enabling this feature.
       return base::FeatureList::IsEnabled(
-                 features::kBlockInsecurePrivateNetworkRequestsFromUnknown)
+                 ::features::kBlockInsecurePrivateNetworkRequestsFromUnknown)
                  ? Policy::kBlock
                  : Policy::kAllow;
     case AddressSpace::kPrivate:
@@ -90,7 +90,7 @@ Policy DerivePolicyForNonSecureContext(AddressSpace ip_address_space) {
       // This is controlled separately because private network websites face
       // additional hurdles compared to public websites. See crbug.com/1234044.
       return base::FeatureList::IsEnabled(
-                 features::kBlockInsecurePrivateNetworkRequestsFromPrivate)
+                 ::features::kBlockInsecurePrivateNetworkRequestsFromPrivate)
                  ? Policy::kBlock
                  : Policy::kWarn;
     case AddressSpace::kPublic:
@@ -103,7 +103,7 @@ Policy DerivePolicyForNonSecureContext(AddressSpace ip_address_space) {
       // are never considered private network requests - they cannot target
       // more-private address spaces.
       return base::FeatureList::IsEnabled(
-                 features::kBlockInsecurePrivateNetworkRequests)
+                 ::features::kBlockInsecurePrivateNetworkRequests)
                  ? Policy::kBlock
                  : Policy::kWarn;
   }
@@ -117,12 +117,12 @@ Policy DerivePolicyForSecureContext(AddressSpace ip_address_space) {
   }
 
   if (base::FeatureList::IsEnabled(
-          features::kPrivateNetworkAccessRespectPreflightResults)) {
+          ::features::kPrivateNetworkAccessRespectPreflightResults)) {
     return Policy::kPreflightBlock;
   }
 
   if (base::FeatureList::IsEnabled(
-          features::kPrivateNetworkAccessSendPreflights)) {
+          ::features::kPrivateNetworkAccessSendPreflights)) {
     return Policy::kPreflightWarn;
   }
 
diff --git a/content/browser/renderer_host/render_frame_host_impl.cc b/content/browser/renderer_host/render_frame_host_impl.cc
index 7222a4475e..c39695a73d 100644
--- a/content/browser/renderer_host/render_frame_host_impl.cc
+++ b/content/browser/renderer_host/render_frame_host_impl.cc
@@ -448,10 +448,10 @@ typedef std::unordered_set<GlobalRenderFrameHostId,
 base::LazyInstance<RoutingIDIsolatableSandboxedIframesSet>::DestructorAtExit
     g_routing_id_isolatable_sandboxed_iframes_set = LAZY_INSTANCE_INITIALIZER;
 
-using TokenFrameMap = std::unordered_map<blink::LocalFrameToken,
+using TokenFrameMap_RenderFrameHostImpl = std::unordered_map<blink::LocalFrameToken,
                                          RenderFrameHostImpl*,
                                          blink::LocalFrameToken::Hasher>;
-base::LazyInstance<TokenFrameMap>::Leaky g_token_frame_map =
+base::LazyInstance<TokenFrameMap_RenderFrameHostImpl>::Leaky g_token_frame_map =
     LAZY_INSTANCE_INITIALIZER;
 
 BackForwardCacheMetrics::NotRestoredReason
@@ -3918,7 +3918,7 @@ bool RenderFrameHostImpl::CreateRenderFrame(
        (navigation_request->commit_params()
             .is_cross_site_cross_browsing_context_group &&
         base::FeatureList::IsEnabled(
-            features::kClearCrossSiteCrossBrowsingContextGroupWindowName)));
+            ::features::kClearCrossSiteCrossBrowsingContextGroupWindowName)));
 
   if (should_clear_browsing_instance_name) {
     params->replication_state->name = "";
@@ -5402,7 +5402,7 @@ bool RenderFrameHostImpl::VerifyFencedFrameFocusChange(
   // TODO(crbug.com/40274134): We will later badmessage the renderer, but, for
   // now, we will dump without crashing to monitor if any legitimate cases are
   // reaching this point.
-  if (base::FeatureList::IsEnabled(features::kFencedFramesEnforceFocus)) {
+  if (base::FeatureList::IsEnabled(::features::kFencedFramesEnforceFocus)) {
     bad_message::ReceivedBadMessage(
         GetProcess(), bad_message::RFH_FOCUS_ACROSS_FENCED_BOUNDARY);
   } else {
@@ -8017,14 +8017,14 @@ bool RenderFrameHostImpl::IsInactiveAndDisallowActivation(uint64_t reason) {
       // back/forward cache, because |HandleAXevents()| will continue to process
       // accessibility events without evicting unless the kEvictOnAXEvents flag
       // is on.
-      if (!base::FeatureList::IsEnabled(features::kEvictOnAXEvents))
+      if (!base::FeatureList::IsEnabled(::features::kEvictOnAXEvents))
         CHECK_NE(reason, kAXEvent);
       // This function should not be called with kAXLocationChange when the
       // page is in back/forward cache, because `HandleAXLocationChange()` will
       // continue to process accessibility location changes unless
       // kDoNotEvictOnAXLocationChange is off.
       if (base::FeatureList::IsEnabled(
-              features::kDoNotEvictOnAXLocationChange)) {
+              ::features::kDoNotEvictOnAXLocationChange)) {
         CHECK_NE(reason, kAXLocationChange);
       }
       BackForwardCacheCanStoreDocumentResult can_store_flat;
@@ -8062,7 +8062,7 @@ bool RenderFrameHostImpl::IsInactiveAndDisallowActivation(uint64_t reason) {
 
 bool RenderFrameHostImpl::IsInactiveAndDisallowActivationForAXEvents(
     const std::vector<ui::AXEvent>& events) {
-  DCHECK(base::FeatureList::IsEnabled(features::kEvictOnAXEvents));
+  DCHECK(base::FeatureList::IsEnabled(::features::kEvictOnAXEvents));
   if (lifecycle_state_ != LifecycleStateImpl::kInBackForwardCache) {
     return IsInactiveAndDisallowActivation(
         DisallowActivationReasonId::kAXEvent);
@@ -8472,7 +8472,7 @@ void RenderFrameHostImpl::MaybeIsolateForUserActivation() {
     // the isolation eligibility checks, such as having the corresponding
     // feature enabled or satisfying memory requirements.
     DCHECK(base::FeatureList::IsEnabled(
-        features::kSiteIsolationForCrossOriginOpenerPolicy));
+        ::features::kSiteIsolationForCrossOriginOpenerPolicy));
 
     bool is_same_origin_activation =
         GetParent() ? GetMainFrame()->GetLastCommittedOrigin().IsSameOriginWith(
@@ -10632,7 +10632,7 @@ void RenderFrameHostImpl::HandleAXEvents(
   // TODO(accessibility): we should probably consolidate these two params.
   updates_and_events.ax_tree_id = tree_id;
 
-  if (base::FeatureList::IsEnabled(features::kEvictOnAXEvents)) {
+  if (base::FeatureList::IsEnabled(::features::kEvictOnAXEvents)) {
     // If the flag is on, evict the bfcache entry now that AX events are
     // received.
     if (IsInactiveAndDisallowActivationForAXEvents(updates_and_events.events)) {
@@ -10742,7 +10742,7 @@ void RenderFrameHostImpl::HandleAXLocationChanges(
     return;
   }
 
-  if (!base::FeatureList::IsEnabled(features::kDoNotEvictOnAXLocationChange)) {
+  if (!base::FeatureList::IsEnabled(::features::kDoNotEvictOnAXLocationChange)) {
     // If the flag is off, we should evict the back/forward cache entry.
     if (IsInactiveAndDisallowActivation(
             DisallowActivationReasonId::kAXLocationChange)) {
@@ -13017,7 +13017,7 @@ void RenderFrameHostImpl::CreatePaymentCredential(
 
 void RenderFrameHostImpl::CreateWebUsbService(
     mojo::PendingReceiver<blink::mojom::WebUsbService> receiver) {
-  if (!base::FeatureList::IsEnabled(features::kWebUsb)) {
+  if (!base::FeatureList::IsEnabled(::features::kWebUsb)) {
     return;
   }
   if (!IsFeatureEnabled(blink::mojom::PermissionsPolicyFeature::kUsb)) {
@@ -15276,7 +15276,7 @@ void RenderFrameHostImpl::SendCommitNavigation(
   // TODO(crbug.com/40205612): Remove the kill switch for this check.
   bool should_block_storage_access_for_pdf =
       GetSiteInstance()->GetSiteInfo().is_pdf() &&
-      base::FeatureList::IsEnabled(features::kPdfEnforcements);
+      base::FeatureList::IsEnabled(::features::kPdfEnforcements);
 
   // Make sure the origin of the isolation info and origin to commit match,
   // otherwise the cookie manager will crash. Sending the cookie manager here
@@ -16212,7 +16212,7 @@ bool ShouldVerify(const std::string& param) {
   // For other params, default to disable checking the param. However, it's
   // possible to force-enable checking the param via the VerifyDidCommitParams
   // flag's param.
-  return GetFieldTrialParamByFeatureAsBool(features::kVerifyDidCommitParams,
+  return GetFieldTrialParamByFeatureAsBool(::features::kVerifyDidCommitParams,
                                            param, false);
 #endif
 }
@@ -16261,7 +16261,7 @@ void RenderFrameHostImpl::
 #if !DCHECK_IS_ON()
   // Only check for the flag if DCHECK is not enabled, so that we will always
   // verify the params for tests.
-  if (!base::FeatureList::IsEnabled(features::kVerifyDidCommitParams))
+  if (!base::FeatureList::IsEnabled(::features::kVerifyDidCommitParams))
     return;
 #endif
   // Check if these values from DidCommitProvisionalLoadParams sent by the
@@ -17448,14 +17448,14 @@ void RenderFrameHostImpl::SetFrameTreeNode(FrameTreeNode& frame_tree_node) {
   // the new functionality for swapping BrowsingContext on cross
   // BrowsingInstance navigations, the BrowsingContextState is the only field
   // that will need to be swapped.
-  switch (features::GetBrowsingContextMode()) {
-    case (features::BrowsingContextStateImplementationType::
+  switch (::features::GetBrowsingContextMode()) {
+    case (::features::BrowsingContextStateImplementationType::
               kLegacyOneToOneWithFrameTreeNode):
       browsing_context_state_ = frame_tree_node_->render_manager()
                                     ->current_frame_host()
                                     ->browsing_context_state();
       break;
-    case (features::BrowsingContextStateImplementationType::
+    case (::features::BrowsingContextStateImplementationType::
               kSwapForCrossBrowsingInstanceNavigations):
       // TODO(crbug.com/40205442): implement functionality for swapping on cross
       // browsing instance navigations as needed. This will likely be removed
@@ -17702,7 +17702,7 @@ bool RenderFrameHostImpl::ShouldReuseCompositing(
     return false;
   }
 
-  if (!base::FeatureList::IsEnabled(features::kRenderDocumentCompositorReuse)) {
+  if (!base::FeatureList::IsEnabled(::features::kRenderDocumentCompositorReuse)) {
     return false;
   }
 
diff --git a/content/browser/renderer_host/render_frame_host_manager.cc b/content/browser/renderer_host/render_frame_host_manager.cc
index 83396cdd7d..9d6f62045b 100644
--- a/content/browser/renderer_host/render_frame_host_manager.cc
+++ b/content/browser/renderer_host/render_frame_host_manager.cc
@@ -386,18 +386,18 @@ void UpdateProcessReusePolicyForProcessPerSiteWithMainFrameThreshold(
     return;
   }
   if (!base::FeatureList::IsEnabled(
-          features::kProcessPerSiteUpToMainFrameThreshold)) {
+          ::features::kProcessPerSiteUpToMainFrameThreshold)) {
     return;
   }
   if (!frame_tree_node->IsOutermostMainFrame()) {
     return;
   }
-  if (base::FeatureList::IsEnabled(features::kDisableProcessReuse)) {
+  if (base::FeatureList::IsEnabled(::features::kDisableProcessReuse)) {
     RecordProcessPerSiteWithMainFrameThresholdBlockReason(
         ProcessPerSiteWithMainFrameThresholdBlockReason::kDisableProcessResuse);
     return;
   }
-  if (!features::kProcessPerSiteMainFrameAllowDevToolsAttached.Get() &&
+  if (!::features::kProcessPerSiteMainFrameAllowDevToolsAttached.Get() &&
       RenderFrameDevToolsAgentHost::WasEverAttachedToAnyFrame()) {
     RecordProcessPerSiteWithMainFrameThresholdBlockReason(
         ProcessPerSiteWithMainFrameThresholdBlockReason::
@@ -418,7 +418,7 @@ void UpdateProcessReusePolicyForProcessPerSiteWithMainFrameThreshold(
   // for process reuse to work around the problem, unless a field parameter
   // explicitly allows it.
   const GURL& site_url = site_instance->GetSiteURL();
-  if (!features::kProcessPerSiteMainFrameAllowIPAndLocalhost.Get() &&
+  if (!::features::kProcessPerSiteMainFrameAllowIPAndLocalhost.Get() &&
       (site_url.HostIsIPAddress() || net::IsLocalHostname(site_url.host()))) {
     RecordProcessPerSiteWithMainFrameThresholdBlockReason(
         ProcessPerSiteWithMainFrameThresholdBlockReason::
@@ -624,8 +624,8 @@ void RenderFrameHostManager::InitRoot(
     const std::string& name,
     const base::UnguessableToken& devtools_frame_token) {
   bool is_legacy_browsing_context_state_mode =
-      features::GetBrowsingContextMode() ==
-      features::BrowsingContextStateImplementationType::
+      ::features::GetBrowsingContextMode() ==
+      ::features::BrowsingContextStateImplementationType::
           kLegacyOneToOneWithFrameTreeNode;
   scoped_refptr<BrowsingContextState> browsing_context_state =
       base::MakeRefCounted<BrowsingContextState>(
@@ -674,8 +674,8 @@ void RenderFrameHostManager::InitChild(
     std::string frame_name,
     std::string frame_unique_name) {
   bool is_legacy_browsing_context_state_mode =
-      features::GetBrowsingContextMode() ==
-      features::BrowsingContextStateImplementationType::
+      ::features::GetBrowsingContextMode() ==
+      ::features::BrowsingContextStateImplementationType::
           kLegacyOneToOneWithFrameTreeNode;
   scoped_refptr<BrowsingContextState> browsing_context_state =
       base::MakeRefCounted<BrowsingContextState>(
@@ -1043,14 +1043,14 @@ void RenderFrameHostManager::PrepareForCollectingPage(
   // in FrameTree (which, for example, is shared between the new page and
   // the page entering BFCache), so they have to be collected explicitly above.
   // Since proxies are not collected, we can return early here.
-  if (features::GetBrowsingContextMode() ==
-      features::BrowsingContextStateImplementationType::
+  if (::features::GetBrowsingContextMode() ==
+      ::features::BrowsingContextStateImplementationType::
           kSwapForCrossBrowsingInstanceNavigations) {
     return;
   }
 
-  DCHECK_EQ(features::GetBrowsingContextMode(),
-            features::BrowsingContextStateImplementationType::
+  DCHECK_EQ(::features::GetBrowsingContextMode(),
+            ::features::BrowsingContextStateImplementationType::
                 kLegacyOneToOneWithFrameTreeNode);
 
   // Prepare the proxies.
@@ -2641,8 +2641,8 @@ RenderFrameHostManager::ShouldSwapBrowsingInstancesForNavigation(
             current_instance->GetRelatedActiveContentsCount()),
         51);
     if (base::FeatureList::IsEnabled(
-            features::kPrefetchStateContaminationMitigation) &&
-        features::kPrefetchStateContaminationSwapsBrowsingContextGroup.Get()) {
+            ::features::kPrefetchStateContaminationMitigation) &&
+        ::features::kPrefetchStateContaminationSwapsBrowsingContextGroup.Get()) {
       return BrowsingContextGroupSwap::CreateSecuritySwap();
     }
   }
@@ -2979,7 +2979,7 @@ RenderFrameHostManager::GetSiteInstanceForNavigation(
     // this decision. Certain frames have different enough workloads so that
     // it's better to avoid placing a subframe into an existing process for
     // better performance isolation.  See https://crbug.com/899418.
-    if (!base::FeatureList::IsEnabled(features::kDisableProcessReuse) &&
+    if (!base::FeatureList::IsEnabled(::features::kDisableProcessReuse) &&
         GetContentClient()
             ->browser()
             ->ShouldEmbeddedFramesTryToReuseExistingProcess(
@@ -3083,7 +3083,7 @@ RenderFrameHostManager::GetSiteInstanceForNavigation(
                current_instance->GetRelatedActiveContentsCount() == 1) {
       process_to_reuse = current_instance->GetProcess();
     } else if (base::FeatureList::IsEnabled(
-                   features::kProcessReuseOnPrerenderCOOPSwap) &&
+                   ::features::kProcessReuseOnPrerenderCOOPSwap) &&
                frame_tree_node_->frame_tree().is_prerendering()) {
       process_to_reuse = current_instance->GetProcess();
     }
@@ -4019,8 +4019,8 @@ RenderFrameHostManager::CreateRenderFrameHost(
   if (!render_view_host) {
     render_view_host = frame_tree.CreateRenderViewHost(
         site_instance->group(), frame_routing_id, renderer_initiated_creation,
-        features::GetBrowsingContextMode() ==
-                features::BrowsingContextStateImplementationType::
+        ::features::GetBrowsingContextMode() ==
+                ::features::BrowsingContextStateImplementationType::
                     kSwapForCrossBrowsingInstanceNavigations
             ? browsing_context_state
             : nullptr,
@@ -4080,8 +4080,8 @@ bool RenderFrameHostManager::CreateSpeculativeRenderFrameHost(
     return false;
 
   scoped_refptr<BrowsingContextState> browsing_context_state;
-  if (features::GetBrowsingContextMode() ==
-      features::BrowsingContextStateImplementationType::
+  if (::features::GetBrowsingContextMode() ==
+      ::features::BrowsingContextStateImplementationType::
           kLegacyOneToOneWithFrameTreeNode) {
     browsing_context_state = render_frame_host_->browsing_context_state();
   } else {
@@ -4332,8 +4332,8 @@ void RenderFrameHostManager::CreateRenderFrameProxy(
       render_view_host = frame_tree_node_->frame_tree().CreateRenderViewHost(
           group, /*main_frame_routing_id=*/MSG_ROUTING_NONE,
           /*renderer_initiated_creation=*/false,
-          features::GetBrowsingContextMode() ==
-                  features::BrowsingContextStateImplementationType::
+          ::features::GetBrowsingContextMode() ==
+                  ::features::BrowsingContextStateImplementationType::
                       kSwapForCrossBrowsingInstanceNavigations
               ? render_frame_host_->browsing_context_state()
               : nullptr,
@@ -4782,8 +4782,8 @@ RenderFrameHostManager::GetFrameTokenForSiteInstanceGroup(
   // instance after a browsing instance swap, and we want to ensure that this
   // doesn't break anything, so we tie it to the GetBrowsingContextMode which
   // needs it and is disabled-by-default)
-  if (features::GetBrowsingContextMode() ==
-          features::BrowsingContextStateImplementationType::
+  if (::features::GetBrowsingContextMode() ==
+          ::features::BrowsingContextStateImplementationType::
               kSwapForCrossBrowsingInstanceNavigations &&
       !render_frame_host_->GetSiteInstance()
            ->group()
@@ -4931,8 +4931,8 @@ void RenderFrameHostManager::CommitPending(
     // because in the new implementation, proxies will be swapped/restored
     // whenever the RenderFrameHost (and internal BrowsingContextState) is
     // restored.
-    if (features::GetBrowsingContextMode() ==
-        features::BrowsingContextStateImplementationType::
+    if (::features::GetBrowsingContextMode() ==
+        ::features::BrowsingContextStateImplementationType::
             kLegacyOneToOneWithFrameTreeNode) {
       BrowsingContextState::RenderFrameProxyHostMap proxy_hosts_to_restore =
           pending_stored_page->TakeProxyHosts();
diff --git a/content/browser/renderer_host/render_frame_proxy_host.cc b/content/browser/renderer_host/render_frame_proxy_host.cc
index fb12d7ab55..2c8f9d04ae 100644
--- a/content/browser/renderer_host/render_frame_proxy_host.cc
+++ b/content/browser/renderer_host/render_frame_proxy_host.cc
@@ -53,6 +53,8 @@
 #include "third_party/blink/public/mojom/scroll/scroll_into_view_params.mojom.h"
 #include "ui/gfx/geometry/rect_f.h"
 
+#define TokenFrameMap TokenFrameMap_RenderFrameProxyHost
+
 namespace content {
 
 namespace {
@@ -588,7 +590,7 @@ void RenderFrameProxyHost::RouteMessageEvent(
   // origins once rollout is complete.
   bool should_verify_source_origin =
       base::FeatureList::IsEnabled(
-          features::kAdditionalOpaqueOriginEnforcements) ||
+          ::features::kAdditionalOpaqueOriginEnforcements) ||
       source_origin_string != u"null";
   if (should_verify_source_origin) {
     auto* policy = ChildProcessSecurityPolicyImpl::GetInstance();
@@ -1037,3 +1039,5 @@ base::SafeRef<RenderFrameProxyHost> RenderFrameProxyHost::GetSafeRef() {
 }
 
 }  // namespace content
+
+#undef TokenFrameMap
diff --git a/content/browser/renderer_host/render_message_filter.cc b/content/browser/renderer_host/render_message_filter.cc
index 7517bdd84c..ca2d78e5b8 100644
--- a/content/browser/renderer_host/render_message_filter.cc
+++ b/content/browser/renderer_host/render_message_filter.cc
@@ -18,7 +18,7 @@ RenderMessageFilter::RenderMessageFilter(
     RenderWidgetHelper* render_widget_helper)
     : render_widget_helper_(render_widget_helper),
       render_process_id_(render_process_id),
-      cache_response_size_(features::kFrameRoutingCacheResponseSize.Get()) {
+      cache_response_size_(::features::kFrameRoutingCacheResponseSize.Get()) {
   if (render_widget_helper) {
     render_widget_helper_->Init(render_process_id_);
   }
diff --git a/content/browser/renderer_host/render_process_host_impl.cc b/content/browser/renderer_host/render_process_host_impl.cc
index 12aa181c5d..51fef721fe 100644
--- a/content/browser/renderer_host/render_process_host_impl.cc
+++ b/content/browser/renderer_host/render_process_host_impl.cc
@@ -3236,7 +3236,7 @@ void RenderProcessHostImpl::AppendRendererCommandLine(
                                     "--disable-optimizing-compilers");
   }
 
-  if (features::IsTouchTextEditingRedesignEnabled()) {
+  if (::features::IsTouchTextEditingRedesignEnabled()) {
     command_line->AppendSwitchASCII(
         blink::switches::kTouchTextSelectionStrategy,
         blink::switches::kTouchTextSelectionStrategy_Direction);
diff --git a/content/browser/renderer_host/render_widget_host_view_aura.cc b/content/browser/renderer_host/render_widget_host_view_aura.cc
index 1a3115d26b..d6f9a33cd1 100644
--- a/content/browser/renderer_host/render_widget_host_view_aura.cc
+++ b/content/browser/renderer_host/render_widget_host_view_aura.cc
@@ -2952,7 +2952,7 @@ void RenderWidgetHostViewAura::CreateSelectionController() {
   tsc_config.tap_slop = ui::GestureConfiguration::GetInstance()
                             ->max_touch_move_in_pixels_for_click();
   tsc_config.enable_longpress_drag_selection =
-      features::IsTouchTextEditingRedesignEnabled();
+      ::features::IsTouchTextEditingRedesignEnabled();
   selection_controller_ = std::make_unique<ui::TouchSelectionController>(
       selection_controller_client_.get(), tsc_config);
 }
diff --git a/content/browser/security/coop/cross_origin_opener_policy_reporter.cc b/content/browser/security/coop/cross_origin_opener_policy_reporter.cc
index 334f15a6bc..9f650fdecf 100644
--- a/content/browser/security/coop/cross_origin_opener_policy_reporter.cc
+++ b/content/browser/security/coop/cross_origin_opener_policy_reporter.cc
@@ -19,6 +19,8 @@
 #include "services/network/public/mojom/source_location.mojom.h"
 #include "url/origin.h"
 
+#define kType kType_CrossOriginOpenerPolicyReporter
+
 namespace content {
 
 namespace {
@@ -298,3 +300,5 @@ void CrossOriginOpenerPolicyReporter::QueueNavigationReport(
 }
 
 }  // namespace content
+
+#undef kType
diff --git a/content/child/BUILD.gn b/content/child/BUILD.gn
index bdf9ad21dd..079a68645b 100644
--- a/content/child/BUILD.gn
+++ b/content/child/BUILD.gn
@@ -3,6 +3,7 @@
 # found in the LICENSE file.
 
 import("//build/config/features.gni")
+import("//build/config/jumbo.gni")
 import("//build/config/ui.gni")
 import("//device/vr/buildflags/buildflags.gni")
 import("//ppapi/buildflags/buildflags.gni")
@@ -12,9 +13,9 @@ if (is_android) {
 }
 
 if (is_component_build) {
-  link_target_type = "source_set"
+  link_target_type = "jumbo_source_set"
 } else {
-  link_target_type = "static_library"
+  link_target_type = "jumbo_static_library"
 }
 target(link_target_type, "child") {
   # Targets external to content should always link to the public API.
diff --git a/content/common/BUILD.gn b/content/common/BUILD.gn
index a599719dea..86953bbb6e 100644
--- a/content/common/BUILD.gn
+++ b/content/common/BUILD.gn
@@ -60,7 +60,7 @@ if (is_linux || is_chromeos) {
   }
 }
 
-source_set("common") {
+jumbo_source_set("common") {
   # Targets external to content should always link to the public API.
   # In addition, targets outside of the content component (shell and tests)
   # must not link to this because it will duplicate the code in the component
@@ -192,6 +192,10 @@ source_set("common") {
     "webid/identity_url_loader_throttle.cc",
     "webid/identity_url_loader_throttle.h",
   ]
+  jumbo_excluded_sources = [
+    "common_param_traits.cc",
+    "content_param_traits.cc",
+  ]
 
   configs += [
     "//content:content_implementation",
diff --git a/content/gpu/BUILD.gn b/content/gpu/BUILD.gn
index 098082510e..397d13d227 100644
--- a/content/gpu/BUILD.gn
+++ b/content/gpu/BUILD.gn
@@ -4,6 +4,7 @@
 
 import("//build/config/cast.gni")
 import("//build/config/chromeos/ui_mode.gni")
+import("//build/config/jumbo.gni")
 import("//build/config/ui.gni")
 import("//gpu/vulkan/features.gni")
 import("//media/media_options.gni")
@@ -20,9 +21,9 @@ group("gpu") {
 }
 
 if (is_component_build) {
-  link_target_type = "source_set"
+  link_target_type = "jumbo_source_set"
 } else {
-  link_target_type = "static_library"
+  link_target_type = "jumbo_static_library"
 }
 
 target(link_target_type, "gpu_sources") {
diff --git a/content/public/browser/BUILD.gn b/content/public/browser/BUILD.gn
index e99381f657..4571f8831c 100644
--- a/content/public/browser/BUILD.gn
+++ b/content/public/browser/BUILD.gn
@@ -3,6 +3,7 @@
 # found in the LICENSE file.
 
 import("//build/config/chromeos/ui_mode.gni")
+import("//build/config/jumbo.gni")
 import("//build/config/ui.gni")
 import("//content/common/features.gni")
 import("//device/vr/buildflags/buildflags.gni")
@@ -24,7 +25,7 @@ group("browser") {
   }
 }
 
-source_set("browser_sources") {
+jumbo_source_set("browser_sources") {
   # External code should depend on via ":browser" above.
   visibility = [ "//content/*" ]
   sources = [
diff --git a/content/public/child/BUILD.gn b/content/public/child/BUILD.gn
index 73fce2d993..2f298f5cda 100644
--- a/content/public/child/BUILD.gn
+++ b/content/public/child/BUILD.gn
@@ -2,6 +2,7 @@
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
 
+import("//build/config/jumbo.gni")
 import("//ppapi/buildflags/buildflags.gni")
 
 # See //content/BUILD.gn for how this works.
@@ -19,7 +20,7 @@ group("child") {
   }
 }
 
-source_set("child_sources") {
+jumbo_source_set("child_sources") {
   # External code should depend in via ":child" above.
   visibility = [ "//content/*" ]
 
diff --git a/content/public/common/BUILD.gn b/content/public/common/BUILD.gn
index 0099cf7877..6c6811c67b 100644
--- a/content/public/common/BUILD.gn
+++ b/content/public/common/BUILD.gn
@@ -5,6 +5,7 @@
 import("//build/buildflag_header.gni")
 import("//build/config/chromeos/ui_mode.gni")
 import("//build/config/features.gni")
+import("//build/config/jumbo.gni")
 import("//build/config/ui.gni")
 import("//content/public/common/features.gni")
 import("//content/public/common/zygote/features.gni")
@@ -155,7 +156,7 @@ component("main_function_params") {
   configs += [ "//content:content_implementation" ]
 }
 
-source_set("common_sources") {
+jumbo_source_set("common_sources") {
   # External code should depend on via ":common" above.
   visibility = [ "//content/*" ]
 
diff --git a/content/public/renderer/BUILD.gn b/content/public/renderer/BUILD.gn
index 1708aa82d3..8b39b24ca7 100644
--- a/content/public/renderer/BUILD.gn
+++ b/content/public/renderer/BUILD.gn
@@ -3,6 +3,7 @@
 # found in the LICENSE file.
 
 import("//build/config/features.gni")
+import("//build/config/jumbo.gni")
 import("//media/media_options.gni")
 import("//ppapi/buildflags/buildflags.gni")
 
@@ -19,9 +20,9 @@ group("renderer") {
 }
 
 if (is_component_build) {
-  link_target_type = "source_set"
+  link_target_type = "jumbo_source_set"
 } else {
-  link_target_type = "static_library"
+  link_target_type = "jumbo_static_library"
 }
 target(link_target_type, "renderer_sources") {
   # External code should depend on via ":renderer" above.
diff --git a/content/renderer/BUILD.gn b/content/renderer/BUILD.gn
index cdd5750c7a..fd07e9e093 100644
--- a/content/renderer/BUILD.gn
+++ b/content/renderer/BUILD.gn
@@ -5,6 +5,7 @@
 import("//build/config/cast.gni")
 import("//build/config/chromeos/ui_mode.gni")
 import("//build/config/features.gni")
+import("//build/config/jumbo.gni")
 import("//build/config/ui.gni")
 import("//content/common/features.gni")
 import("//media/media_options.gni")
@@ -16,9 +17,9 @@ import("//third_party/webrtc/webrtc.gni")
 import("//tools/ipc_fuzzer/ipc_fuzzer.gni")
 
 if (is_component_build) {
-  link_target_type = "source_set"
+  link_target_type = "jumbo_source_set"
 } else {
-  link_target_type = "static_library"
+  link_target_type = "jumbo_static_library"
 }
 
 target(link_target_type, "renderer") {
diff --git a/content/renderer/service_worker/service_worker_subresource_loader.cc b/content/renderer/service_worker/service_worker_subresource_loader.cc
index e938fc31de..69ea05e8f7 100644
--- a/content/renderer/service_worker/service_worker_subresource_loader.cc
+++ b/content/renderer/service_worker/service_worker_subresource_loader.cc
@@ -44,6 +44,8 @@
 #include "third_party/blink/public/mojom/service_worker/service_worker_stream_handle.mojom.h"
 #include "third_party/blink/public/platform/web_url_response.h"
 
+#define MojoEnumToString MojoEnumToString_ServiceWorkerSubresourceLoader
+
 namespace content {
 
 namespace {
@@ -1555,3 +1557,5 @@ void ServiceWorkerSubresourceLoader::DidCacheStorageMatch(
 }
 
 }  // namespace content
+
+#undef MojoEnumToString
diff --git a/content/renderer/service_worker/web_service_worker_provider_impl.cc b/content/renderer/service_worker/web_service_worker_provider_impl.cc
index 11d4e235f6..7fffbaa46d 100644
--- a/content/renderer/service_worker/web_service_worker_provider_impl.cc
+++ b/content/renderer/service_worker/web_service_worker_provider_impl.cc
@@ -24,6 +24,8 @@
 
 using blink::WebURL;
 
+#define MojoEnumToString MojoEnumToString_WebServiceWorkerProviderImpl
+
 namespace content {
 
 namespace {
@@ -336,3 +338,5 @@ void WebServiceWorkerProviderImpl::OnDidGetRegistrationForReady(
 }
 
 }  // namespace content
+
+#undef MojoEnumToString
diff --git a/content/services/auction_worklet/BUILD.gn b/content/services/auction_worklet/BUILD.gn
index 4620e9ab69..0f2700cd1e 100644
--- a/content/services/auction_worklet/BUILD.gn
+++ b/content/services/auction_worklet/BUILD.gn
@@ -2,6 +2,7 @@
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
 
+import("//build/config/jumbo.gni")
 import("//third_party/inspector_protocol/inspector_protocol.gni")
 import("//v8/gni/v8.gni")
 
@@ -30,7 +31,7 @@ inspector_protocol_generate("protocol_sources") {
   ]
 }
 
-source_set("auction_worklet") {
+jumbo_source_set("auction_worklet") {
   sources = [
     "auction_v8_devtools_agent.cc",
     "auction_v8_devtools_agent.h",
@@ -104,6 +105,10 @@ source_set("auction_worklet") {
 
   sources += get_target_outputs(":protocol_sources")
 
+  jumbo_excluded_sources = [
+    "seller_worklet.cc",
+  ]
+
   configs += [
     "//build/config/compiler:wexit_time_destructors",
     "//v8:external_startup_data",
diff --git a/content/test/BUILD.gn b/content/test/BUILD.gn
index c7ef928f2e..5649530458 100644
--- a/content/test/BUILD.gn
+++ b/content/test/BUILD.gn
@@ -7,6 +7,7 @@ import("//build/config/chrome_build.gni")
 import("//build/config/chromeos/ui_mode.gni")
 import("//build/config/compiler/compiler.gni")
 import("//build/config/features.gni")
+import("//build/config/jumbo.gni")
 import("//build/config/ui.gni")
 import("//build/nocompile.gni")
 import("//components/viz/common/debugger/viz_debugger.gni")
@@ -43,7 +44,7 @@ if (is_ios) {
 
 # Use a static library here because many test binaries depend on this but don't
 # require many files from it. This makes linking more efficient.
-static_library("test_support") {
+jumbo_static_library("test_support") {
   testonly = true
 
   # See comment at the top of //content/BUILD.gn for why this is disabled in
@@ -1018,7 +1019,7 @@ source_set("default_content_test_launcher") {
 
 # browsertest_support can be used by targets that run content_shell based
 # browser tests.
-static_library("browsertest_support") {
+jumbo_static_library("browsertest_support") {
   testonly = true
 
   # See comment at the top of //content/BUILD.gn for why this is disabled in
diff --git a/content/utility/BUILD.gn b/content/utility/BUILD.gn
index cddc1adc10..b46a9baa39 100644
--- a/content/utility/BUILD.gn
+++ b/content/utility/BUILD.gn
@@ -3,6 +3,7 @@
 # found in the LICENSE file.
 
 import("//build/config/chromeos/ui_mode.gni")
+import("//build/config/jumbo.gni")
 import("//chromeos/ash/components/assistant/assistant.gni")
 import("//components/services/on_device_translation/buildflags/features.gni")
 import("//device/vr/buildflags/buildflags.gni")
@@ -14,7 +15,7 @@ import("//services/accessibility/buildflags.gni")
 import("//services/screen_ai/buildflags/features.gni")
 import("//services/video_effects/args.gni")
 
-source_set("utility") {
+jumbo_source_set("utility") {
   # Only the public target should depend on this. All other targets (even
   # internal content ones other than test) should depend on the public one.
   visibility = [
--- a/content/browser/BUILD.gn
+++ b/content/browser/BUILD.gn
@@ -126,6 +126,14 @@
     "$target_gen_dir/devtools/protocol/tracing.cc",
     "$target_gen_dir/devtools/protocol/tracing.h",
   ]
+
+  if (enable_bluetooth_emulation) {
+    sources += [
+      "$target_gen_dir/devtools/protocol/bluetooth_emulation.cc",
+      "$target_gen_dir/devtools/protocol/bluetooth_emulation.h",
+    ]
+  }
+
   if (!is_android) {
     # The WebAuthn devtools protocol API is not supported in Android yet.
     sources += [
@@ -2443,8 +2451,6 @@
     ]
 
     sources += [
-      "$target_gen_dir/devtools/protocol/bluetooth_emulation.cc",
-      "$target_gen_dir/devtools/protocol/bluetooth_emulation.h",
       "devtools/protocol/bluetooth_emulation_handler.cc",
       "devtools/protocol/bluetooth_emulation_handler.h",
     ]
--- a/content/browser/find_request_manager.cc
+++ b/content/browser/find_request_manager.cc
@@ -170,7 +170,7 @@
 }
 
 bool IsUnattachedGuestView(RenderFrameHost* rfh) {
-  if (base::FeatureList::IsEnabled(features::kGuestViewMPArch)) {
+  if (base::FeatureList::IsEnabled(::features::kGuestViewMPArch)) {
     NOTIMPLEMENTED();
     return false;
   } else {
--- a/content/browser/generic_sensor/frame_sensor_provider_proxy.cc
+++ b/content/browser/generic_sensor/frame_sensor_provider_proxy.cc
@@ -117,7 +117,7 @@
       break;
     default:
       if (!base::FeatureList::IsEnabled(
-              features::kAllowSensorsToEnterBfcache)) {
+              ::features::kAllowSensorsToEnterBfcache)) {
         static_cast<RenderFrameHostImpl*>(&render_frame_host())
             ->OnBackForwardCacheDisablingStickyFeatureUsed(
                 blink::scheduler::WebSchedulerTrackedFeature::
--- a/content/browser/gpu/gpu_data_manager_impl_private.cc
+++ b/content/browser/gpu/gpu_data_manager_impl_private.cc
@@ -404,7 +404,7 @@
   const base::CommandLine* command_line =
       base::CommandLine::ForCurrentProcess();
   return !command_line->HasSwitch(switches::kDisableSoftwareRasterizer) &&
-         features::IsSwiftShaderAllowed(command_line);
+         ::features::IsSwiftShaderAllowed(command_line);
 }
 
 // These values are logged to UMA. Entries should not be renumbered and numeric
--- a/content/browser/in_memory_federated_permission_context.cc
+++ b/content/browser/in_memory_federated_permission_context.cc
@@ -23,7 +23,7 @@
 content::FederatedIdentityApiPermissionContextDelegate::PermissionStatus
 InMemoryFederatedPermissionContext::GetApiPermissionStatus(
     const url::Origin& relying_party_embedder) {
-  if (!base::FeatureList::IsEnabled(features::kFedCm)) {
+  if (!base::FeatureList::IsEnabled(::features::kFedCm)) {
     return PermissionStatus::BLOCKED_VARIATIONS;
   }
 
--- a/content/browser/interest_group/ad_auction_service_impl.cc
+++ b/content/browser/interest_group/ad_auction_service_impl.cc
@@ -180,7 +180,7 @@
 // Used to get a possible override to the user-agent string.
 std::optional<std::string> MaybeGetUserAgentOverride(
     FrameTreeNode* frame_tree_node) {
-  if (base::FeatureList::IsEnabled(features::kFledgeEnableUserAgentOverrides)) {
+  if (base::FeatureList::IsEnabled(::features::kFledgeEnableUserAgentOverrides)) {
     if (frame_tree_node != nullptr) {
       const bool override_user_agent =
           frame_tree_node->navigator()
@@ -471,7 +471,7 @@
 
   // Try to preconnect to owner and bidding signals origins if this is an
   // on-device auction.
-  if (base::FeatureList::IsEnabled(features::kFledgeUsePreconnectCache) &&
+  if (base::FeatureList::IsEnabled(::features::kFledgeUsePreconnectCache) &&
       !config.server_response.has_value()) {
     size_t n_owners_cached = PreconnectToBuyerOrigins(config);
     for (const blink::AuctionConfig& component_config :
--- a/content/browser/interest_group/auction_process_manager.cc
+++ b/content/browser/interest_group/auction_process_manager.cc
@@ -94,7 +94,7 @@
   if (is_idle_) {
     remove_idle_process_from_manager_timer_.Start(
         FROM_HERE,
-        features::kFledgeStartAnticipatoryProcessExpirationTime.Get(),
+        ::features::kFledgeStartAnticipatoryProcessExpirationTime.Get(),
         base::BindOnce(&WorkletProcess::RemoveFromProcessManager,
                        base::Unretained(this),
                        /*on_destruction=*/false));
@@ -384,7 +384,7 @@
     SiteInstance* frame_site_instance,
     WorkletType worklet_type) {
   if (!base::FeatureList::IsEnabled(
-          features::kFledgeStartAnticipatoryProcesses)) {
+          ::features::kFledgeStartAnticipatoryProcesses)) {
     return;
   }
 
--- a/content/browser/interest_group/auction_url_loader_factory_proxy.cc
+++ b/content/browser/interest_group/auction_url_loader_factory_proxy.cc
@@ -315,7 +315,7 @@
     new_request.throttling_profile_id =
         owner_frame_tree_node->current_frame_host()->devtools_frame_token();
     if (base::FeatureList::IsEnabled(
-            features::kFledgeEnableUserAgentOverrides) &&
+            ::features::kFledgeEnableUserAgentOverrides) &&
         owner_frame_tree_node != nullptr) {
       const bool override_user_agent =
           owner_frame_tree_node->navigator()
--- a/content/browser/interest_group/auction_worklet_manager.cc
+++ b/content/browser/interest_group/auction_worklet_manager.cc
@@ -281,7 +281,7 @@
     // manages KVv2 fetches in the browser process, so don't need get a key to
     // pass to the worklet process. It's currently only supported for bidder
     // signals, though, so still need the key for seller signals.
-    if (!base::FeatureList::IsEnabled(features::kFledgeUseKVv2SignalsCache) ||
+    if (!base::FeatureList::IsEnabled(::features::kFledgeUseKVv2SignalsCache) ||
         worklet_info_.type != WorkletType::kBidder) {
       waiting_on_trusted_signals_kvv2_public_key_ = true;
       worklet_manager->delegate()->GetBiddingAndAuctionServerKey(
--- a/content/browser/interest_group/bidding_and_auction_response.cc
+++ b/content/browser/interest_group/bidding_and_auction_response.cc
@@ -270,7 +270,7 @@
 
   if (base::FeatureList::IsEnabled(
           blink::features::kFledgeAuctionDealSupport) &&
-      base::FeatureList::IsEnabled(features::kEnableBandADealSupport)) {
+      base::FeatureList::IsEnabled(::features::kEnableBandADealSupport)) {
     std::string* maybe_selected_buyer_and_seller_reporting_id =
         input_dict->FindString("selectedBuyerAndSellerReportingId");
     if (maybe_selected_buyer_and_seller_reporting_id) {
@@ -279,7 +279,7 @@
     }
   }
 
-  if (base::FeatureList::IsEnabled(features::kEnableBandAKAnonEnforcement)) {
+  if (base::FeatureList::IsEnabled(::features::kEnableBandAKAnonEnforcement)) {
     base::Value::Dict* k_anon_winner_join_candidate =
         input_dict->FindDict("kAnonWinnerJoinCandidates");
     if (k_anon_winner_join_candidate) {
@@ -297,7 +297,7 @@
 
   if (base::FeatureList::IsEnabled(blink::features::kPrivateAggregationApi) &&
       blink::features::kPrivateAggregationApiEnabledInProtectedAudience.Get() &&
-      base::FeatureList::IsEnabled(features::kEnableBandAPrivateAggregation)) {
+      base::FeatureList::IsEnabled(::features::kEnableBandAPrivateAggregation)) {
     const base::Value::List* pagg_response =
         input_dict->FindList("paggResponse");
     if (pagg_response) {
@@ -306,7 +306,7 @@
     }
   }
 
-  if (base::FeatureList::IsEnabled(features::kEnableBandASampleDebugReports)) {
+  if (base::FeatureList::IsEnabled(::features::kEnableBandASampleDebugReports)) {
     base::Value::List* for_debugging_only_reports =
         input_dict->FindList("debugReports");
     if (for_debugging_only_reports) {
@@ -315,7 +315,7 @@
   }
 
   base::Value::Dict* triggered_updates = input_dict->FindDict("updateGroups");
-  if (base::FeatureList::IsEnabled(features::kEnableBandATriggeredUpdates) &&
+  if (base::FeatureList::IsEnabled(::features::kEnableBandATriggeredUpdates) &&
       triggered_updates) {
     for (const auto owner_groups : *triggered_updates) {
       url::Origin owner = url::Origin::Create(GURL(owner_groups.first));
--- a/content/browser/interest_group/bidding_and_auction_serializer.cc
+++ b/content/browser/interest_group/bidding_and_auction_serializer.cc
@@ -105,7 +105,7 @@
 bool KAnonIsEnabled() {
   // K-anonymity enforcement is always disabled for the testing population.
   if (base::FeatureList::IsEnabled(
-          features::kCookieDeprecationFacilitatedTesting)) {
+          ::features::kCookieDeprecationFacilitatedTesting)) {
     return false;
   }
   return base::FeatureList::IsEnabled(
@@ -959,7 +959,7 @@
       TaggedStringLength(constexpr_strlen("requestTimestampMs")) +
       TaggedSIntLength(timestamp);
 
-  if (base::FeatureList::IsEnabled(features::kEnableBandAKAnonEnforcement) &&
+  if (base::FeatureList::IsEnabled(::features::kEnableBandAKAnonEnforcement) &&
       KAnonIsEnabled()) {
     message_obj[cbor::Value("enforceKAnon")] = cbor::Value(true);
     message_elements_size +=
--- a/content/browser/renderer_host/partitioned_popins/partitioned_popins_navigation_throttle.cc
+++ b/content/browser/renderer_host/partitioned_popins/partitioned_popins_navigation_throttle.cc
@@ -85,7 +85,7 @@
 
 bool PartitionedPopinsNavigationThrottle::DoesPopinPolicyBlockResponse() {
   if (base::FeatureList::IsEnabled(
-          features::kPartitionedPopinsHeaderPolicyBypass)) {
+          ::features::kPartitionedPopinsHeaderPolicyBypass)) {
     return false;
   }
   const net::HttpResponseHeaders* response_headers =
--- a/content/browser/site_instance_group_manager.cc
+++ b/content/browser/site_instance_group_manager.cc
@@ -21,7 +21,7 @@
 RenderProcessHost* SiteInstanceGroupManager::GetExistingGroupProcess(
     SiteInstanceImpl* site_instance) {
   if (!base::FeatureList::IsEnabled(
-          features::kProcessSharingWithStrictSiteInstances) ||
+          ::features::kProcessSharingWithStrictSiteInstances) ||
       !default_process_) {
     return nullptr;
   }
@@ -58,7 +58,7 @@
 void SiteInstanceGroupManager::MaybeSetDefaultProcess(
     SiteInstanceImpl* site_instance) {
   if (!base::FeatureList::IsEnabled(
-          features::kProcessSharingWithStrictSiteInstances)) {
+          ::features::kProcessSharingWithStrictSiteInstances)) {
     return;
   }
 
--- a/content/browser/site_instance_impl.cc
+++ b/content/browser/site_instance_impl.cc
@@ -1336,7 +1336,7 @@
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
 
   if (!base::FeatureList::IsEnabled(
-          features::kProcessSharingWithDefaultSiteInstances)) {
+          ::features::kProcessSharingWithDefaultSiteInstances)) {
     return false;
   }
 
@@ -1351,7 +1351,7 @@
   // site to have its own SiteInstance object and logic elsewhere ensures
   // that those SiteInstances share a process.
   if (base::FeatureList::IsEnabled(
-          features::kProcessSharingWithStrictSiteInstances)) {
+          ::features::kProcessSharingWithStrictSiteInstances)) {
     return false;
   }
 
@@ -1589,13 +1589,13 @@
   if (SiteInstanceImpl* default_instance =
           browsing_instance_->default_site_instance()) {
     DCHECK(base::FeatureList::IsEnabled(
-        features::kProcessSharingWithDefaultSiteInstances));
+        ::features::kProcessSharingWithDefaultSiteInstances));
     return default_instance->HasProcess() ? default_instance->GetProcess()
                                           : nullptr;
   }
   if (browsing_instance_->site_instance_group_manager().default_process()) {
     DCHECK(base::FeatureList::IsEnabled(
-        features::kProcessSharingWithStrictSiteInstances));
+        ::features::kProcessSharingWithStrictSiteInstances));
     return browsing_instance_->site_instance_group_manager().default_process();
   }
   return nullptr;
--- a/content/browser/storage_partition_impl.cc
+++ b/content/browser/storage_partition_impl.cc
@@ -1411,9 +1411,9 @@
   // traffic labels should not be sent for off-the-record profiles, unless the
   // "enable_otr_profiles" feature parameter is true.
   if (base::FeatureList::IsEnabled(
-          features::kCookieDeprecationFacilitatedTesting) &&
+          ::features::kCookieDeprecationFacilitatedTesting) &&
       (!is_in_memory() ||
-       features::kCookieDeprecationFacilitatedTestingEnableOTRProfiles.Get())) {
+       ::features::kCookieDeprecationFacilitatedTestingEnableOTRProfiles.Get())) {
     cookie_deprecation_label_manager_ =
         std::make_unique<CookieDeprecationLabelManagerImpl>(browser_context_);
   }
--- a/content/browser/tracing/tracing_service_controller.cc
+++ b/content/browser/tracing/tracing_service_controller.cc
@@ -78,7 +78,7 @@
 
   if (!service_) {
     auto receiver = service_.BindNewPipeAndPassReceiver();
-    if (base::FeatureList::IsEnabled(features::kTracingServiceInProcess)) {
+    if (base::FeatureList::IsEnabled(::features::kTracingServiceInProcess)) {
       base::ThreadPool::CreateSequencedTaskRunner(
           {base::MayBlock(), base::TaskShutdownBehavior::SKIP_ON_SHUTDOWN,
            base::WithBaseSyncPrimitives(), base::TaskPriority::USER_BLOCKING})
--- a/content/browser/video_capture_service_impl.cc
+++ b/content/browser/video_capture_service_impl.cc
@@ -152,7 +152,7 @@
   auto& remote = GetUIThreadRemote();
   if (!remote.is_bound()) {
     auto receiver = remote.BindNewPipeAndPassReceiver();
-    if (features::IsVideoCaptureServiceEnabledForBrowserProcess()) {
+    if (::features::IsVideoCaptureServiceEnabledForBrowserProcess()) {
       auto dedicated_task_runner = CREATE_IN_PROCESS_TASK_RUNNER(
           {base::MayBlock(), base::WithBaseSyncPrimitives(),
            base::TaskPriority::BEST_EFFORT},
--- a/content/browser/media/media_license_storage_host.cc
+++ b/content/browser/media/media_license_storage_host.cc
@@ -29,11 +29,11 @@
 namespace content {
 
 namespace {
-constexpr uint64_t kBytesPerKB = 1024;
-constexpr int kMinDatabaseSizeKB = 0;
+constexpr uint64_t kBytesPerKB2 = 1024;
+constexpr int kMinDatabaseSizeKB2 = 0;
 // Used for histogram reporting, the max size of the database we expect in KB.
-constexpr uint64_t kMaxDatabaseSizeKB = 512000 * 10;
-constexpr int kSizeKBBuckets = 1000;
+constexpr uint64_t kMaxDatabaseSizeKB2 = 512000 * 10;
+constexpr int kSizeKBBuckets2 = 1000;
 }  // namespace
 
 // static
@@ -215,8 +215,8 @@
 
   base::UmaHistogramCustomCounts(
       "Media.EME.MediaLicenseStorageHost.CurrentDatabaseUsageKB",
-      size / kBytesPerKB, kMinDatabaseSizeKB, kMaxDatabaseSizeKB,
-      kSizeKBBuckets);
+      size / kBytesPerKB2, kMinDatabaseSizeKB2, kMaxDatabaseSizeKB2,
+      kSizeKBBuckets2);
 
   database_size_reported_ = true;
 }
