From 1b7193abe207808e7c2bff7c47a0ef4c6484a3fd Mon Sep 17 00:00:00 2001
From: Chongyun Lee <licy183@termux.dev>
Date: Sun Apr 20 23:55:52 2025 +0800
Subject: [PATCH] reland jumbo 3

Enable jumbo build for the following component(s)/source_set(s):

- //net:net
- //net/dns:dns

---
 net/BUILD.gn                                     | 10 +++++++++-
 net/base/host_port_pair.cc                       |  4 ++++
 net/base/ip_endpoint.cc                          |  4 ++++
 net/dns/BUILD.gn                                 |  3 ++-
 net/dns/dns_response.cc                          |  4 ++++
 net/dns/host_cache.cc                            |  8 ++++++++
 net/dns/host_resolver_cache.cc                   |  4 ++++
 net/dns/host_resolver_dns_task.cc                |  4 ++++
 net/dns/host_resolver_internal_result.cc         |  6 ++++++
 net/dns/host_resolver_manager.cc                 |  4 ++++
 net/filter/filter_source_stream.cc               |  5 ++++-
 net/filter/gzip_source_stream.cc                 |  4 +++-
 net/http/http_cache_transaction.cc               |  4 ++++
 net/http/http_proxy_connect_job.cc               |  4 ++++
 net/http/http_server_properties_manager.cc       |  4 ++++
 net/http/http_stream_factory_job.cc              |  4 ++++
 net/http/http_stream_factory_job_controller.cc   |  4 ++++
 net/http/transport_security_persister.cc         |  6 ++++++
 .../network_error_logging_service.cc             | 10 ++++++++++
 .../configured_proxy_resolution_service.cc       | 10 +++++++++-
 net/proxy_resolution/proxy_config_service.cc     | 10 +++++++---
 net/quic/bidirectional_stream_quic_impl.cc       |  4 ++++
 net/quic/dedicated_web_transport_http3_client.cc |  4 ++++
 net/quic/quic_chromium_client_stream.cc          |  4 ++++
 net/quic/quic_session_pool.cc                    |  4 ++++
 net/reporting/reporting_header_parser.cc         |  6 ++++++
 net/reporting/reporting_service.cc               |  6 ++++++
 net/server/web_socket_encoder.cc                 | 14 ++++++++++++++
 net/url_request/url_request_error_job.cc         |  4 ++++
 net/url_request/url_request_http_job.cc          |  4 ++++
 net/url_request/url_request_job.cc               |  4 ++++
 net/url_request/url_request_redirect_job.cc      |  4 ++++
 net/websockets/websocket_channel.cc              |  4 ++++
 net/websockets/websocket_frame.cc                | 16 ++++++++++++++++
 .../websocket_http2_handshake_stream.cc          |  4 ++++
 .../websocket_http3_handshake_stream.cc          |  4 ++++
 36 files changed, 194 insertions(+), 8 deletions(-)

diff --git a/net/BUILD.gn b/net/BUILD.gn
index 5af55015bd..dd7e61a423 100644
--- a/net/BUILD.gn
+++ b/net/BUILD.gn
@@ -7,6 +7,7 @@ import("//build/config/cast.gni")
 import("//build/config/compiler/compiler.gni")
 import("//build/config/cronet/config.gni")
 import("//build/config/features.gni")
+import("//build/config/jumbo.gni")
 import("//crypto/features.gni")
 import("//net/features.gni")
 import("//testing/libfuzzer/fuzzer_test.gni")
@@ -152,7 +153,7 @@ proto_library("device_bound_sessions_storage_proto") {
   sources = [ "device_bound_sessions/proto/storage.proto" ]
 }
 
-component("net") {
+jumbo_component("net") {
   sources = [
     "base/address_family.cc",
     "base/address_family.h",
@@ -1139,6 +1140,9 @@ component("net") {
     "url_request/websocket_handshake_userdata_key.cc",
     "url_request/websocket_handshake_userdata_key.h",
   ]
+  jumbo_excluded_sources = [
+    "spdy/spdy_stream.cc", # Fail to compile due to function name confliction
+  ]
 
   if (is_posix || is_fuchsia) {
     sources += [ "base/net_errors_posix.cc" ]
@@ -1347,6 +1351,10 @@ component("net") {
       "base/network_interfaces_linux.h",
       "base/platform_mime_util_linux.cc",
     ]
+    jumbo_excluded_sources += [
+      "base/address_tracker_linux.cc",     # Fail to compile due to the confliction between `linux/if.h` and `net/if.h`
+      "base/network_interfaces_linux.cc",  # Ditto
+    ]
   }
 
   if (is_linux) {
diff --git a/net/base/host_port_pair.cc b/net/base/host_port_pair.cc
index 1103287fc3..356042489f 100644
--- a/net/base/host_port_pair.cc
+++ b/net/base/host_port_pair.cc
@@ -20,6 +20,8 @@
 #include "url/gurl.h"
 #include "url/scheme_host_port.h"
 
+#define kValuePortKey kValuePortKey_HostPortPair
+
 namespace net {
 
 namespace {
@@ -139,3 +141,5 @@ base::Value HostPortPair::ToValue() const {
 }
 
 }  // namespace net
+
+#undef kValuePortKey
diff --git a/net/base/ip_endpoint.cc b/net/base/ip_endpoint.cc
index 9396da7226..a202d67147 100644
--- a/net/base/ip_endpoint.cc
+++ b/net/base/ip_endpoint.cc
@@ -37,6 +37,8 @@
 #include <net/if.h>
 #endif
 
+#define kValuePortKey kValuePortKey_IPEndPoint
+
 namespace net {
 
 namespace {
@@ -318,3 +320,5 @@ std::ostream& operator<<(std::ostream& os, const IPEndPoint& ip_endpoint) {
 }
 
 }  // namespace net
+
+#undef kValuePortKey
diff --git a/net/dns/BUILD.gn b/net/dns/BUILD.gn
index 2a70752c12..90de6526db 100644
--- a/net/dns/BUILD.gn
+++ b/net/dns/BUILD.gn
@@ -2,13 +2,14 @@
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
 
+import("//build/config/jumbo.gni")
 import("//net/features.gni")
 import("//testing/libfuzzer/fuzzer_test.gni")
 import("//third_party/protobuf/proto_library.gni")
 
 enable_built_in_dns = use_blink
 
-source_set("dns") {
+jumbo_source_set("dns") {
   # Due to circular dependencies, should only be depended on through //net.
   visibility = [
     "//net",
diff --git a/net/dns/dns_response.cc b/net/dns/dns_response.cc
index 8e60c2a977..27ee64b706 100644
--- a/net/dns/dns_response.cc
+++ b/net/dns/dns_response.cc
@@ -32,6 +32,8 @@
 #include "net/dns/public/dns_protocol.h"
 #include "net/dns/record_rdata.h"
 
+#define kHeaderSize kHeaderSize_DnsResponse
+
 namespace net {
 
 namespace {
@@ -627,3 +629,5 @@ bool DnsResponse::WriteAnswer(base::SpanWriter<uint8_t>* writer,
 }
 
 }  // namespace net
+
+#undef kHeaderSize
diff --git a/net/dns/host_cache.cc b/net/dns/host_cache.cc
index e9043595ab..3769ccb70c 100644
--- a/net/dns/host_cache.cc
+++ b/net/dns/host_cache.cc
@@ -44,6 +44,10 @@
 #include "net/log/net_log.h"
 #include "url/scheme_host_port.h"
 
+#define kSecureKey                    kSecureKey_HostCache
+#define EndpointMetadataPairToValue   EndpointMetadataPairToValue_HostCache
+#define EndpointMetadataPairFromValue EndpointMetadataPairFromValue_HostCache
+
 namespace net {
 
 namespace {
@@ -1317,3 +1321,7 @@ std::ostream& operator<<(std::ostream& out,
   return out << "EntryStaleness{" << s.expired_by << ", " << s.network_changes
              << ", " << s.stale_hits << "}";
 }
+
+#undef kSecureKey
+#undef EndpointMetadataPairToValue
+#undef EndpointMetadataPairFromValue
diff --git a/net/dns/host_resolver_cache.cc b/net/dns/host_resolver_cache.cc
index 93032e14bb..a8e8ce6f22 100644
--- a/net/dns/host_resolver_cache.cc
+++ b/net/dns/host_resolver_cache.cc
@@ -24,6 +24,8 @@
 #include "url/url_canon.h"
 #include "url/url_canon_stdstring.h"
 
+#define kSecureKey kSecureKey_HostResolverCache
+
 namespace net {
 
 namespace {
@@ -453,3 +455,5 @@ base::Value HostResolverCache::SerializeEntries(
 }
 
 }  // namespace net
+
+#undef kSecureKey
diff --git a/net/dns/host_resolver_dns_task.cc b/net/dns/host_resolver_dns_task.cc
index 7a32ae4337..95440125af 100644
--- a/net/dns/host_resolver_dns_task.cc
+++ b/net/dns/host_resolver_dns_task.cc
@@ -25,6 +25,8 @@
 #include "net/dns/host_resolver_internal_result.h"
 #include "net/dns/public/util.h"
 
+#define NetLogResults NetLogResults_HostResolverDnsTask
+
 namespace net {
 
 // When enabled, query HTTPS RR first.
@@ -1178,3 +1180,5 @@ bool HostResolverDnsTask::ShouldTriggerHttpToHttpsUpgrade(
 }
 
 }  // namespace net
+
+#undef NetLogResults
diff --git a/net/dns/host_resolver_internal_result.cc b/net/dns/host_resolver_internal_result.cc
index afaf662c21..df2c1ec958 100644
--- a/net/dns/host_resolver_internal_result.cc
+++ b/net/dns/host_resolver_internal_result.cc
@@ -27,6 +27,9 @@
 #include "url/url_canon.h"
 #include "url/url_canon_stdstring.h"
 
+#define EndpointMetadataPairToValue   EndpointMetadataPairToValue_HostResolverInternalResult
+#define EndpointMetadataPairFromValue EndpointMetadataPairFromValue_HostResolverInternalResult
+
 namespace net {
 
 namespace {
@@ -635,3 +638,6 @@ HostResolverInternalAliasResult::HostResolverInternalAliasResult(
       alias_target_(MaybeCanonicalizeName(std::move(alias_target))) {}
 
 }  // namespace net
+
+#undef EndpointMetadataPairToValue
+#undef EndpointMetadataPairFromValue
diff --git a/net/dns/host_resolver_manager.cc b/net/dns/host_resolver_manager.cc
index e23ea3fe98..3949ff88cf 100644
--- a/net/dns/host_resolver_manager.cc
+++ b/net/dns/host_resolver_manager.cc
@@ -140,6 +140,8 @@
 #endif  // BUILDFLAG(IS_ANDROID)
 #endif  // BUILDFLAG(IS_POSIX) || BUILDFLAG(IS_FUCHSIA)
 
+#define NetLogResults NetLogResults_HostResolverManager
+
 namespace net {
 
 namespace {
@@ -1842,3 +1844,5 @@ std::unique_ptr<DnsProbeRunner> HostResolverManager::CreateDohProbeRunner(
 }
 
 }  // namespace net
+
+#undef NetLogResults
diff --git a/net/filter/filter_source_stream.cc b/net/filter/filter_source_stream.cc
index 076141503b..dbc2fa60fb 100644
--- a/net/filter/filter_source_stream.cc
+++ b/net/filter/filter_source_stream.cc
@@ -29,7 +29,7 @@
 
 namespace net {
 
-namespace {
+namespace filter_source_stream {
 
 constexpr char kDeflate[] = "deflate";
 constexpr char kGZip[] = "gzip";
@@ -52,6 +52,7 @@ FilterSourceStream::~FilterSourceStream() = default;
 int FilterSourceStream::Read(IOBuffer* read_buffer,
                              int read_buffer_size,
                              CompletionOnceCallback callback) {
+  using namespace filter_source_stream;
   DCHECK_EQ(STATE_NONE, next_state_);
   DCHECK(read_buffer);
   DCHECK_LT(0, read_buffer_size);
@@ -89,6 +90,7 @@ bool FilterSourceStream::MayHaveMoreBytes() const {
 
 SourceStreamType FilterSourceStream::ParseEncodingType(
     std::string_view encoding) {
+  using namespace filter_source_stream;
   std::string lower_encoding = base::ToLowerASCII(encoding);
   static constexpr auto kEncodingMap =
       base::MakeFixedFlatMap<std::string_view, SourceStreamType>({
@@ -202,6 +204,7 @@ int FilterSourceStream::DoLoop(int result) {
 }
 
 int FilterSourceStream::DoReadData() {
+  using namespace filter_source_stream;
   // Read more data means subclasses have consumed all input or this is the
   // first read in which case the |drainable_input_buffer_| is not initialized.
   DCHECK(drainable_input_buffer_ == nullptr ||
diff --git a/net/filter/gzip_source_stream.cc b/net/filter/gzip_source_stream.cc
index f25eed8ac6..2c325feebd 100644
--- a/net/filter/gzip_source_stream.cc
+++ b/net/filter/gzip_source_stream.cc
@@ -26,7 +26,7 @@
 
 namespace net {
 
-namespace {
+namespace gzip_source_stream {
 
 const char kDeflate[] = "DEFLATE";
 const char kGzip[] = "GZIP";
@@ -77,6 +77,7 @@ bool GzipSourceStream::Init() {
 }
 
 std::string GzipSourceStream::GetTypeAsString() const {
+  using namespace gzip_source_stream;
   switch (type()) {
     case SourceStreamType::kGzip:
       return kGzip;
@@ -94,6 +95,7 @@ base::expected<size_t, Error> GzipSourceStream::FilterData(
     size_t input_buffer_size,
     size_t* consumed_bytes,
     bool upstream_end_reached) {
+  using namespace gzip_source_stream;
   *consumed_bytes = 0;
 
   // Span that tracks the portion of `input_buffer` that has not yet been
diff --git a/net/http/http_cache_transaction.cc b/net/http/http_cache_transaction.cc
index 369ec46120..ca7fe1d2ce 100644
--- a/net/http/http_cache_transaction.cc
+++ b/net/http/http_cache_transaction.cc
@@ -72,6 +72,8 @@
 using base::Time;
 using base::TimeTicks;
 
+#define TaskRunner TaskRunner_HttpCacheTransaction
+
 namespace net {
 
 using CacheEntryStatus = HttpResponseInfo::CacheEntryStatus;
@@ -4228,3 +4230,5 @@ void HttpCache::Transaction::EnsureMutableRequest() {
 }
 
 }  // namespace net
+
+#undef TaskRunner
diff --git a/net/http/http_proxy_connect_job.cc b/net/http/http_proxy_connect_job.cc
index a34459b3f3..e2d7f0102c 100644
--- a/net/http/http_proxy_connect_job.cc
+++ b/net/http/http_proxy_connect_job.cc
@@ -54,6 +54,8 @@
 #include "url/gurl.h"
 #include "url/scheme_host_port.h"
 
+#define TaskRunner TaskRunner_HttpProxyConnectJob
+
 namespace net {
 
 namespace {
@@ -1008,3 +1010,5 @@ void HttpProxyConnectJob::EmitConnectLatency(NextProto http_version,
 }
 
 }  // namespace net
+
+#undef TaskRunner
diff --git a/net/http/http_server_properties_manager.cc b/net/http/http_server_properties_manager.cc
index ebaa8e9a5e..1f295d4f83 100644
--- a/net/http/http_server_properties_manager.cc
+++ b/net/http/http_server_properties_manager.cc
@@ -29,6 +29,8 @@
 #include "url/gurl.h"
 #include "url/scheme_host_port.h"
 
+#define kVersionKey kVersionKey_HTTPServerPropertiesManager
+
 namespace net {
 
 namespace {
@@ -1011,3 +1013,5 @@ void HttpServerPropertiesManager::OnHttpServerPropertiesLoaded() {
 }
 
 }  // namespace net
+
+#undef kVersionKey
diff --git a/net/http/http_stream_factory_job.cc b/net/http/http_stream_factory_job.cc
index d2ff50d380..09aee680f5 100644
--- a/net/http/http_stream_factory_job.cc
+++ b/net/http/http_stream_factory_job.cc
@@ -56,6 +56,8 @@
 #include "url/scheme_host_port.h"
 #include "url/url_constants.h"
 
+#define TaskRunner TaskRunner_HttpStreamFactoryJob
+
 namespace net {
 
 namespace {
@@ -1349,3 +1351,5 @@ void HttpStreamFactory::Job::RecordCompletionHistograms(int result) {
 }
 
 }  // namespace net
+
+#undef TaskRunner
diff --git a/net/http/http_stream_factory_job_controller.cc b/net/http/http_stream_factory_job_controller.cc
index a49e20c52c..f8e8c4757c 100644
--- a/net/http/http_stream_factory_job_controller.cc
+++ b/net/http/http_stream_factory_job_controller.cc
@@ -45,6 +45,8 @@
 #include "url/scheme_host_port.h"
 #include "url/url_constants.h"
 
+#define TaskRunner TaskRunner_HttpStreamJobFactoryJobController
+
 namespace net {
 
 namespace {
@@ -1559,3 +1561,5 @@ void HttpStreamFactory::JobController::OnPoolPreconnectsComplete(int rv) {
 }
 
 }  // namespace net
+
+#undef TaskRunner
diff --git a/net/http/transport_security_persister.cc b/net/http/transport_security_persister.cc
index 88553f5da3..9beacacd41 100644
--- a/net/http/transport_security_persister.cc
+++ b/net/http/transport_security_persister.cc
@@ -30,6 +30,9 @@
 #include "net/cert/x509_certificate.h"
 #include "net/http/transport_security_state.h"
 
+#define kVersionKey kVersionKey_TransportSecurityPersister
+#define LoadState   LoadState_TransportSecurityPersister
+
 namespace net {
 
 BASE_FEATURE(kTransportSecurityFileWriterSchedule,
@@ -323,3 +326,6 @@ void TransportSecurityPersister::CompleteLoad(const std::string& state) {
 }
 
 }  // namespace net
+
+#undef kVersionKey
+#undef LoadState
diff --git a/net/network_error_logging/network_error_logging_service.cc b/net/network_error_logging/network_error_logging_service.cc
index 6cfb23ce25..6fb6719545 100644
--- a/net/network_error_logging/network_error_logging_service.cc
+++ b/net/network_error_logging/network_error_logging_service.cc
@@ -34,6 +34,11 @@
 #include "url/gurl.h"
 #include "url/origin.h"
 
+#define kIncludeSubdomainsKey kIncludeSubdomainsKey_NetworkErrorLoggingService
+#define kMaxAgeKey            kMaxAgeKey_NetworkErrorLoggingService
+#define kMaxJsonSize          kMaxJsonSize_NetworkErrorLoggingService
+#define kMaxJsonDepth         kMaxJsonDepth_NetworkErrorLoggingService
+
 namespace net {
 
 namespace {
@@ -1064,3 +1069,8 @@ NetworkErrorLoggingService::NetworkErrorLoggingService()
     : clock_(base::DefaultClock::GetInstance()) {}
 
 }  // namespace net
+
+#undef kIncludeSubdomainsKey
+#undef kMaxAgeKey
+#undef kMaxJsonSize
+#undef kMaxJsonDepth
diff --git a/net/proxy_resolution/configured_proxy_resolution_service.cc b/net/proxy_resolution/configured_proxy_resolution_service.cc
index 82c6860602..cfe77c50ef 100644
--- a/net/proxy_resolution/configured_proxy_resolution_service.cc
+++ b/net/proxy_resolution/configured_proxy_resolution_service.cc
@@ -161,6 +161,10 @@ class DefaultPollPolicy
   }
 };
 
+}  // namespace
+
+namespace configured_proxy_resolution_service {
+
 // Config getter that always returns direct settings.
 class ProxyConfigServiceDirect : public ProxyConfigService {
  public:
@@ -174,6 +178,10 @@ class ProxyConfigServiceDirect : public ProxyConfigService {
   }
 };
 
+}  // namespace configured_proxy_resolution_service
+
+namespace {
+
 // Proxy resolver that fails every time.
 class ProxyResolverNull : public ProxyResolver {
  public:
@@ -895,7 +903,7 @@ std::unique_ptr<ConfiguredProxyResolutionService>
 ConfiguredProxyResolutionService::CreateDirect() {
   // Use direct connections.
   return std::make_unique<ConfiguredProxyResolutionService>(
-      std::make_unique<ProxyConfigServiceDirect>(),
+      std::make_unique<configured_proxy_resolution_service::ProxyConfigServiceDirect>(),
       std::make_unique<ProxyResolverFactoryForNullResolver>(), nullptr,
       /*quick_check_enabled=*/true);
 }
diff --git a/net/proxy_resolution/proxy_config_service.cc b/net/proxy_resolution/proxy_config_service.cc
index e32f7dd46b..25c271441b 100644
--- a/net/proxy_resolution/proxy_config_service.cc
+++ b/net/proxy_resolution/proxy_config_service.cc
@@ -75,6 +75,10 @@ class UnsetProxyConfigService : public ProxyConfigService {
 };
 #endif
 
+}  // namespace
+
+namespace proxy_config_service {
+
 // Config getter that always returns direct settings.
 class ProxyConfigServiceDirect : public ProxyConfigService {
  public:
@@ -88,7 +92,7 @@ class ProxyConfigServiceDirect : public ProxyConfigService {
   }
 };
 
-}  // namespace
+}  // namespace proxy_config_service
 
 // static
 std::unique_ptr<ProxyConfigService>
@@ -133,11 +137,11 @@ ProxyConfigService::CreateSystemProxyConfigService(
       base::SingleThreadTaskRunner::GetCurrentDefault());
 #elif BUILDFLAG(IS_FUCHSIA)
   // TODO(crbug.com/42050626): Implement a system proxy service for Fuchsia.
-  return std::make_unique<ProxyConfigServiceDirect>();
+  return std::make_unique<proxy_config_service::ProxyConfigServiceDirect>();
 #else
   LOG(WARNING) << "Failed to choose a system proxy settings fetcher "
                   "for this platform.";
-  return std::make_unique<ProxyConfigServiceDirect>();
+  return std::make_unique<proxy_config_service::ProxyConfigServiceDirect>();
 #endif
 }
 
diff --git a/net/quic/bidirectional_stream_quic_impl.cc b/net/quic/bidirectional_stream_quic_impl.cc
index 83bf267ae0..141591c353 100644
--- a/net/quic/bidirectional_stream_quic_impl.cc
+++ b/net/quic/bidirectional_stream_quic_impl.cc
@@ -19,6 +19,8 @@
 #include "net/third_party/quiche/src/quiche/quic/core/quic_connection.h"
 #include "quic_http_stream.h"
 
+#define ScopedBoolSaver ScopedBoolSaver_BidirectionalStreamQuicImpl
+
 namespace net {
 namespace {
 // Sets a boolean to a value, and restores it to the previous value once
@@ -408,3 +410,5 @@ void BidirectionalStreamQuicImpl::ResetStream() {
 }
 
 }  // namespace net
+
+#undef ScopedBoolSaver
diff --git a/net/quic/dedicated_web_transport_http3_client.cc b/net/quic/dedicated_web_transport_http3_client.cc
index fe8547b0ce..5ab7727dc5 100644
--- a/net/quic/dedicated_web_transport_http3_client.cc
+++ b/net/quic/dedicated_web_transport_http3_client.cc
@@ -32,6 +32,8 @@
 #include "net/url_request/url_request_context.h"
 #include "url/scheme_host_port.h"
 
+#define HostsFromOrigins HostsFromOrigins_DedicatedWebTransportHTTP3Client
+
 namespace net {
 
 namespace {
@@ -997,3 +999,5 @@ void DedicatedWebTransportHttp3Client::OnDatagramProcessed(
 }
 
 }  // namespace net
+
+#undef HostsFromOrigins
diff --git a/net/quic/quic_chromium_client_stream.cc b/net/quic/quic_chromium_client_stream.cc
index 1a267f5f48..082b3bdca6 100644
--- a/net/quic/quic_chromium_client_stream.cc
+++ b/net/quic/quic_chromium_client_stream.cc
@@ -30,6 +30,8 @@
 #include "net/third_party/quiche/src/quiche/quic/core/quic_utils.h"
 #include "net/third_party/quiche/src/quiche/quic/core/quic_write_blocked_list.h"
 
+#define ScopedBoolSaver ScopedBoolSaver_QuicChromiumClientStream
+
 namespace net {
 namespace {
 // Sets a boolean to a value, and restores it to the previous value once
@@ -928,3 +930,5 @@ bool QuicChromiumClientStream::IsFirstStream() {
 }
 
 }  // namespace net
+
+#undef ScopedBoolSaver
diff --git a/net/quic/quic_session_pool.cc b/net/quic/quic_session_pool.cc
index fd239e0b51..fac662141c 100644
--- a/net/quic/quic_session_pool.cc
+++ b/net/quic/quic_session_pool.cc
@@ -90,6 +90,8 @@
 #include "url/scheme_host_port.h"
 #include "url/url_constants.h"
 
+#define HostsFromOrigins HostsFromOrigins_QuicSessionPool
+
 namespace net {
 
 namespace {
@@ -2466,3 +2468,5 @@ bool QuicSessionPool::CryptoConfigCacheIsEmptyForTesting(
 }
 
 }  // namespace net
+
+#undef HostsFromOrigins
diff --git a/net/reporting/reporting_header_parser.cc b/net/reporting/reporting_header_parser.cc
index 7d57516e73..4276f0fe58 100644
--- a/net/reporting/reporting_header_parser.cc
+++ b/net/reporting/reporting_header_parser.cc
@@ -25,6 +25,9 @@
 #include "net/reporting/reporting_endpoint.h"
 #include "net/reporting/reporting_target_type.h"
 
+#define kIncludeSubdomainsKey kIncludeSubdomainsKey_ReportingHeaderParser
+#define kMaxAgeKey            kMaxAgeKey_ReportingHeaderParser
+
 namespace net {
 
 namespace {
@@ -375,3 +378,6 @@ void ReportingHeaderParser::ProcessParsedReportingEndpointsHeader(
 }
 
 }  // namespace net
+
+#undef kIncludeSubdomainsKey
+#undef kMaxAgeKey
diff --git a/net/reporting/reporting_service.cc b/net/reporting/reporting_service.cc
index 8daacdc85d..4171afe33e 100644
--- a/net/reporting/reporting_service.cc
+++ b/net/reporting/reporting_service.cc
@@ -30,6 +30,9 @@
 #include "url/gurl.h"
 #include "url/origin.h"
 
+#define kMaxJsonSize  kMaxJsonSize_ReportingService
+#define kMaxJsonDepth kMaxJsonDepth_ReportingService
+
 namespace net {
 
 namespace {
@@ -370,3 +373,6 @@ base::Value ReportingService::StatusAsValue() const {
 }
 
 }  // namespace net
+
+#undef kMaxJsonSize
+#undef kMaxJsonDepth
diff --git a/net/server/web_socket_encoder.cc b/net/server/web_socket_encoder.cc
index 569dc3587c..d7cd5945d1 100644
--- a/net/server/web_socket_encoder.cc
+++ b/net/server/web_socket_encoder.cc
@@ -23,6 +23,13 @@
 #include "net/websockets/websocket_extension_parser.h"
 #include "net/websockets/websocket_frame.h"
 
+#define kFinalBit     kFinalBit_WebSocketEncoder
+#define kReserved1Bit kReserved1Bit_WebSocketEncoder
+#define kReserved2Bit kReserved2Bit_WebSocketEncoder
+#define kReserved3Bit kReserved3Bit_WebSocketEncoder
+#define kOpCodeMask   kOpCodeMask_WebSocketEncoder
+#define kMaskBit      kMaskBit_WebSocketEncoder
+
 namespace net {
 
 NET_EXPORT
@@ -409,3 +416,10 @@ bool WebSocketEncoder::Deflate(std::string_view message, std::string* output) {
 }
 
 }  // namespace net
+
+#undef kFinalBit
+#undef kReserved1Bit
+#undef kReserved2Bit
+#undef kReserved3Bit
+#undef kOpCodeMask
+#undef kMaskBit
diff --git a/net/url_request/url_request_error_job.cc b/net/url_request/url_request_error_job.cc
index 6d9a7d4394..5f58a96b9c 100644
--- a/net/url_request/url_request_error_job.cc
+++ b/net/url_request/url_request_error_job.cc
@@ -12,6 +12,8 @@
 #include "net/base/net_errors.h"
 #include "net/base/task/task_runner.h"
 
+#define TaskRunner TaskRunner_URLRequestErrorJob
+
 namespace net {
 
 namespace {
@@ -46,3 +48,5 @@ void URLRequestErrorJob::StartAsync() {
 }
 
 }  // namespace net
+
+#undef TaskRunner
diff --git a/net/url_request/url_request_http_job.cc b/net/url_request/url_request_http_job.cc
index f25e19b68c..6ea5a97112 100644
--- a/net/url_request/url_request_http_job.cc
+++ b/net/url_request/url_request_http_job.cc
@@ -114,6 +114,8 @@
 #include "net/device_bound_sessions/session_service.h"
 #endif  // BUILDFLAG(ENABLE_DEVICE_BOUND_SESSIONS)
 
+#define TaskRunner TaskRunner_URLRequestHttpJob
+
 namespace net {
 
 namespace {
@@ -2178,3 +2180,5 @@ bool URLRequestHttpJob::ShouldRecordPartitionedCookieUsage() const {
 }
 
 }  // namespace net
+
+#undef TaskRunner
diff --git a/net/url_request/url_request_job.cc b/net/url_request/url_request_job.cc
index ff36f3719d..b4a2ac28a9 100644
--- a/net/url_request/url_request_job.cc
+++ b/net/url_request/url_request_job.cc
@@ -40,6 +40,8 @@
 #include "net/url_request/redirect_util.h"
 #include "net/url_request/url_request_context.h"
 
+#define TaskRunner TaskRunner_URLRequestJob
+
 namespace net {
 
 namespace {
@@ -775,3 +777,5 @@ void URLRequestJob::RecordBytesRead(int bytes_read) {
 }
 
 }  // namespace net
+
+#undef TaskRunner
diff --git a/net/url_request/url_request_redirect_job.cc b/net/url_request/url_request_redirect_job.cc
index 270cbfcf40..19f5805390 100644
--- a/net/url_request/url_request_redirect_job.cc
+++ b/net/url_request/url_request_redirect_job.cc
@@ -27,6 +27,8 @@
 #include "net/url_request/url_request.h"
 #include "net/url_request/url_request_job.h"
 
+#define TaskRunner TaskRunner_URLRequestRedirectJob
+
 namespace net {
 
 namespace {
@@ -117,3 +119,5 @@ void URLRequestRedirectJob::StartAsync() {
 }
 
 }  // namespace net
+
+#undef TaskRunner
diff --git a/net/websockets/websocket_channel.cc b/net/websockets/websocket_channel.cc
index 4386152625..3a1ac9d745 100644
--- a/net/websockets/websocket_channel.cc
+++ b/net/websockets/websocket_channel.cc
@@ -43,6 +43,8 @@
 #include "net/websockets/websocket_handshake_response_info.h"
 #include "net/websockets/websocket_stream.h"
 
+#define kWebSocketCloseCodeLength kWebSocketCloseCodeLength_WebSocketChannel
+
 namespace net {
 class AuthChallengeInfo;
 class AuthCredentials;
@@ -982,3 +984,5 @@ void WebSocketChannel::CloseTimeout() {
 }
 
 }  // namespace net
+
+#undef kWebSocketCloseCodeLength
diff --git a/net/websockets/websocket_frame.cc b/net/websockets/websocket_frame.cc
index 59fdd30682..0c3c8207d9 100644
--- a/net/websockets/websocket_frame.cc
+++ b/net/websockets/websocket_frame.cc
@@ -22,6 +22,14 @@
 #include "net/base/net_errors.h"
 #include "net/websockets/websocket_errors.h"
 
+#define kWebSocketCloseCodeLength kWebSocketCloseCodeLength_WebSocketFrame
+#define kFinalBit                 kFinalBit_WebSocketFrame
+#define kReserved1Bit             kReserved1Bit_WebSocketFrame
+#define kReserved2Bit             kReserved2Bit_WebSocketFrame
+#define kReserved3Bit             kReserved3Bit_WebSocketFrame
+#define kOpCodeMask               kOpCodeMask_WebSocketFrame
+#define kMaskBit                  kMaskBit_WebSocketFrame
+
 namespace net {
 
 namespace {
@@ -308,3 +316,11 @@ ParseCloseFrameResult ParseCloseFrame(base::span<const char> payload) {
 }
 
 }  // namespace net
+
+#undef kWebSocketCloseCodeLength
+#undef kFinalBit
+#undef kReserved1Bit
+#undef kReserved2Bit
+#undef kReserved3Bit
+#undef kOpCodeMask
+#undef kMaskBit
diff --git a/net/websockets/websocket_http2_handshake_stream.cc b/net/websockets/websocket_http2_handshake_stream.cc
index 2ee6bcf5e2..f6507e45aa 100644
--- a/net/websockets/websocket_http2_handshake_stream.cc
+++ b/net/websockets/websocket_http2_handshake_stream.cc
@@ -34,6 +34,8 @@
 #include "net/websockets/websocket_handshake_constants.h"
 #include "net/websockets/websocket_handshake_request_info.h"
 
+#define ValidateStatus ValidateStatus_WebSocketHttp2HandshakeStream
+
 namespace net {
 
 namespace {
@@ -419,3 +421,5 @@ void WebSocketHttp2HandshakeStream::OnFailure(
 }
 
 }  // namespace net
+
+#undef ValidateStatus
diff --git a/net/websockets/websocket_http3_handshake_stream.cc b/net/websockets/websocket_http3_handshake_stream.cc
index 41ba26fe48..55f5657768 100644
--- a/net/websockets/websocket_http3_handshake_stream.cc
+++ b/net/websockets/websocket_http3_handshake_stream.cc
@@ -29,6 +29,8 @@
 #include "net/websockets/websocket_handshake_constants.h"
 #include "net/websockets/websocket_handshake_request_info.h"
 
+#define ValidateStatus ValidateStatus_WebSocketHttp3HandshakeStream
+
 namespace net {
 struct AlternativeService;
 
@@ -401,3 +403,5 @@ void WebSocketHttp3HandshakeStream::OnFailure(
 }
 
 }  // namespace net
+
+#undef ValidateStatus
