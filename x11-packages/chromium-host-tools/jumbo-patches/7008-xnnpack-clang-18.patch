https://github.com/llvm/llvm-project/issues/132013
https://github.com/google/XNNPACK/commit/8a2f5f441833b80806b58b5d704ec8335634182c

--- a/third_party/xnnpack/src/src/xnnpack/simd/f16-avx512fp16.h
+++ b/third_party/xnnpack/src/src/xnnpack/simd/f16-avx512fp16.h
@@ -27,8 +27,21 @@ typedef __m512h xnn_simd_f16_t;
   const xnn_simd_f16_t var = _mm512_castsi512_ph(_mm512_set1_epi16(val));
 
 #if XNN_HAVE_FLOAT16
+
+#if defined(__clang__) && (__clang_major__ < 19)
+static XNN_INLINE __m512d xnn_broadcast_16_512_workaround(uint16_t x) {
+  uint32_t bits = (uint32_t)x | ((uint32_t)x) << 16;
+  __asm__ volatile("" : "=m"(bits) : "m"(bits));
+  return _mm512_castsi512_pd(_mm512_set1_epi32(bits));
+}
+#define XNN_SIMD_CONST_F16_FROM_FLOAT(var, val)               \
+  const xnn_simd_f16_t var = xnn_broadcast_16_512_workaround( \
+      xnn_float16_to_bits(xnn_float16_from_float(val)))
+#else
 #define XNN_SIMD_CONST_F16_FROM_FLOAT(var, val) \
   const xnn_simd_f16_t var = _mm512_set1_ph(xnn_float16_from_float(val))
+#endif  // Old Clang workaround
+
 #else
 #define XNN_SIMD_CONST_F16_FROM_FLOAT(var, val) \
   XNN_SIMD_CONST_F16_FROM_INT16(                \
