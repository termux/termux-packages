This reverts https://github.com/chromium/chromium/commit/ce71348a09f6689dd01a68db64b172191d0182d8

--- a/third_party/blink/renderer/bindings/core/v8/native_value_traits.h
+++ b/third_party/blink/renderer/bindings/core/v8/native_value_traits.h
@@ -110,12 +110,6 @@ struct NativeValueTraitsBase<
   static constexpr bool has_null_value =
       bindings::NativeValueTraitsHasNullValue<ImplType>::value;
 
-  // This should only be true for certain subclasses of ScriptWrappable
-  // that satisfy the assumptions of CreateIDLSequenceFromV8ArraySlow() with
-  // regards to how NativeValue() is implemented for the underlying type.
-  static constexpr bool supports_scriptwrappable_specific_fast_array_iteration =
-      false;
-
   template <typename... ExtraArgs>
   static decltype(auto) ArgumentValue(v8::Isolate* isolate,
                                       int argument_index,
--- a/third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h
+++ b/third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h
@@ -1067,86 +1067,10 @@ CreateIDLSequenceFromV8ArraySlow(v8::Iso
     return {};
   }
 
-  using ResultType = typename NativeValueTraits<IDLSequence<T>>::ImplType;
-  ResultType result;
+  typename NativeValueTraits<IDLSequence<T>>::ImplType result;
   result.ReserveInitialCapacity(length);
   v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
   v8::TryCatch try_block(isolate);
-
-  // Fast path -- we're creating a sequence of script wrappables, which can be
-  // done by directly getting underlying object as long as array types are
-  // homogeneous. With ScriptWrappables, we don't expect to enter JS during
-  // iteration, so we can rely on v8::Array::Iterate() which is much faster than
-  // iterating an array on the client side of the v8. Additionally, for most
-  // subsptyes of ScriptWrappables, we can speed up type checks (see more on
-  // that below next to supports_scriptwrappable_specific_fast_array_iteration
-  // check.
-  if constexpr (std::is_base_of_v<ScriptWrappable, T>) {
-    struct CallbackData {
-      STACK_ALLOCATED();
-
-     public:
-      v8::Isolate* isolate;
-      v8::TypecheckWitness witness;
-      ResultType& result;
-      ExceptionState& exception_state;
-      CallbackData(v8::Isolate* isolate,
-                   ResultType& result,
-                   ExceptionState& exception_state)
-          : isolate(isolate),
-            witness(isolate),
-            result(result),
-            exception_state(exception_state) {}
-    };
-
-    CallbackData callback_data(isolate, result, exception_state);
-    v8::Array::IterationCallback callback = [](uint32_t index,
-                                               v8::Local<v8::Value> v8_element,
-                                               void* data) {
-      CallbackData* callback_data = reinterpret_cast<CallbackData*>(data);
-      // 3.4. Initialize Si to the result of converting nextItem to an IDL value
-      //   of type T.
-      v8::TypecheckWitness& witness = callback_data->witness;
-      // We can speed up type check by taking advantage of V8's type witness,
-      // provided traits' NativeValue implementation doesn't have additional
-      // logic beyond checking the type and calling ToScriptWrappable().
-      if constexpr (
-          NativeValueTraits<
-              T>::supports_scriptwrappable_specific_fast_array_iteration) {
-        if (witness.Matches(v8_element)) {
-          auto&& value = ToScriptWrappable(v8_element.As<v8::Object>())
-                             ->template ToImpl<T>();
-          callback_data->result.push_back(std::move(value));
-          return v8::Array::CallbackResult::kContinue;
-        }
-      }
-      auto&& element = NativeValueTraits<T>::NativeValue(
-          callback_data->isolate, v8_element, callback_data->exception_state);
-      if (callback_data->exception_state.HadException()) {
-        // It doesn't matter whether we return `kException` or `kBreak` here,
-        // as that only affects the return value of `v8_array->Iterate()`,
-        // which we are ignoring.
-        return v8::Array::CallbackResult::kException;
-      }
-      if constexpr (
-          NativeValueTraits<
-              T>::supports_scriptwrappable_specific_fast_array_iteration) {
-        witness.Update(v8_element);
-      }
-      callback_data->result.push_back(std::move(element));
-      return v8::Array::CallbackResult::kContinue;
-    };
-    if (!v8_array->Iterate(current_context, callback, &callback_data)
-             .IsJust()) {
-      if (try_block.HasCaught()) {
-        exception_state.RethrowV8Exception(try_block.Exception());
-      }
-      DCHECK(exception_state.HadException());
-      return {};
-    }
-    return result;
-  }
-
   // Array length may change if array is mutated during iteration.
   for (uint32_t i = 0; i < v8_array->Length(); ++i) {
     v8::Local<v8::Value> v8_element;
@@ -1162,7 +1086,6 @@ CreateIDLSequenceFromV8ArraySlow(v8::Iso
       return {};
     result.push_back(std::move(element));
   }
-
   // 3.2. If next is false, then return an IDL sequence value of type
   //   sequence<T> of length i, where the value of the element at index j is Sj.
   return result;
@@ -1521,7 +1444,6 @@ struct NativeValueTraits<
   }
 };
 
-// Interface types
 template <typename T>
 struct NativeValueTraits<
     IDLNullable<T>,
@@ -1606,21 +1528,13 @@ struct NativeValueTraits<
     T,
     typename std::enable_if_t<std::is_base_of<ScriptWrappable, T>::value>>
     : public NativeValueTraitsBase<T*> {
-  // This signifies that CreateIDLSequenceFromV8ArraySlow() may apply
-  // certain optimization based on assumptions about `NativeValue()`
-  // implementation below. For subclasses of ScriptWrappable that have
-  // different implementation of NativeValue(), this should remain false.
-  static constexpr bool supports_scriptwrappable_specific_fast_array_iteration =
-      true;
 
   static inline T* NativeValue(v8::Isolate* isolate,
                                v8::Local<v8::Value> value,
                                ExceptionState& exception_state) {
     const WrapperTypeInfo* wrapper_type_info = T::GetStaticWrapperTypeInfo();
-    if (V8PerIsolateData::From(isolate)->HasInstance(wrapper_type_info,
-                                                     value)) {
+    if (V8PerIsolateData::From(isolate)->HasInstance(wrapper_type_info, value))
       return ToScriptWrappable(value.As<v8::Object>())->template ToImpl<T>();
-    }
 
     bindings::NativeValueTraitsInterfaceNotOfType(wrapper_type_info,
                                                   exception_state);
