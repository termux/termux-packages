Enable jumbo build for the following component(s)/source_set(s):

- //components/download/public/common:public
- //components/global_media_controls:global_media_controls
- //components/leveldb_proto:leveldb_proto
- //components/prefs:prefs
- //components/ui_devtools:ui_devtools
- //components/variations:variations
- //gpu/ipc/service:service
- //mojo/public/cpp/bindings:bindings_base
- //mojo/public/cpp/bindings:bindings
- //mojo/public/cpp/system:system
- //third_party/blink/renderer/platform/image-decoders:image_decoders
- //third_party/blink/renderer/platform/media:media
- //ui/base/x:x

diff -uNr a/components/download/public/common/BUILD.gn b/components/download/public/common/BUILD.gn
--- a/components/download/public/common/BUILD.gn
+++ b/components/download/public/common/BUILD.gn
@@ -2,6 +2,7 @@
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
 
+import("//build/config/jumbo.gni")
 import("//mojo/public/tools/bindings/mojom.gni")
 
 if (is_android) {
@@ -14,7 +15,7 @@
   defines = [ "COMPONENTS_DOWNLOAD_IMPLEMENTATION" ]
 }
 
-component("public") {
+jumbo_component("public") {
   sources = [
     "all_download_event_notifier.h",
     "base_file.h",
diff -uNr a/components/global_media_controls/BUILD.gn b/components/global_media_controls/BUILD.gn
--- a/components/global_media_controls/BUILD.gn
+++ b/components/global_media_controls/BUILD.gn
@@ -2,7 +2,9 @@
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
 
-component("global_media_controls") {
+import("//build/config/jumbo.gni")
+
+jumbo_component("global_media_controls") {
   public = [
     "public/constants.h",
     "public/media_dialog_delegate.h",
diff -uNr a/components/leveldb_proto/BUILD.gn b/components/leveldb_proto/BUILD.gn
--- a/components/leveldb_proto/BUILD.gn
+++ b/components/leveldb_proto/BUILD.gn
@@ -2,13 +2,14 @@
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
 
+import("//build/config/jumbo.gni")
 import("//third_party/protobuf/proto_library.gni")
 
 proto_library("proto") {
   sources = [ "internal/proto/shared_db_metadata.proto" ]
 }
 
-component("leveldb_proto") {
+jumbo_component("leveldb_proto") {
   sources = [
     "internal/leveldb_database.cc",
     "internal/leveldb_database.h",
diff -uNr a/components/leveldb_proto/internal/proto_leveldb_wrapper.cc b/components/leveldb_proto/internal/proto_leveldb_wrapper.cc
--- a/components/leveldb_proto/internal/proto_leveldb_wrapper.cc
+++ b/components/leveldb_proto/internal/proto_leveldb_wrapper.cc
@@ -14,6 +14,9 @@
 #include "components/leveldb_proto/internal/proto_leveldb_wrapper_metrics.h"
 #include "components/leveldb_proto/public/proto_database.h"
 
+#define UpdateEntriesFromTaskRunner                 UpdateEntriesFromTaskRunner_Wrapper
+#define UpdateEntriesWithRemoveFilterFromTaskRunner UpdateEntriesWithRemoveFilterFromTaskRunner_Wrapper
+
 namespace leveldb_proto {
 
 namespace {
@@ -437,3 +440,6 @@
 }
 
 }  // namespace leveldb_proto
+
+#undef UpdateEntriesFromTaskRunner
+#undef UpdateEntriesWithRemoveFilterFromTaskRunner
diff -uNr a/components/prefs/BUILD.gn b/components/prefs/BUILD.gn
--- a/components/prefs/BUILD.gn
+++ b/components/prefs/BUILD.gn
@@ -2,9 +2,10 @@
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
 
+import("//build/config/jumbo.gni")
 import("//build/config/chromeos/ui_mode.gni")
 
-component("prefs") {
+jumbo_component("prefs") {
   sources = [
     "command_line_pref_store.cc",
     "command_line_pref_store.h",
diff -uNr a/components/ui_devtools/BUILD.gn b/components/ui_devtools/BUILD.gn
--- a/components/ui_devtools/BUILD.gn
+++ b/components/ui_devtools/BUILD.gn
@@ -2,6 +2,7 @@
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
 
+import("//build/config/jumbo.gni")
 import("//build/buildflag_header.gni")
 
 _inspector_protocol = "//third_party/inspector_protocol"
@@ -54,7 +55,7 @@
   outputs = _protocol_generated
 }
 
-component("ui_devtools") {
+jumbo_component("ui_devtools") {
   sources = rebase_path(_protocol_generated, ".", target_gen_dir)
   sources += [
     "agent_util.cc",
diff -uNr a/components/variations/BUILD.gn b/components/variations/BUILD.gn
--- a/components/variations/BUILD.gn
+++ b/components/variations/BUILD.gn
@@ -4,6 +4,7 @@
 
 import("//build/buildflag_header.gni")
 import("//build/config/cast.gni")
+import("//build/config/jumbo.gni")
 import("//mojo/public/tools/bindings/mojom.gni")
 import("//testing/libfuzzer/fuzzer_test.gni")
 import("//testing/test.gni")
@@ -38,7 +39,7 @@
   deps = [ "//base" ]
 }
 
-component("variations") {
+jumbo_component("variations") {
   sources = [
     "active_field_trials.cc",
     "active_field_trials.h",
diff -uNr a/components/variations/variations_ids_provider.cc b/components/variations/variations_ids_provider.cc
--- a/components/variations/variations_ids_provider.cc
+++ b/components/variations/variations_ids_provider.cc
@@ -22,6 +22,8 @@
 #include "components/variations/variations_client.h"
 #include "components/variations/variations_features.h"
 
+#define g_instance g_instance_ids_provider
+
 // TODO: remove this feature flag after milestone 110.
 BASE_FEATURE(kSendLowEntropySourceVariationIDInAnyContext,
              "SendLowEntropySourceVariationIDInAnyContext",
@@ -597,3 +599,5 @@
 }
 
 }  // namespace variations
+
+#undef g_instance
diff -uNr a/gpu/ipc/service/BUILD.gn b/gpu/ipc/service/BUILD.gn
--- a/gpu/ipc/service/BUILD.gn
+++ b/gpu/ipc/service/BUILD.gn
@@ -2,6 +2,7 @@
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
 
+import("//build/config/jumbo.gni")
 import("//build/config/ui.gni")
 import("//gpu/vulkan/features.gni")
 import("//testing/test.gni")
@@ -14,7 +15,7 @@
   subpixel_font_rendering_disabled = false
 }
 
-component("service") {
+jumbo_component("service") {
   output_name = "gpu_ipc_service"
   sources = [
     "command_buffer_stub.cc",
diff -uNr a/mojo/public/cpp/bindings/BUILD.gn b/mojo/public/cpp/bindings/BUILD.gn
--- a/mojo/public/cpp/bindings/BUILD.gn
+++ b/mojo/public/cpp/bindings/BUILD.gn
@@ -6,6 +6,7 @@
 import("//build/buildflag_header.gni")
 import("//build/config/compiler/compiler.gni")
 import("//build/config/features.gni")
+import("//build/config/jumbo.gni")
 import("//build/config/nacl/config.gni")
 import("//tools/ipc_fuzzer/ipc_fuzzer.gni")
 
@@ -30,7 +31,7 @@
 
 # Headers and sources which generated bindings can depend upon. No need for
 # other targets to depend on this directly: just use the "bindings" target.
-component("bindings_base") {
+jumbo_component("bindings_base") {
   sources = [
     "array_data_view.h",
     "array_traits.h",
@@ -139,7 +140,7 @@
   }
 }
 
-component("bindings") {
+jumbo_component("bindings") {
   sources = [
     "associated_interface_ptr_info.h",
     "associated_receiver.h",
diff -uNr a/mojo/public/cpp/system/BUILD.gn b/mojo/public/cpp/system/BUILD.gn
--- a/mojo/public/cpp/system/BUILD.gn
+++ b/mojo/public/cpp/system/BUILD.gn
@@ -2,7 +2,9 @@
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
 
-component("system") {
+import("//build/config/jumbo.gni")
+
+jumbo_component("system") {
   output_name = "mojo_public_system_cpp"
 
   sources = [
diff -uNr a/third_party/blink/renderer/platform/image-decoders/BUILD.gn b/third_party/blink/renderer/platform/image-decoders/BUILD.gn
--- a/third_party/blink/renderer/platform/image-decoders/BUILD.gn
+++ b/third_party/blink/renderer/platform/image-decoders/BUILD.gn
@@ -2,9 +2,10 @@
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
 
+import("//build/config/jumbo.gni")
 import("//media/media_options.gni")
 import("//third_party/blink/renderer/platform/platform.gni")
-component("image_decoders") {
+jumbo_component("image_decoders") {
   visibility = [
     "//third_party/blink/renderer/core/*",
     "//third_party/blink/renderer/platform/*",
diff -uNr a/third_party/blink/renderer/platform/media/BUILD.gn b/third_party/blink/renderer/platform/media/BUILD.gn
--- a/third_party/blink/renderer/platform/media/BUILD.gn
+++ b/third_party/blink/renderer/platform/media/BUILD.gn
@@ -2,11 +2,12 @@
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
 
+import("//build/config/jumbo.gni")
 import("//media/media_options.gni")
 
 # TODO(https://crbug.com/1198341): use blink_platform_sources once the code is
 # ported to Blink code conventions.
-component("media") {
+jumbo_component("media") {
   visibility = [
     # Note: this is here because web_media_player_impl_unittest.cc needs core
     # and web, and platform should not depend on either.
diff -uNr a/third_party/blink/renderer/platform/media/new_session_cdm_result_promise.cc b/third_party/blink/renderer/platform/media/new_session_cdm_result_promise.cc
--- a/third_party/blink/renderer/platform/media/new_session_cdm_result_promise.cc
+++ b/third_party/blink/renderer/platform/media/new_session_cdm_result_promise.cc
@@ -10,6 +10,9 @@
 #include "third_party/blink/public/platform/web_string.h"
 #include "third_party/blink/renderer/platform/media/cdm_result_promise_helper.h"
 
+#define kTimeToResolveUmaPrefix kTimeToResolveUmaPrefix_NewSessionCdmResultPromise
+#define kTimeToRejectUmaPrefix  kTimeToRejectUmaPrefix_NewSessionCdmResultPromise
+
 namespace blink {
 namespace {
 
@@ -110,3 +113,6 @@
 }
 
 }  // namespace blink
+
+#undef kTimeToResolveUmaPrefix
+#undef kTimeToRejectUmaPrefix
diff -uNr a/third_party/blink/renderer/platform/media/resource_multi_buffer_data_provider.cc b/third_party/blink/renderer/platform/media/resource_multi_buffer_data_provider.cc
--- a/third_party/blink/renderer/platform/media/resource_multi_buffer_data_provider.cc
+++ b/third_party/blink/renderer/platform/media/resource_multi_buffer_data_provider.cc
@@ -29,6 +29,9 @@
 #include "third_party/blink/public/web/web_associated_url_loader.h"
 #include "third_party/blink/renderer/platform/media/cache_util.h"
 
+#define kHttpOK             kHttpOK_ResourceMultiBufferDataProvider
+#define kHttpPartialContent kHttpPartialContent_ResourceMultiBufferDataProvider
+
 namespace blink {
 
 // The number of milliseconds to wait before retrying a failed load.
@@ -570,3 +573,6 @@
 }
 
 }  // namespace blink
+
+#undef kHttpOK
+#undef kHttpPartialContent

diff -uNr a/ui/base/x/BUILD.gn b/ui/base/x/BUILD.gn
--- a/ui/base/x/BUILD.gn
+++ b/ui/base/x/BUILD.gn
@@ -2,6 +2,7 @@
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
 
+import("//build/config/jumbo.gni")
 import("//build/config/linux/gtk/gtk.gni")
 import("//build/config/ozone.gni")
 import("//build/config/ui.gni")
@@ -9,7 +10,7 @@
 
 assert(ozone_platform_x11)
 
-component("x") {
+jumbo_component("x") {
   output_name = "ui_base_x"
 
   sources = [
diff -uNr a/ui/base/x/selection_owner.cc b/ui/base/x/selection_owner.cc
--- a/ui/base/x/selection_owner.cc
+++ b/ui/base/x/selection_owner.cc
@@ -67,7 +67,7 @@
   return true;
 }
 
-x11::Window GetSelectionOwner(x11::Atom selection) {
+x11::Window GetSelectionOwner_SelectionOwner(x11::Atom selection) {
   auto response = x11::Connection::Get()->GetSelectionOwner({selection}).Sync();
   return response ? response->owner : x11::Window::None;
 }
@@ -80,6 +80,8 @@
 
 }  // namespace
 
+#define GetSelectionOwner GetSelectionOwner_SelectionOwner
+
 SelectionOwner::SelectionOwner(x11::Connection& connection,
                                x11::Window x_window,
                                x11::Atom selection_name)
@@ -341,3 +343,5 @@
 SelectionOwner::IncrementalTransfer::~IncrementalTransfer() = default;
 
 }  // namespace ui
+
+#undef GetSelectionOwner
diff -uNr a/ui/base/x/x11_clipboard_helper.cc b/ui/base/x/x11_clipboard_helper.cc
--- a/ui/base/x/x11_clipboard_helper.cc
+++ b/ui/base/x/x11_clipboard_helper.cc
@@ -96,13 +96,15 @@
   }
 }
 
-x11::Window GetSelectionOwner(x11::Atom selection) {
+x11::Window GetSelectionOwner_ClipboardHelper(x11::Atom selection) {
   auto response = x11::Connection::Get()->GetSelectionOwner({selection}).Sync();
   return response ? response->owner : x11::Window::None;
 }
 
 }  // namespace
 
+#define GetSelectionOwner GetSelectionOwner_ClipboardHelper
+
 class XClipboardHelper::TargetList {
  public:
   explicit TargetList(const std::vector<x11::Atom>& target_list)
@@ -435,3 +437,5 @@
 }
 
 }  //  namespace ui
+
+#undef GetSelectionOwner
diff -uNr a/ui/base/x/x11_drag_drop_client.cc b/ui/base/x/x11_drag_drop_client.cc
--- a/ui/base/x/x11_drag_drop_client.cc
+++ b/ui/base/x/x11_drag_drop_client.cc
@@ -31,6 +31,12 @@
 //
 // All the readings are freely available online.
 
+#define kXdndTypeList   kXdndTypeList_DragDropClient
+#define kXdndActionCopy kXdndActionCopy_DragDropClient
+#define kXdndActionMove kXdndActionMove_DragDropClient
+#define kXdndActionLink kXdndActionLink_DragDropClient
+#define kXdndActionList kXdndActionList_DragDropClient
+
 namespace ui {
 
 // Window property on the source window and message used by the XDS protocol.
@@ -730,3 +736,9 @@
 }
 
 }  // namespace ui
+
+#undef kXdndTypeList
+#undef kXdndActionCopy
+#undef kXdndActionMove
+#undef kXdndActionLink
+#undef kXdndActionList
