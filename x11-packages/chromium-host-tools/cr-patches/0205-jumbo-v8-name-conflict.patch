[4/157] CXX host/obj/third_party/blink/renderer/bindings/modules/v8/v8/v8_jumbo_22.o
  In file included from host/gen/third_party/blink/renderer/bindings/modules/v8/v8_jumbo_22.cc:23:
  In file included from ./host/gen/third_party/blink/renderer/bindings/modules/v8/v8_file_system_sync_access_handle.cc:22:
  In file included from ../../../src/third_party/blink/renderer/modules/file_system_access/file_system_sync_access_handle.h:13:
  ../../../src/third_party/blink/renderer/modules/file_system_access/allow_shared_buffer_source_util.h:19:15: error: redefinition of 'AsSpan'
    19 | base::span<T> AsSpan(const AllowSharedBufferSource* buffer_union) {
        |               ^
  ../../../src/third_party/blink/renderer/modules/webcodecs/array_buffer_util.h:22:15: note: previous definition is here
    22 | base::span<T> AsSpan(const AllowSharedBufferSource* buffer_union) {
        |               ^
  1 error generated.

https://github.com/chromium/chromium/commit/8ef0a6fc21b927ca7b40838dcb1fa326b4a7e3cf
https://github.com/chromium/chromium/commit/49fbf6ba6244263029687c636b74d5b784da92c4

--- a/third_party/blink/renderer/modules/file_system_access/allow_shared_buffer_source_util.h
+++ b/third_party/blink/renderer/modules/file_system_access/allow_shared_buffer_source_util.h
@@ -14,25 +14,25 @@
 using AllowSharedBufferSource =
     V8UnionArrayBufferAllowSharedOrArrayBufferViewAllowShared;
 
-// Helper function for turning various DOMArray-like things into a pointer+size.
-template <typename T>
-base::span<T> AsSpan(const AllowSharedBufferSource* buffer_union) {
-  switch (buffer_union->GetContentType()) {
+// Helper function for turning various DOMArray-like things into a span.
+inline base::span<uint8_t> AsByteSpan(
+    const AllowSharedBufferSource& buffer_union) {
+  switch (buffer_union.GetContentType()) {
     case AllowSharedBufferSource::ContentType::kArrayBufferAllowShared: {
-      auto* buffer = buffer_union->GetAsArrayBufferAllowShared();
+      auto* buffer = buffer_union.GetAsArrayBufferAllowShared();
       return (buffer && !buffer->IsDetached())
-                 ? base::span<T>(
-                       reinterpret_cast<T*>(buffer->DataMaybeShared()),
+                 ? base::span<uint8_t>(
+                       static_cast<uint8_t*>(buffer->DataMaybeShared()),
                        buffer->ByteLength())
-                 : base::span<T>();
+                 : base::span<uint8_t>();
     }
     case AllowSharedBufferSource::ContentType::kArrayBufferViewAllowShared: {
-      auto* buffer = buffer_union->GetAsArrayBufferViewAllowShared().Get();
+      auto* buffer = buffer_union.GetAsArrayBufferViewAllowShared().Get();
       return (buffer && !buffer->IsDetached())
-                 ? base::span<T>(
-                       reinterpret_cast<T*>(buffer->BaseAddressMaybeShared()),
+                 ? base::span<uint8_t>(
+                       static_cast<uint8_t*>(buffer->BaseAddressMaybeShared()),
                        buffer->byteLength())
-                 : base::span<T>();
+                 : base::span<uint8_t>();
     }
   }
 }
--- a/third_party/blink/renderer/modules/file_system_access/file_system_sync_access_handle.cc
+++ b/third_party/blink/renderer/modules/file_system_access/file_system_sync_access_handle.cc
@@ -148,7 +148,7 @@
   }
 
   ASSIGN_OR_RETURN(
-      int result, file_delegate()->Read(file_offset, AsSpan<uint8_t>(buffer)),
+      int result, file_delegate()->Read(file_offset, AsByteSpan(*buffer)),
       [&](auto) {
         exception_state.ThrowDOMException(DOMExceptionCode::kInvalidStateError,
                                           "Failed to read the content");
@@ -189,7 +189,7 @@
     return 0;
   }
 
-  auto buffer_span = AsSpan<uint8_t>(buffer);
+  auto buffer_span = AsByteSpan(*buffer);
   size_t write_size = buffer_span.size();
   if (!base::CheckedNumeric<int>(write_size).IsValid()) {
     exception_state.ThrowTypeError("Cannot write more than 2GB");
