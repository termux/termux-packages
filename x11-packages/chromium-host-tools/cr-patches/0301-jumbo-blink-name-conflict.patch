[5/1570] CXX obj/third_party/blink/renderer/platform/platform/platform_jumbo_4.o
  ./../../../src/third_party/blink/renderer/platform/fonts/font_palette.cc:19:7: error: redefinition of 'NormalizeSign'
    19 | float NormalizeSign(float number) {
        |       ^
  ./../../../src/third_party/blink/renderer/platform/fonts/font_description.cc:366:7: note: previous definition is here
    366 | float NormalizeSign(float number) {
        |       ^
  1 error generated.
--- a/third_party/blink/renderer/platform/fonts/font_palette.cc
+++ b/third_party/blink/renderer/platform/fonts/font_palette.cc
@@ -16,7 +16,7 @@
 
 // This converts -0.0 to 0.0, so that they have the same hash value. This
 // ensures that equal FontDescription have the same hash value.
-float NormalizeSign(float number) {
+float NormalizeSign_FP(float number) {
   if (UNLIKELY(number == 0.0)) {
     return 0.0;
   }
@@ -30,10 +30,10 @@
   WTF::AddIntToHash(computed_hash, palette_keyword_);
 
   if (palette_keyword_ == kInterpolablePalette) {
-    WTF::AddFloatToHash(computed_hash, NormalizeSign(percentages_.start));
-    WTF::AddFloatToHash(computed_hash, NormalizeSign(percentages_.end));
-    WTF::AddFloatToHash(computed_hash, NormalizeSign(normalized_percentage_));
-    WTF::AddFloatToHash(computed_hash, NormalizeSign(alpha_multiplier_));
+    WTF::AddFloatToHash(computed_hash, NormalizeSign_FP(percentages_.start));
+    WTF::AddFloatToHash(computed_hash, NormalizeSign_FP(percentages_.end));
+    WTF::AddFloatToHash(computed_hash, NormalizeSign_FP(normalized_percentage_));
+    WTF::AddFloatToHash(computed_hash, NormalizeSign_FP(alpha_multiplier_));
     WTF::AddIntToHash(computed_hash,
                       static_cast<uint8_t>(color_interpolation_space_));
     if (hue_interpolation_method_.has_value()) {
--- a/third_party/blink/renderer/platform/fonts/font_description.cc
+++ b/third_party/blink/renderer/platform/fonts/font_description.cc
@@ -363,7 +363,7 @@
 
 // This converts -0.0 to 0.0, so that they have the same hash value. This
 // ensures that equal FontDescription have the same hash value.
-float NormalizeSign(float number) {
+float NormalizeSign_FD(float number) {
   if (UNLIKELY(number == 0.0))
     return 0.0;
   return number;
@@ -398,11 +398,11 @@
   }
   WTF::AddIntToHash(hash, string_hasher.GetHash());
 
-  WTF::AddFloatToHash(hash, NormalizeSign(specified_size_));
-  WTF::AddFloatToHash(hash, NormalizeSign(computed_size_));
-  WTF::AddFloatToHash(hash, NormalizeSign(adjusted_size_));
-  WTF::AddFloatToHash(hash, NormalizeSign(letter_spacing_));
-  WTF::AddFloatToHash(hash, NormalizeSign(word_spacing_));
+  WTF::AddFloatToHash(hash, NormalizeSign_FD(specified_size_));
+  WTF::AddFloatToHash(hash, NormalizeSign_FD(computed_size_));
+  WTF::AddFloatToHash(hash, NormalizeSign_FD(adjusted_size_));
+  WTF::AddFloatToHash(hash, NormalizeSign_FD(letter_spacing_));
+  WTF::AddFloatToHash(hash, NormalizeSign_FD(word_spacing_));
   WTF::AddIntToHash(hash, fields_as_unsigned_.parts[0]);
   WTF::AddIntToHash(hash, fields_as_unsigned_.parts[1]);
   WTF::AddIntToHash(hash, font_selection_request_.GetHash());

=======================================================================================================================
[3/1710] CXX obj/third_party/blink/renderer/platform/platform/platform_jumbo_5.o
  ./../../../src/third_party/blink/renderer/platform/fonts/shaping/shape_result.cc:1232:7: error: redefinition of 'HarfBuzzPositionToFloat'
  1232 | float HarfBuzzPositionToFloat(hb_position_t value) {
        |       ^
  ./../../../src/third_party/blink/renderer/platform/fonts/shaping/harfbuzz_shaper.cc:263:14: note: previous definition is here
    263 | inline float HarfBuzzPositionToFloat(hb_position_t value) {
        |              ^
  1 error generated.
--- a/third_party/blink/renderer/platform/fonts/shaping/shape_result.cc
+++ b/third_party/blink/renderer/platform/fonts/shaping/shape_result.cc
@@ -1229,7 +1229,7 @@
 
 namespace {
 
-float HarfBuzzPositionToFloat(hb_position_t value) {
+float HarfBuzzPositionToFloat_SR(hb_position_t value) {
   return static_cast<float>(value) / (1 << 16);
 }
 
@@ -1408,14 +1408,14 @@
     const hb_glyph_position_t& pos = glyph_positions[start_glyph + i];
 
     // Offset is primarily used when painting glyphs. Keep it in physical.
-    GlyphOffset offset(HarfBuzzPositionToFloat(pos.x_offset),
-                       -HarfBuzzPositionToFloat(pos.y_offset));
+    GlyphOffset offset(HarfBuzzPositionToFloat_SR(pos.x_offset),
+                       -HarfBuzzPositionToFloat_SR(pos.y_offset));
 
     // One out of x_advance and y_advance is zero, depending on
     // whether the buffer direction is horizontal or vertical.
     // Convert to float and negate to avoid integer-overflow for ULONG_MAX.
-    float advance = is_horizontal_run ? HarfBuzzPositionToFloat(pos.x_advance)
-                                      : -HarfBuzzPositionToFloat(pos.y_advance);
+    float advance = is_horizontal_run ? HarfBuzzPositionToFloat_SR(pos.x_advance)
+                                      : -HarfBuzzPositionToFloat_SR(pos.y_advance);
 
     DCHECK_GE(glyph.cluster, start_cluster);
     const uint16_t character_index = glyph.cluster - start_cluster;
--- a/third_party/blink/renderer/platform/fonts/shaping/harfbuzz_shaper.cc
+++ b/third_party/blink/renderer/platform/fonts/shaping/harfbuzz_shaper.cc
@@ -260,7 +260,7 @@
   return hb_script_from_string(uscript_getShortName(script), -1);
 }
 
-inline float HarfBuzzPositionToFloat(hb_position_t value) {
+inline float HarfBuzzPositionToFloat_HS(hb_position_t value) {
   return static_cast<float>(value) / (1 << 16);
 }
 
@@ -1048,10 +1048,10 @@
     glyphs.push_back(GlyphData{
         .cluster = glyph_info->cluster,
         .glyph = static_cast<Glyph>(glyph_info->codepoint),
-        .advance = {HarfBuzzPositionToFloat(glyph_position->x_advance),
-                    -HarfBuzzPositionToFloat(glyph_position->y_advance)},
-        .offset = {HarfBuzzPositionToFloat(glyph_position->x_offset),
-                   -HarfBuzzPositionToFloat(glyph_position->y_offset)}});
+        .advance = {HarfBuzzPositionToFloat_HS(glyph_position->x_advance),
+                    -HarfBuzzPositionToFloat_HS(glyph_position->y_advance)},
+        .offset = {HarfBuzzPositionToFloat_HS(glyph_position->x_offset),
+                   -HarfBuzzPositionToFloat_HS(glyph_position->y_offset)}});
   }
 }
 
