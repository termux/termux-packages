+++ a/build/blueprint/context.go
@@ -1209,7 +1209,7 @@
 			return nil
 		}
 		return []error{&BlueprintError{
-			Err: fmt.Errorf("%q depends on undefined module %q",
+			Err: fmt.Errorf("%q 1depends on undefined module %q",
 				module.Name(), depName),
 			Pos: module.pos,
 		}}
@@ -1286,15 +1286,8 @@
 
 	possibleDeps := c.modulesFromName(depName)
 	if possibleDeps == nil {
-		if c.allowMissingDependencies {
-			module.missingDeps = append(module.missingDeps, depName)
-			return nil
-		}
-		return []error{&BlueprintError{
-			Err: fmt.Errorf("%q depends on undefined module %q",
-				module.Name(), depName),
-			Pos: module.pos,
-		}}
+		module.missingDeps = append(module.missingDeps, depName)
+		return nil
 	}
 
 	// We can't just append variant.Variant to module.dependencyVariants.variantName and
@@ -1996,19 +1989,6 @@
 			return true
 		}
 
-		if module.missingDeps != nil && !mctx.handledMissingDeps {
-			var errs []error
-			for _, depName := range module.missingDeps {
-				errs = append(errs, &BlueprintError{
-					Err: fmt.Errorf("%q depends on undefined module %q",
-						module.Name(), depName),
-					Pos: module.pos,
-				})
-			}
-			errsCh <- errs
-			return true
-		}
-
 		depsCh <- mctx.ninjaFileDeps
 
 		newErrs := c.processLocalBuildActions(&module.actionDefs,
+++ a/build/soong/android/paths.go	2023-11-08 07:59:01.069137952 +020
@@ -360,11 +360,6 @@
 		return ret
 	}
 
-	if exists, _, err := ctx.Fs().Exists(ret.String()); err != nil {
-		reportPathError(ctx, "%s: %s", ret, err.Error())
-	} else if !exists {
-		reportPathError(ctx, "source path %s does not exist", ret)
-	}
 	return ret
 }
 
+++ a/build/blueprint/module_ctx.go
@@ -488,7 +488,7 @@
 }
 
 func (m *moduleContext) GetMissingDependencies() []string {
-	m.handledMissingDeps = true
+	m.handledMissingDeps = false
 	return m.module.missingDeps
 }
 
