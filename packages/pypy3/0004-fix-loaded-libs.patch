--- a/lib_pypy/_audioop_build.py
+++ b/lib_pypy/_audioop_build.py
@@ -629,3 +629,3 @@

-ffi.set_source("_audioop_cffi", C_SOURCE)
+ffi.set_source("_audioop_cffi", C_SOURCE, libraries=["m"])

--- a/lib_pypy/_syslog_build.py
+++ b/lib_pypy/_syslog_build.py
@@ -23,7 +23,7 @@
 #ifndef LOG_NEWS
 #define LOG_NEWS LOG_MAIL
 #endif
-""")
+""", libraries=['log'])

 ffi.cdef("""
 /* mandatory constants */


--- a/lib_pypy/_dbm.py
+++ b/lib_pypy/_dbm.py
@@ -123,7 +123,9 @@
         func.restype = restype
 
 if sys.platform != 'darwin':
-    libpath = ctypes.util.find_library('db')
+    libpath = ctypes.util.find_library('gdbm_compat')
+    if not libpath:
+        libpath = ctype.util.find_library('db')
     if not libpath:
         # XXX this is hopeless...
         for c in ['5.3', '5.2', '5.1', '5.0', '4.9', '4.8', '4.7', '4.6', '4.5']:


--- a/pypy/module/_multiprocessing/interp_semaphore.py
+++ b/pypy/module/_multiprocessing/interp_semaphore.py
@@ -43,7 +43,7 @@
     if sys.platform == 'darwin':
         libraries = []
     else:
-        libraries = ['rt']
+        libraries = ['android-posix-semaphore']

     eci = ExternalCompilationInfo(
         includes = ['sys/time.h',

--- a/rpython/rlib/rposix.py
+++ b/rpython/rlib/rposix.py
@@ -212,7 +212,7 @@
         includes.append('sys/sysmacros.h')
     if sys.platform.startswith('freebsd') or sys.platform.startswith('openbsd'):
         includes.append('sys/ttycom.h')
-    libraries = ['util']
+    libraries = ['c']
 
 eci = ExternalCompilationInfo(
     includes=includes,

@@ -2094,6 +2094,8 @@
         locals()['HAVE_%s' % _name.upper()] = rffi_platform.Has(_name)
 cConfig = rffi_platform.configure(CConfig)
 globals().update(cConfig)
+# Remove faccessat, linkat
+HAVE_FACCESSAT = HAVE_LINKAT = False
 
 if not _WIN32:
     class CConfig:

--- a/rpython/rlib/rtime.py
+++ b/rpython/rlib/rtime.py
@@ -29,10 +29,6 @@
                 'sys/types.h', 'unistd.h',
                 'sys/time.h', 'sys/resource.h']

-    if not sys.platform.startswith("openbsd") and \
-       not sys.platform.startswith("freebsd"):
-        includes.append('sys/timeb.h')
-
     need_rusage = True


@@ -51,7 +47,7 @@
 if sys.platform.startswith('freebsd') or sys.platform.startswith('netbsd'):
     libraries = ['compat']
 elif sys.platform == 'linux2':
-    libraries = ['rt']
+    libraries = ['c']
 else:
     libraries = []

@@ -198,7 +194,7 @@
     # do we need to add -lrt?
     eciclock = CConfigForClockGetTime._compilation_info_
     if not _NO_MISSING_RT:
-        eciclock = eciclock.merge(ExternalCompilationInfo(libraries=['rt']))
+        eciclock = eciclock.merge(ExternalCompilationInfo(libraries=['c']))
     # the functions:
     c_clock_getres = external("clock_getres",
                               [lltype.Signed, lltype.Ptr(TIMESPEC)],

