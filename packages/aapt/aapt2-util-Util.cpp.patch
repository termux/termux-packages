--- a/base/tools/aapt2/util/Util.cpp
+++ b/base/tools/aapt2/util/Util.cpp
@@ -27,7 +27,6 @@
 #include "androidfw/BigBuffer.h"
 #include "androidfw/StringPiece.h"
 #include "androidfw/Util.h"
-#include "build/version.h"
 #include "text/Unicode.h"
 #include "text/Utf8Iterator.h"
 #include "utils/Unicode.h"
@@ -229,32 +228,7 @@
   // Update minor version whenever a feature or flag is added.
   static const char* const sMinorVersion = "19";
 
-  // The build id of aapt2 binary.
-  static const std::string sBuildId = [] {
-    std::string buildNumber = android::build::GetBuildNumber();
-
-    if (android::base::StartsWith(buildNumber, "eng.")) {
-      // android::build::GetBuildNumber() returns something like "eng.user.20230725.214219" where
-      // the latter two parts are "yyyyMMdd.HHmmss" at build time. Use "yyyyMM" in the fingerprint.
-      std::vector<std::string> parts = util::Split(buildNumber, '.');
-      int buildYear;
-      int buildMonth;
-      if (parts.size() < 3 || parts[2].length() < 6 ||
-          !android::base::ParseInt(parts[2].substr(0, 4), &buildYear) ||
-          !android::base::ParseInt(parts[2].substr(4, 2), &buildMonth)) {
-        // Fallback to localtime() if GetBuildNumber() returns an unexpected output.
-        time_t now = time(0);
-        tm* ltm = localtime(&now);
-        buildYear = 1900 + ltm->tm_year;
-        buildMonth = 1 + ltm->tm_mon;
-      }
-
-      buildNumber = android::base::StringPrintf("eng.%04d%02d", buildYear, buildMonth);
-    }
-    return buildNumber;
-  }();
-
-  return android::base::StringPrintf("%s.%s-%s", sMajorVersion, sMinorVersion, sBuildId.c_str());
+  return android::base::StringPrintf("%s.%s", sMajorVersion, sMinorVersion);
 }
 
 static size_t ConsumeDigits(const char* start, const char* end) {
