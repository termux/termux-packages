--- a/core/libutils/Threads.cpp
+++ b/core/libutils/Threads.cpp
@@ -36,7 +36,7 @@
 
 #include <log/log.h>
 
-#if defined(__ANDROID__)
+#if defined(__ANDROID__) && !defined(__TERMUX__)
 # define __android_unused
 #else
 # define __android_unused __attribute__((__unused__))
@@ -62,7 +62,7 @@ using namespace android;
 
 typedef int (*android_pthread_entry)(void*);
 
-#if defined(__ANDROID__)
+#if defined(__ANDROID__) && !defined(__TERMUX__)
 struct thread_data_t {
     thread_func_t   entryFunction;
     void*           userData;
@@ -134,7 +134,7 @@ int androidCreateRawThreadEtc(android_thread_func_t entryFunction,
     pthread_attr_init(&attr);
     pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
 
-#if defined(__ANDROID__)  /* valgrind is rejecting RT-priority create reqs */
+#if defined(__ANDROID__) && !defined(__TERMUX__)  /* valgrind is rejecting RT-priority create reqs */
     if (threadPriority != PRIORITY_DEFAULT || threadName != NULL) {
         // Now that the pthread_t has a method to find the associated
         // android_thread_id_t (pid) from pthread_t, it would be possible to avoid
@@ -183,7 +183,7 @@ int androidCreateRawThreadEtc(android_thread_func_t entryFunction,
     return 1;
 }
 
-#if defined(__ANDROID__)
+#if defined(__ANDROID__) && !defined(__TERMUX__)
 static pthread_t android_thread_id_t_to_pthread(android_thread_id_t thread)
 {
     return (pthread_t) thread;
@@ -309,7 +309,7 @@ void androidSetCreateThreadFunc(android_create_thread_fn func)
     gCreateThreadFn = func;
 }
 
-#if defined(__ANDROID__)
+#if defined(__ANDROID__) && !defined(__TERMUX__)
 int androidSetThreadPriority(pid_t tid, int pri)
 {
     int rc = 0;
@@ -648,7 +648,7 @@ Thread::Thread(bool canCallJava)
       mStatus(OK),
       mExitPending(false),
       mRunning(false)
-#if defined(__ANDROID__)
+#if defined(__ANDROID__) && !defined(__TERMUX__)
       ,
       mTid(-1)
 #endif
@@ -721,7 +721,7 @@ int Thread::_threadLoop(void* user)
     wp<Thread> weak(strong);
     self->mHoldSelf.clear();
 
-#if defined(__ANDROID__)
+#if defined(__ANDROID__) && !defined(__TERMUX__)
     // this is very useful for debugging with gdb
     self->mTid = gettid();
 #endif
@@ -832,7 +832,7 @@ bool Thread::isRunning() const {
     return mRunning;
 }
 
-#if defined(__ANDROID__)
+#if defined(__ANDROID__) && !defined(__TERMUX__)
 pid_t Thread::getTid() const
 {
     // mTid is not defined until the child initializes it, and the caller may need it earlier
