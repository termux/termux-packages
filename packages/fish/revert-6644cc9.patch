Reverts https://github.com/fish-shell/fish-shell/commit/6644cc9b0e29841e3d0a85fbc672a95c4a2fd000,
a NetBSD-related commit,
because it causes this compilation failure on Android:

error[E0308]: mismatched types
   --> src/path.rs:749:13
    |
748 |         let remoteness = remoteness_via_statfs(
    |                          --------------------- arguments to this function are incorrect
749 |             libc::statfs,
    |             ^^^^^^^^^^^^ expected fn pointer, found fn item
    |
    = note: expected fn pointer `unsafe extern "C" fn(*const i8, _) -> _`
                  found fn item `unsafe extern "C" fn(*const u8, _) -> _ {libc::statfs}`

--- a/src/path.rs
+++ b/src/path.rs
@@ -6,6 +6,8 @@ use crate::common::{wcs2osstring, wcs2zstring};
 use crate::env::{EnvMode, EnvStack, Environment};
 use crate::expand::{expand_tilde, HOME_DIRECTORY};
 use crate::flog::{FLOG, FLOGF};
+#[cfg(not(target_os = "linux"))]
+use crate::libc::{MNT_LOCAL, ST_LOCAL};
 use crate::wchar::prelude::*;
 use crate::wutil::{normalize_path, path_normalize_for_cd, waccess, wdirname, wstat};
 use errno::{errno, set_errno, Errno};
@@ -709,49 +711,25 @@ fn path_remoteness(path: &wstr) -> DirRemoteness {
     }
     #[cfg(not(target_os = "linux"))]
     {
-        fn remoteness_via_statfs<StatFS, Flags>(
-            statfn: unsafe extern "C" fn(*const i8, *mut StatFS) -> libc::c_int,
-            flagsfn: fn(&StatFS) -> Flags,
-            is_local_flag: u64,
-            path: &std::ffi::CStr,
-        ) -> DirRemoteness
-        where
-            u64: From<Flags>,
-        {
-            if is_local_flag == 0 {
-                return DirRemoteness::unknown;
-            }
+        // ST_LOCAL is a flag to statvfs, which is itself standardized.
+        // In practice the only system to define it is NetBSD.
+        let local_flag = ST_LOCAL() | MNT_LOCAL();
+        if local_flag != 0 {
             let mut buf = MaybeUninit::uninit();
-            if unsafe { (statfn)(path.as_ptr(), buf.as_mut_ptr()) } < 0 {
+            if unsafe { libc::statfs(narrow.as_ptr(), buf.as_mut_ptr()) } < 0 {
                 return DirRemoteness::unknown;
             }
             let buf = unsafe { buf.assume_init() };
             // statfs::f_flag is hard-coded as 64-bits on 32/64-bit FreeBSD but it's a (4-byte)
             // long on 32-bit NetBSD.. and always 4-bytes on macOS (even on 64-bit builds).
             #[allow(clippy::useless_conversion)]
-            if u64::from((flagsfn)(&buf)) & is_local_flag != 0 {
+            return if u64::from(buf.f_flags) & local_flag != 0 {
                 DirRemoteness::local
             } else {
                 DirRemoteness::remote
-            }
+            };
         }
-        // ST_LOCAL is a flag to statvfs, which is itself standardized.
-        // In practice the only system to define it is NetBSD.
-        #[cfg(target_os = "netbsd")]
-        let remoteness = remoteness_via_statfs(
-            libc::statvfs,
-            |stat: &libc::statvfs| stat.f_flag,
-            crate::libc::ST_LOCAL(),
-            &narrow,
-        );
-        #[cfg(not(target_os = "netbsd"))]
-        let remoteness = remoteness_via_statfs(
-            libc::statfs,
-            |stat: &libc::statfs| stat.f_flags,
-            crate::libc::MNT_LOCAL(),
-            &narrow,
-        );
-        remoteness
+        DirRemoteness::unknown
     }
 }
 
