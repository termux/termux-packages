From 2fef14e138331f0fb0fd3b9302f5c9b03a21b903 Mon Sep 17 00:00:00 2001
From: poly000 <1348292515@qq.com>
Date: Thu, 20 Mar 2025 03:47:35 +0800
Subject: [PATCH 1/8] fix(nu-command): unexpected permission denied error on
 android

---
 crates/nu-utils/src/filesystem.rs | 15 ++++++++++++++-
 1 file changed, 14 insertions(+), 1 deletion(-)

diff --git a/crates/nu-utils/src/filesystem.rs b/crates/nu-utils/src/filesystem.rs
index 4ea89c4e05ef6..af6a36d4b7852 100644
--- a/crates/nu-utils/src/filesystem.rs
+++ b/crates/nu-utils/src/filesystem.rs
@@ -32,7 +32,20 @@ pub fn have_permission(dir: impl AsRef<Path>) -> PermissionResult<'static> {
     }
 }
 
-#[cfg(unix)]
+#[cfg(all(unix, target_os = "android"))]
+pub fn have_permission(dir: impl AsRef<Path>) -> PermissionResult<'static> {
+    use nix::errno::Errno;
+    use nix::unistd::{AccessFlags, access};
+
+    match access(dir.as_ref(), AccessFlags::X_OK) {
+        Ok(_) => PermissionResult::PermissionOk,
+        Err(Errno::EPERM) => PermissionResult::PermissionDenied("Permission denied"),
+        Err(Errno::ENOENT) => PermissionResult::PermissionDenied("Path not exists?"),
+        Err(_) => PermissionResult::PermissionDenied("Unknown error"),
+    }
+}
+
+#[cfg(all(unix, not(target_os = "android")))]
 pub fn have_permission(dir: impl AsRef<Path>) -> PermissionResult<'static> {
     match dir.as_ref().metadata() {
         Ok(metadata) => {

From d300dabdc59340c529e13dc204ff6c992e6aab58 Mon Sep 17 00:00:00 2001
From: poly000 <1348292515@qq.com>
Date: Thu, 20 Mar 2025 17:55:16 +0800
Subject: [PATCH 2/8] enhance(fs): replace previous have_permission check

---
 crates/nu-utils/src/filesystem.rs | 88 +++----------------------------
 1 file changed, 6 insertions(+), 82 deletions(-)

diff --git a/crates/nu-utils/src/filesystem.rs b/crates/nu-utils/src/filesystem.rs
index af6a36d4b7852..cbd8612140a8c 100644
--- a/crates/nu-utils/src/filesystem.rs
+++ b/crates/nu-utils/src/filesystem.rs
@@ -1,13 +1,10 @@
-#[cfg(any(windows, unix))]
-use std::path::Path;
 #[cfg(unix)]
-use {
-    nix::{
-        sys::stat::{mode_t, Mode},
-        unistd::{Gid, Uid},
-    },
-    std::os::unix::fs::MetadataExt,
+use nix::{
+    errno::Errno,
+    unistd::{access, AccessFlags},
 };
+#[cfg(any(windows, unix))]
+use std::path::Path;
 
 // The result of checking whether we have permission to cd to a directory
 #[derive(Debug)]
@@ -32,11 +29,8 @@ pub fn have_permission(dir: impl AsRef<Path>) -> PermissionResult<'static> {
     }
 }
 
-#[cfg(all(unix, target_os = "android"))]
+#[cfg(unix)]
 pub fn have_permission(dir: impl AsRef<Path>) -> PermissionResult<'static> {
-    use nix::errno::Errno;
-    use nix::unistd::{AccessFlags, access};
-
     match access(dir.as_ref(), AccessFlags::X_OK) {
         Ok(_) => PermissionResult::PermissionOk,
         Err(Errno::EPERM) => PermissionResult::PermissionDenied("Permission denied"),
@@ -45,76 +39,6 @@ pub fn have_permission(dir: impl AsRef<Path>) -> PermissionResult<'static> {
     }
 }
 
-#[cfg(all(unix, not(target_os = "android")))]
-pub fn have_permission(dir: impl AsRef<Path>) -> PermissionResult<'static> {
-    match dir.as_ref().metadata() {
-        Ok(metadata) => {
-            let mode = Mode::from_bits_truncate(metadata.mode() as mode_t);
-            let current_user_uid = users::get_current_uid();
-            if current_user_uid.is_root() {
-                return PermissionResult::PermissionOk;
-            }
-            let current_user_gid = users::get_current_gid();
-            let owner_user = Uid::from_raw(metadata.uid());
-            let owner_group = Gid::from_raw(metadata.gid());
-            match (
-                current_user_uid == owner_user,
-                current_user_gid == owner_group,
-            ) {
-                (true, _) => {
-                    if mode.contains(Mode::S_IXUSR) {
-                        PermissionResult::PermissionOk
-                    } else {
-                        PermissionResult::PermissionDenied(
-                            "You are the owner but do not have execute permission",
-                        )
-                    }
-                }
-                (false, true) => {
-                    if mode.contains(Mode::S_IXGRP) {
-                        PermissionResult::PermissionOk
-                    } else {
-                        PermissionResult::PermissionDenied(
-                            "You are in the group but do not have execute permission",
-                        )
-                    }
-                }
-                (false, false) => {
-                    if mode.contains(Mode::S_IXOTH)
-                        || (mode.contains(Mode::S_IXGRP)
-                            && any_group(current_user_gid, owner_group))
-                    {
-                        PermissionResult::PermissionOk
-                    } else {
-                        PermissionResult::PermissionDenied(
-                            "You are neither the owner, in the group, nor the super user and do not have permission",
-                        )
-                    }
-                }
-            }
-        }
-        Err(_) => PermissionResult::PermissionDenied("Could not retrieve file metadata"),
-    }
-}
-
-#[cfg(any(target_os = "linux", target_os = "freebsd", target_os = "android"))]
-fn any_group(_current_user_gid: Gid, owner_group: Gid) -> bool {
-    users::current_user_groups()
-        .unwrap_or_default()
-        .contains(&owner_group)
-}
-
-#[cfg(all(
-    unix,
-    not(any(target_os = "linux", target_os = "freebsd", target_os = "android"))
-))]
-fn any_group(current_user_gid: Gid, owner_group: Gid) -> bool {
-    users::get_current_username()
-        .and_then(|name| users::get_user_groups(&name, current_user_gid))
-        .unwrap_or_default()
-        .contains(&owner_group)
-}
-
 #[cfg(unix)]
 pub mod users {
     use nix::unistd::{Gid, Group, Uid, User};

From bcb99106b00f205acd932c8a418e539af11c27a1 Mon Sep 17 00:00:00 2001
From: poly000 <1348292515@qq.com>
Date: Fri, 21 Mar 2025 23:27:44 +0800
Subject: [PATCH 3/8] enhance: remove the unused explanation

---
 crates/nu-cli/src/repl.rs              |  2 +-
 crates/nu-command/src/filesystem/cd.rs |  2 +-
 crates/nu-utils/src/filesystem.rs      | 19 +++++++------------
 3 files changed, 9 insertions(+), 14 deletions(-)

diff --git a/crates/nu-cli/src/repl.rs b/crates/nu-cli/src/repl.rs
index 6641047ad9d9b..ae384efd7805b 100644
--- a/crates/nu-cli/src/repl.rs
+++ b/crates/nu-cli/src/repl.rs
@@ -864,7 +864,7 @@ fn do_auto_cd(
         path.to_string_lossy().to_string()
     };
 
-    if let PermissionResult::PermissionDenied(_) = have_permission(path.clone()) {
+    if let PermissionResult::PermissionDenied = have_permission(path.clone()) {
         report_shell_error(
             engine_state,
             &ShellError::Io(IoError::new_with_additional_context(
diff --git a/crates/nu-command/src/filesystem/cd.rs b/crates/nu-command/src/filesystem/cd.rs
index 5ef3e4eb5e5ad..be5381ae7d865 100644
--- a/crates/nu-command/src/filesystem/cd.rs
+++ b/crates/nu-command/src/filesystem/cd.rs
@@ -132,7 +132,7 @@ impl Command for Cd {
                 stack.set_cwd(path)?;
                 Ok(PipelineData::empty())
             }
-            PermissionResult::PermissionDenied(_) => {
+            PermissionResult::PermissionDenied => {
                 Err(IoError::new(std::io::ErrorKind::PermissionDenied, call.head, path).into())
             }
         }
diff --git a/crates/nu-utils/src/filesystem.rs b/crates/nu-utils/src/filesystem.rs
index cbd8612140a8c..1b5876bf92063 100644
--- a/crates/nu-utils/src/filesystem.rs
+++ b/crates/nu-utils/src/filesystem.rs
@@ -1,26 +1,23 @@
 #[cfg(unix)]
-use nix::{
-    errno::Errno,
-    unistd::{access, AccessFlags},
-};
+use nix::unistd::{access, AccessFlags};
 #[cfg(any(windows, unix))]
 use std::path::Path;
 
 // The result of checking whether we have permission to cd to a directory
 #[derive(Debug)]
-pub enum PermissionResult<'a> {
+pub enum PermissionResult {
     PermissionOk,
-    PermissionDenied(&'a str),
+    PermissionDenied,
 }
 
 // TODO: Maybe we should use file_attributes() from https://doc.rust-lang.org/std/os/windows/fs/trait.MetadataExt.html
 // More on that here: https://learn.microsoft.com/en-us/windows/win32/fileio/file-attribute-constants
 #[cfg(windows)]
-pub fn have_permission(dir: impl AsRef<Path>) -> PermissionResult<'static> {
+pub fn have_permission(dir: impl AsRef<Path>) -> PermissionResult {
     match dir.as_ref().read_dir() {
         Err(e) => {
             if matches!(e.kind(), std::io::ErrorKind::PermissionDenied) {
-                PermissionResult::PermissionDenied("Folder is unable to be read")
+                PermissionResult::PermissionDenied
             } else {
                 PermissionResult::PermissionOk
             }
@@ -30,12 +27,10 @@ pub fn have_permission(dir: impl AsRef<Path>) -> PermissionResult<'static> {
 }
 
 #[cfg(unix)]
-pub fn have_permission(dir: impl AsRef<Path>) -> PermissionResult<'static> {
+pub fn have_permission(dir: impl AsRef<Path>) -> PermissionResult {
     match access(dir.as_ref(), AccessFlags::X_OK) {
         Ok(_) => PermissionResult::PermissionOk,
-        Err(Errno::EPERM) => PermissionResult::PermissionDenied("Permission denied"),
-        Err(Errno::ENOENT) => PermissionResult::PermissionDenied("Path not exists?"),
-        Err(_) => PermissionResult::PermissionDenied("Unknown error"),
+        Err(_) => PermissionResult::PermissionDenied,
     }
 }
 

From e444bdd661ff8918bf9b3a4e4a97cedd987cf2c9 Mon Sep 17 00:00:00 2001
From: poly000 <1348292515@qq.com>
Date: Sat, 22 Mar 2025 01:07:54 +0800
Subject: [PATCH 4/8] fix: ensure to check for effective uid rather than real
 uid

---
 crates/nu-utils/src/filesystem.rs | 7 +++++--
 1 file changed, 5 insertions(+), 2 deletions(-)

diff --git a/crates/nu-utils/src/filesystem.rs b/crates/nu-utils/src/filesystem.rs
index 1b5876bf92063..a8e9076281d7a 100644
--- a/crates/nu-utils/src/filesystem.rs
+++ b/crates/nu-utils/src/filesystem.rs
@@ -1,5 +1,8 @@
 #[cfg(unix)]
-use nix::unistd::{access, AccessFlags};
+use nix::{
+    fcntl::AtFlags,
+    unistd::{faccessat, AccessFlags},
+};
 #[cfg(any(windows, unix))]
 use std::path::Path;
 
@@ -28,7 +31,7 @@ pub fn have_permission(dir: impl AsRef<Path>) -> PermissionResult {
 
 #[cfg(unix)]
 pub fn have_permission(dir: impl AsRef<Path>) -> PermissionResult {
-    match access(dir.as_ref(), AccessFlags::X_OK) {
+    match faccessat(None, dir.as_ref(), AccessFlags::X_OK, AtFlags::AT_EACCESS) {
         Ok(_) => PermissionResult::PermissionOk,
         Err(_) => PermissionResult::PermissionDenied,
     }

From 6f9a402e881da47927d642c7a1baed9e646e605a Mon Sep 17 00:00:00 2001
From: poly000 <1348292515@qq.com>
Date: Wed, 26 Mar 2025 18:04:26 +0800
Subject: [PATCH 5/8] fix: prefer `access()` than `faccessat()`

---
 crates/nu-utils/src/filesystem.rs | 20 ++++++++++++++++----
 1 file changed, 16 insertions(+), 4 deletions(-)

diff --git a/crates/nu-utils/src/filesystem.rs b/crates/nu-utils/src/filesystem.rs
index a8e9076281d7a..4702b4d1a6315 100644
--- a/crates/nu-utils/src/filesystem.rs
+++ b/crates/nu-utils/src/filesystem.rs
@@ -1,7 +1,7 @@
 #[cfg(unix)]
 use nix::{
     fcntl::AtFlags,
-    unistd::{faccessat, AccessFlags},
+    unistd::{access, faccessat, AccessFlags, Uid},
 };
 #[cfg(any(windows, unix))]
 use std::path::Path;
@@ -31,10 +31,13 @@ pub fn have_permission(dir: impl AsRef<Path>) -> PermissionResult {
 
 #[cfg(unix)]
 pub fn have_permission(dir: impl AsRef<Path>) -> PermissionResult {
-    match faccessat(None, dir.as_ref(), AccessFlags::X_OK, AtFlags::AT_EACCESS) {
-        Ok(_) => PermissionResult::PermissionOk,
-        Err(_) => PermissionResult::PermissionDenied,
+    // `faccessat()` from modern libc does not always take ACL into account.
+    // We prefer call `access()` instead as possible.
+    if Uid::current() == Uid::effective() {
+        return access(dir.as_ref(), AccessFlags::X_OK).into();
     }
+
+    faccessat(None, dir.as_ref(), AccessFlags::X_OK, AtFlags::AT_EACCESS).into()
 }
 
 #[cfg(unix)]
@@ -144,3 +147,12 @@ pub mod users {
         }
     }
 }
+
+impl<T, E> From<Result<T, E>> for PermissionResult {
+    fn from(value: Result<T, E>) -> Self {
+        match value {
+            Ok(_) => Self::PermissionOk,
+            Err(_) => Self::PermissionDenied,
+        }
+    }
+}

From 6db6b88787a5cb33ba720a5ec628d32ecfb3fb15 Mon Sep 17 00:00:00 2001
From: poly000 <1348292515@qq.com>
Date: Wed, 26 Mar 2025 18:37:37 +0800
Subject: [PATCH 6/8] docs(nu-comment): explain the problem with `faccessat()`
 call

---
 crates/nu-utils/src/filesystem.rs | 9 ++++++++-
 1 file changed, 8 insertions(+), 1 deletion(-)

diff --git a/crates/nu-utils/src/filesystem.rs b/crates/nu-utils/src/filesystem.rs
index 4702b4d1a6315..4ea6d914c3f74 100644
--- a/crates/nu-utils/src/filesystem.rs
+++ b/crates/nu-utils/src/filesystem.rs
@@ -33,10 +33,17 @@ pub fn have_permission(dir: impl AsRef<Path>) -> PermissionResult {
 pub fn have_permission(dir: impl AsRef<Path>) -> PermissionResult {
     // `faccessat()` from modern libc does not always take ACL into account.
     // We prefer call `access()` instead as possible.
-    if Uid::current() == Uid::effective() {
+    //
+    // Android refuses to check permission on flag != 0 in their `faccessat()`,
+    // see https://android.googlesource.com/platform/bionic/+/master/libc/bionic/faccessat.cpp.
+    if Uid::current() == Uid::effective() || cfg!(target_os = "android") {
         return access(dir.as_ref(), AccessFlags::X_OK).into();
     }
 
+    // Normally, this should happen only if user has set SETUID bit for nu executable
+    // (which is strongly discouraged).
+    // Modern sudo installation checks for owner=root plus SETUID bit on, thus,
+    // `sudo nu` for example, will not lead to EUID != RUID.
     faccessat(None, dir.as_ref(), AccessFlags::X_OK, AtFlags::AT_EACCESS).into()
 }
 

From c07bf920a5a16214bc788fa117df14be3a74d5a9 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=E8=8E=AF=E5=87=9B?= <1348292515@qq.com>
Date: Wed, 26 Mar 2025 21:23:10 +0800
Subject: [PATCH 7/8] docs: `have_permission` checks for directory
 accessibility

Co-authored-by: Stefan Holderbach <sholderbach@users.noreply.github.com>
---
 crates/nu-utils/src/filesystem.rs | 1 +
 1 file changed, 1 insertion(+)

diff --git a/crates/nu-utils/src/filesystem.rs b/crates/nu-utils/src/filesystem.rs
index 4ea6d914c3f74..7380a1a1979a1 100644
--- a/crates/nu-utils/src/filesystem.rs
+++ b/crates/nu-utils/src/filesystem.rs
@@ -30,6 +30,7 @@ pub fn have_permission(dir: impl AsRef<Path>) -> PermissionResult {
 }
 
 #[cfg(unix)]
+/// Check that the process' user id has permissions to execute or in the case of a directory traverse the particular directory
 pub fn have_permission(dir: impl AsRef<Path>) -> PermissionResult {
     // `faccessat()` from modern libc does not always take ACL into account.
     // We prefer call `access()` instead as possible.

From 039411edb4283788100119eae3594d7ae9c477e3 Mon Sep 17 00:00:00 2001
From: poly000 <1348292515@qq.com>
Date: Wed, 26 Mar 2025 23:45:17 +0800
Subject: [PATCH 8/8] perf(nu-command): invoke only `access()` syscall

---
 crates/nu-utils/src/filesystem.rs | 28 +++++++++-------------------
 1 file changed, 9 insertions(+), 19 deletions(-)

diff --git a/crates/nu-utils/src/filesystem.rs b/crates/nu-utils/src/filesystem.rs
index 7380a1a1979a1..4552d73ec304a 100644
--- a/crates/nu-utils/src/filesystem.rs
+++ b/crates/nu-utils/src/filesystem.rs
@@ -1,8 +1,5 @@
 #[cfg(unix)]
-use nix::{
-    fcntl::AtFlags,
-    unistd::{access, faccessat, AccessFlags, Uid},
-};
+use nix::unistd::{access, AccessFlags};
 #[cfg(any(windows, unix))]
 use std::path::Path;
 
@@ -30,22 +27,15 @@ pub fn have_permission(dir: impl AsRef<Path>) -> PermissionResult {
 }
 
 #[cfg(unix)]
-/// Check that the process' user id has permissions to execute or in the case of a directory traverse the particular directory
+/// Check that the process' user id has permissions to execute or
+/// in the case of a directory traverse the particular directory
 pub fn have_permission(dir: impl AsRef<Path>) -> PermissionResult {
-    // `faccessat()` from modern libc does not always take ACL into account.
-    // We prefer call `access()` instead as possible.
-    //
-    // Android refuses to check permission on flag != 0 in their `faccessat()`,
-    // see https://android.googlesource.com/platform/bionic/+/master/libc/bionic/faccessat.cpp.
-    if Uid::current() == Uid::effective() || cfg!(target_os = "android") {
-        return access(dir.as_ref(), AccessFlags::X_OK).into();
-    }
-
-    // Normally, this should happen only if user has set SETUID bit for nu executable
-    // (which is strongly discouraged).
-    // Modern sudo installation checks for owner=root plus SETUID bit on, thus,
-    // `sudo nu` for example, will not lead to EUID != RUID.
-    faccessat(None, dir.as_ref(), AccessFlags::X_OK, AtFlags::AT_EACCESS).into()
+    // We check permissions for real user id, but that's fine, because in
+    // proper installations of nushell, effective UID (EUID) rarely differs
+    // from real UID (RUID). We strongly advise against setting the setuid bit
+    // on the nushell executable or shebang scripts starts with `#!/usr/bin/env nu` e.g.
+    // Most Unix systems ignore setuid on shebang by default anyway.
+    access(dir.as_ref(), AccessFlags::X_OK).into()
 }
 
 #[cfg(unix)]
