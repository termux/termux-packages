The support for incomplete type in libcxx's deque requires `LIBCXX_ABI_VERSION >= 2`, but NDK's libcxx has version 1

[1] https://github.com/llvm/llvm-project/blob/a29be9f28e8e0d4ca7a8a3cfdffe616ac780c754/libcxx/include/deque#L278
[2] https://github.com/llvm/llvm-project/blob/a29be9f28e8e0d4ca7a8a3cfdffe616ac780c754/libcxx/include/__configuration/abi.h#L40-L45

--- a/apt-pkg/solver3.h
+++ b/apt-pkg/solver3.h
@@ -80,7 +80,64 @@
 {
    enum class Decision : uint16_t;
    enum class Hint : uint16_t;
-   struct Var;
+   /**
+    * \brief Tagged union holding either a package, version, or nothing; representing the reason for installing something.
+    *
+    * We want to keep track of the reason why things are being installed such that
+    * we can have sensible debugging abilities; and we want to generically refer to
+    * both packages and versions as variables, hence this class was added.
+    *
+    */
+   struct Var
+   {
+      uint32_t value;
+
+      explicit constexpr Var(uint32_t value = 0) : value{value} {}
+      explicit Var(pkgCache::PkgIterator const &Pkg) : value(uint32_t(Pkg.MapPointer()) << 1) {}
+      explicit Var(pkgCache::VerIterator const &Ver) : value(uint32_t(Ver.MapPointer()) << 1 | 1) {}
+
+      inline constexpr bool isVersion() const { return value & 1; }
+      inline constexpr uint32_t mapPtr() const { return value >> 1; }
+
+      // \brief Return the package, if any, otherwise 0.
+      map_pointer<pkgCache::Package> Pkg() const
+      {
+	 return isVersion() ? 0 : map_pointer<pkgCache::Package>{mapPtr()};
+      }
+      // \brief Return the version, if any, otherwise 0.
+      map_pointer<pkgCache::Version> Ver() const
+      {
+	 return isVersion() ? map_pointer<pkgCache::Version>{mapPtr()} : 0;
+      }
+      // \brief Return the package iterator if storing a package, or an empty one
+      pkgCache::PkgIterator Pkg(pkgCache &cache) const
+      {
+	 return isVersion() ? pkgCache::PkgIterator() : pkgCache::PkgIterator(cache, cache.PkgP + Pkg());
+      }
+      // \brief Return the version iterator if storing a package, or an empty end.
+      pkgCache::VerIterator Ver(pkgCache &cache) const
+      {
+	 return isVersion() ? pkgCache::VerIterator(cache, cache.VerP + Ver()) : pkgCache::VerIterator();
+      }
+      // \brief Return a package, cast from version if needed
+      pkgCache::PkgIterator CastPkg(pkgCache &cache) const
+      {
+	 return isVersion() ? Ver(cache).ParentPkg() : Pkg(cache);
+      }
+      // \brief Check if there is no reason.
+      constexpr bool empty() const { return value == 0; }
+      constexpr bool operator!=(Var const other) const { return value != other.value; }
+      constexpr bool operator==(Var const other) const { return value == other.value; }
+
+      std::string toString(pkgCache &cache) const
+      {
+	 if (auto P = Pkg(cache); not P.end())
+	    return P.FullName();
+	 if (auto V = Ver(cache); not V.end())
+	    return V.ParentPkg().FullName() + "=" + V.VerStr();
+	 return "(root)";
+      }
+   };
    struct CompareProviders3;
    struct State;
    struct Clause;
@@ -321,65 +378,6 @@
 }; // namespace APT
 
 /**
- * \brief Tagged union holding either a package, version, or nothing; representing the reason for installing something.
- *
- * We want to keep track of the reason why things are being installed such that
- * we can have sensible debugging abilities; and we want to generically refer to
- * both packages and versions as variables, hence this class was added.
- *
- */
-struct APT::Solver::Var
-{
-   uint32_t value;
-
-   explicit constexpr Var(uint32_t value = 0) : value{value} {}
-   explicit Var(pkgCache::PkgIterator const &Pkg) : value(uint32_t(Pkg.MapPointer()) << 1) {}
-   explicit Var(pkgCache::VerIterator const &Ver) : value(uint32_t(Ver.MapPointer()) << 1 | 1) {}
-
-   inline constexpr bool isVersion() const { return value & 1; }
-   inline constexpr uint32_t mapPtr() const { return value >> 1; }
-
-   // \brief Return the package, if any, otherwise 0.
-   map_pointer<pkgCache::Package> Pkg() const
-   {
-      return isVersion() ? 0 : map_pointer<pkgCache::Package>{mapPtr()};
-   }
-   // \brief Return the version, if any, otherwise 0.
-   map_pointer<pkgCache::Version> Ver() const
-   {
-      return isVersion() ? map_pointer<pkgCache::Version>{mapPtr()} : 0;
-   }
-   // \brief Return the package iterator if storing a package, or an empty one
-   pkgCache::PkgIterator Pkg(pkgCache &cache) const
-   {
-      return isVersion() ? pkgCache::PkgIterator() : pkgCache::PkgIterator(cache, cache.PkgP + Pkg());
-   }
-   // \brief Return the version iterator if storing a package, or an empty end.
-   pkgCache::VerIterator Ver(pkgCache &cache) const
-   {
-      return isVersion() ? pkgCache::VerIterator(cache, cache.VerP + Ver()) : pkgCache::VerIterator();
-   }
-   // \brief Return a package, cast from version if needed
-   pkgCache::PkgIterator CastPkg(pkgCache &cache) const
-   {
-      return isVersion() ? Ver(cache).ParentPkg() : Pkg(cache);
-   }
-   // \brief Check if there is no reason.
-   constexpr bool empty() const { return value == 0; }
-   constexpr bool operator!=(Var const other) const { return value != other.value; }
-   constexpr bool operator==(Var const other) const { return value == other.value; }
-
-   std::string toString(pkgCache &cache) const
-   {
-      if (auto P = Pkg(cache); not P.end())
-	 return P.FullName();
-      if (auto V = Ver(cache); not V.end())
-	 return V.ParentPkg().FullName() + "=" + V.VerStr();
-      return "(root)";
-   }
-};
-
-/**
  * \brief A single clause
  *
  * A clause is a normalized, expanded dependency, translated into an implication
