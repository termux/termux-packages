From 2d8121323286f062413f3dce1540665b95740d45 Mon Sep 17 00:00:00 2001
From: Chongyun Lee <licy183@termux.dev>
Date: Thu, 17 Apr 2025 03:03:03 +0800
Subject: [PATCH] reland jumbo for v8

Enable jumbo build for the following template(s):

- //v8/gni/v8.gni -> template("v8_source_set")
- //v8/gni/v8.gni -> template("v8_header_set")

---
 v8/BUILD.gn                                   | 104 ++++++++++++++++++
 v8/gni/v8.gni                                 |   7 +-
 .../baseline/arm/baseline-compiler-arm-inl.h  |   2 +
 v8/src/baseline/baseline-compiler.cc          |   2 +
 v8/src/compiler/backend/instruction.h         |   4 +-
 v8/src/compiler/heap-refs.cc                  |   4 +
 v8/src/compiler/revectorizer.cc               |   2 +
 .../turboshaft/loop-unrolling-reducer.cc      |   2 +
 .../wasm-in-js-inlining-reducer-inl.h         |   2 +
 .../wasm-load-elimination-reducer.h           |   1 +
 v8/src/compiler/wasm-compiler.cc              |   6 +-
 v8/src/diagnostics/perf-jit.cc                |   2 +
 v8/src/handles/global-handles.cc              |   4 +-
 v8/src/heap/code-range.cc                     |   2 +
 v8/src/heap/cppgc/concurrent-marker.cc        |   4 +
 v8/src/heap/cppgc/marker.cc                   |   4 +
 v8/src/heap/minor-mark-sweep.cc               |   4 +
 v8/src/inspector/BUILD.gn                     |   1 +
 v8/src/inspector/value-mirror.cc              |   4 +
 .../default-thread-isolated-allocator.cc      |   2 +
 v8/src/maglev/arm/maglev-ir-arm.cc            |   2 +
 v8/src/maglev/maglev-assembler-inl.h          |   4 +-
 v8/src/maglev/maglev-assembler.cc             |   2 +
 v8/src/maglev/maglev-code-generator.cc        |   4 +-
 v8/src/maglev/maglev-graph-builder.cc         |   3 +
 v8/src/maglev/maglev-ir.cc                    |   2 +
 v8/src/objects/js-atomics-synchronization.h   |   8 +-
 v8/src/objects/js-collator.cc                 |   4 +
 v8/src/objects/js-duration-format.cc          |   4 +-
 v8/src/objects/js-list-format.cc              |   4 +-
 v8/src/objects/js-plural-rules.cc             |   4 +
 .../experimental/experimental-compiler.cc     |   4 +-
 v8/src/regexp/regexp-compiler-tonode.cc       |   4 +
 v8/src/sandbox/testing.cc                     |   1 +
 v8/src/snapshot/read-only-deserializer.cc     |   4 +
 v8/src/torque/csa-generator.cc                |   6 +-
 v8/src/utils/sha-256.cc                       |   3 +
 v8/src/wasm/wasm-external-refs.cc             |   3 +
 v8/src/wasm/wrappers.cc                       |   2 +
 39 files changed, 206 insertions(+), 25 deletions(-)

diff --git a/v8/BUILD.gn b/v8/BUILD.gn
index 1540804a..11dc79e7 100644
--- a/v8/BUILD.gn
+++ b/v8/BUILD.gn
@@ -7,6 +7,7 @@ import("//build/config/arm.gni")
 import("//build/config/coverage/coverage.gni")
 import("//build/config/dcheck_always_on.gni")
 import("//build/config/host_byteorder.gni")
+import("//build/config/jumbo.gni")
 import("//build/config/mips.gni")
 import("//build/config/riscv.gni")
 import("//build/config/rust.gni")
@@ -3064,26 +3065,54 @@ v8_source_set("v8_initializers") {
     }
   }
 
+  jumbo_excluded_sources = [
+    # TODO(mostynb@vewd.com): don't exclude these http://crbug.com/752428
+    "src/builtins/builtins-async-iterator-gen.cc",
+    "src/builtins/builtins-async-generator-gen.cc",
+
+    # These source files take an unusually large amount of time to
+    # compile.  Build them separately to avoid bottlenecks.
+    "src/builtins/builtins-regexp-gen.cc",
+    "src/codegen/code-stub-assembler.cc",
+
+    # FIXME: Too many errors
+    "src/ic/binary-op-assembler.cc",
+    "src/ic/unary-op-assembler.cc",
+    "src/interpreter/interpreter-generator.cc",
+  ]
+
   if (v8_current_cpu == "x86") {
     sources += [
       ### gcmole(ia32) ###
       "src/builtins/ia32/builtins-ia32.cc",
     ]
+    jumbo_excluded_sources += [
+      "src/builtins/ia32/builtins-ia32.cc",
+    ]
   } else if (v8_current_cpu == "x64") {
     sources += [
       ### gcmole(x64) ###
       "src/builtins/x64/builtins-x64.cc",
     ]
+    jumbo_excluded_sources += [
+      "src/builtins/x64/builtins-x64.cc",
+    ]
   } else if (v8_current_cpu == "arm") {
     sources += [
       ### gcmole(arm) ###
       "src/builtins/arm/builtins-arm.cc",
     ]
+    jumbo_excluded_sources += [
+      "src/builtins/arm/builtins-arm.cc",
+    ]
   } else if (v8_current_cpu == "arm64") {
     sources += [
       ### gcmole(arm64) ###
       "src/builtins/arm64/builtins-arm64.cc",
     ]
+    jumbo_excluded_sources += [
+      "src/builtins/arm64/builtins-arm64.cc",
+    ]
   } else if (v8_current_cpu == "mips64" || v8_current_cpu == "mips64el") {
     sources += [
       ### gcmole(mips64el) ###
@@ -5120,6 +5149,19 @@ v8_compiler_sources = [
   "src/compiler/zone-stats.cc",
 ]
 
+v8_compiler_sources_jumbo_excluded = [
+  "src/compiler/bytecode-analysis.cc",
+
+  # `using namespace compiler::turboshaft` causes `Type` ambiguous
+  "src/compiler/backend/instruction-selector.cc",
+
+  # FIXME:
+  # no type named 'kTurboshaft' in 'v8::internal::compiler::PhaseKind'
+  # no type named 'kThreadSpecific' in 'v8::internal::RuntimeCallStats'
+  "src/compiler/turboshaft/csa-optimize-phase.cc",
+  "src/compiler/turboshaft/pipelines.cc",
+]
+
 if (!v8_enable_maglev) {
   # When Maglev is not enabled, Turboshaft still needs Maglev's graph builder.
   v8_compiler_sources += [
@@ -5140,6 +5182,11 @@ if (v8_current_cpu == "x86") {
     "src/compiler/backend/ia32/instruction-scheduler-ia32.cc",
     "src/compiler/backend/ia32/instruction-selector-ia32.cc",
   ]
+  v8_compiler_sources_jumbo_excluded += [
+    # `using namespace turboshaft` causes `Type` ambiguous
+    "src/compiler/backend/ia32/instruction-selector-ia32.cc",
+  ]
+
 } else if (v8_current_cpu == "x64") {
   v8_compiler_sources += [
     ### gcmole(x64) ###
@@ -5148,6 +5195,9 @@ if (v8_current_cpu == "x86") {
     "src/compiler/backend/x64/instruction-selector-x64.cc",
     "src/compiler/backend/x64/unwinding-info-writer-x64.cc",
   ]
+  v8_compiler_sources_jumbo_excluded += [
+    "src/compiler/backend/x64/instruction-selector-x64.cc", # Ditto
+  ]
 } else if (v8_current_cpu == "arm") {
   v8_compiler_sources += [
     ### gcmole(arm) ###
@@ -5156,6 +5206,9 @@ if (v8_current_cpu == "x86") {
     "src/compiler/backend/arm/instruction-selector-arm.cc",
     "src/compiler/backend/arm/unwinding-info-writer-arm.cc",
   ]
+  v8_compiler_sources_jumbo_excluded += [
+    "src/compiler/backend/arm/instruction-selector-arm.cc", # Ditto
+  ]
 } else if (v8_current_cpu == "arm64") {
   v8_compiler_sources += [
     ### gcmole(arm64) ###
@@ -5164,6 +5217,9 @@ if (v8_current_cpu == "x86") {
     "src/compiler/backend/arm64/instruction-selector-arm64.cc",
     "src/compiler/backend/arm64/unwinding-info-writer-arm64.cc",
   ]
+  v8_compiler_sources_jumbo_excluded += [
+    "src/compiler/backend/arm64/instruction-selector-arm64.cc", # Ditto
+  ]
 } else if (v8_current_cpu == "mips64" || v8_current_cpu == "mips64el") {
   v8_compiler_sources += [
     ### gcmole(mips64el) ###
@@ -5255,6 +5311,7 @@ v8_source_set("v8_compiler_for_mksnapshot_source_set") {
   visibility = [ ":*" ]  # Only targets in this file can depend on this.
 
   sources = v8_compiler_sources
+  jumbo_excluded_sources = v8_compiler_sources_jumbo_excluded
 
   public_deps = [
     ":generate_bytecode_builtins_list",
@@ -5289,6 +5346,7 @@ v8_source_set("v8_compiler") {
 
   if (v8_enable_turbofan) {
     sources = v8_compiler_sources
+    jumbo_excluded_sources = v8_compiler_sources_jumbo_excluded
   } else {
     # With Turbofan disabled, we only include the stubbed-out API.
     sources = [ "src/compiler/turbofan-disabled.cc" ]
@@ -5838,6 +5896,8 @@ v8_source_set("v8_base_without_compiler") {
     ]
   }
 
+  jumbo_excluded_sources = []
+
   if (v8_enable_maglev) {
     sources += [
       "src/maglev/maglev-assembler.cc",
@@ -5865,6 +5925,10 @@ v8_source_set("v8_base_without_compiler") {
         "src/maglev/arm64/maglev-assembler-arm64.cc",
         "src/maglev/arm64/maglev-ir-arm64.cc",
       ]
+      jumbo_excluded_sources += [
+        "src/maglev/arm64/maglev-assembler-arm64.cc",
+        "src/maglev/arm64/maglev-ir-arm64.cc",
+      ]
     } else if (v8_current_cpu == "riscv64") {
       sources += [
         "src/maglev/riscv/maglev-assembler-riscv.cc",
@@ -5875,6 +5939,10 @@ v8_source_set("v8_base_without_compiler") {
         "src/maglev/x64/maglev-assembler-x64.cc",
         "src/maglev/x64/maglev-ir-x64.cc",
       ]
+      jumbo_excluded_sources += [
+        "src/maglev/x64/maglev-assembler-x64.cc",
+        "src/maglev/x64/maglev-ir-x64.cc",
+      ]
     } else if (v8_current_cpu == "s390x") {
       sources += [
         "src/maglev/s390/maglev-assembler-s390.cc",
@@ -5948,6 +6016,17 @@ v8_source_set("v8_base_without_compiler") {
       "src/wasm/well-known-imports.cc",
       "src/wasm/wrappers.cc",
     ]
+    jumbo_excluded_sources += [
+      # Too many marco conflictions
+      "src/wasm/baseline/liftoff-compiler.cc",
+
+      # Too many symbol conflictions
+      "src/asmjs/asm-js.cc",
+      "src/asmjs/asm-parser.cc",
+      "src/asmjs/asm-scanner.cc",
+      "src/wasm/turboshaft-graph-interface.cc",
+      "src/wasm/wasm-module.cc",
+    ]
     if (v8_wasm_random_fuzzers) {
       sources += [
         ### gcmole(all) ###
@@ -5982,6 +6061,26 @@ v8_source_set("v8_base_without_compiler") {
     sources += [ "src/heap/reference-summarizer.cc" ]
   }
 
+  jumbo_excluded_sources += [
+    "src/execution/clobber-registers.cc", # Host asm vs target asm includes
+    # TODO(mostynb@vewd.com): don't exclude these http://crbug.com/752428
+    "src/profiler/heap-snapshot-generator.cc",  # Macro clash in mman-linux.h
+    "src/heap/local-heap.cc",
+    "src/heap/safepoint.cc",
+    "src/objects/js-display-names.cc",
+    "src/objects/js-relative-time-format.cc",
+    "src/objects/js-temporal-objects.cc",
+    "src/utils/ostreams.cc",
+
+    # These source files take an unusually large amount of time to
+    # compile.  Build them separately to avoid bottlenecks.
+    "src/api/api.cc",
+    "src/heap/heap.cc",
+    "src/objects/elements.cc",
+    "src/objects/objects.cc",
+    "src/parsing/parser.cc",
+  ]
+
   if (v8_current_cpu == "x86") {
     sources += [
       ### gcmole(ia32) ###
@@ -6088,6 +6187,11 @@ v8_source_set("v8_base_without_compiler") {
     if (is_win) {
       sources += [ "src/diagnostics/unwinding-info-win64.cc" ]
     }
+    jumbo_excluded_sources += [
+      # TODO(mostynb@vewd.com): fix this code so it doesn't need
+      # to be excluded, see the comments inside.
+      "src/codegen/arm64/instructions-arm64-constants.cc",
+    ]
   } else if (v8_current_cpu == "mips64" || v8_current_cpu == "mips64el") {
     sources += [
       ### gcmole(mips64el) ###
diff --git a/v8/gni/v8.gni b/v8/gni/v8.gni
index e137c84b..77eccb62 100644
--- a/v8/gni/v8.gni
+++ b/v8/gni/v8.gni
@@ -4,6 +4,7 @@
 
 import("//build/config/chrome_build.gni")
 import("//build/config/compiler/pgo/pgo.gni")
+import("//build/config/jumbo.gni")
 import("//build/config/gclient_args.gni")
 import("//build/config/ios/config.gni")
 import("//build/config/ios/ios_sdk_overrides.gni")
@@ -333,9 +334,9 @@ template("v8_source_set") {
       defined(v8_static_library) && v8_static_library && is_win) {
     link_target_type = "split_static_library"
   } else if (defined(v8_static_library) && v8_static_library) {
-    link_target_type = "static_library"
+    link_target_type = "jumbo_static_library"
   } else {
-    link_target_type = "source_set"
+    link_target_type = "jumbo_source_set"
   }
   target(link_target_type, target_name) {
     forward_variables_from(invoker,
@@ -354,7 +355,7 @@ template("v8_source_set") {
 }
 
 template("v8_header_set") {
-  source_set(target_name) {
+  jumbo_source_set(target_name) {
     forward_variables_from(invoker, "*", [ "configs" ])
     configs -= v8_remove_configs
     configs += v8_add_configs
diff --git a/v8/src/baseline/arm/baseline-compiler-arm-inl.h b/v8/src/baseline/arm/baseline-compiler-arm-inl.h
index 6d99dbe5..d6805a0a 100644
--- a/v8/src/baseline/arm/baseline-compiler-arm-inl.h
+++ b/v8/src/baseline/arm/baseline-compiler-arm-inl.h
@@ -95,6 +95,8 @@ void BaselineCompiler::VerifyFrameSize() {
   __ masm()->Assert(eq, AbortReason::kUnexpectedStackPointer);
 }
 
+#undef __
+
 }  // namespace baseline
 }  // namespace internal
 }  // namespace v8
diff --git a/v8/src/baseline/baseline-compiler.cc b/v8/src/baseline/baseline-compiler.cc
index 67c7ed81..1e90dfcf 100644
--- a/v8/src/baseline/baseline-compiler.cc
+++ b/v8/src/baseline/baseline-compiler.cc
@@ -2483,6 +2483,8 @@ SaveAccumulatorScope::~SaveAccumulatorScope() {
 #undef RCS_BASELINE_SCOPE
 #undef __
 
+#undef  __
+
 }  // namespace baseline
 }  // namespace internal
 }  // namespace v8
diff --git a/v8/src/compiler/backend/instruction.h b/v8/src/compiler/backend/instruction.h
index b6231ca2..c0751082 100644
--- a/v8/src/compiler/backend/instruction.h
+++ b/v8/src/compiler/backend/instruction.h
@@ -520,9 +520,9 @@ class LocationOperand : public InstructionOperand {
     return static_cast<int64_t>(value_) >> IndexField::kShift;
   }
 
-  Register GetRegister() const {
+  v8::internal::Register GetRegister() const {
     DCHECK(IsRegister());
-    return Register::from_code(register_code());
+    return v8::internal::Register::from_code(register_code());
   }
 
   FloatRegister GetFloatRegister() const {
diff --git a/v8/src/compiler/heap-refs.cc b/v8/src/compiler/heap-refs.cc
index 3edb331d..84c8db51 100644
--- a/v8/src/compiler/heap-refs.cc
+++ b/v8/src/compiler/heap-refs.cc
@@ -27,6 +27,8 @@
 #include "src/objects/property-cell.h"
 #include "src/objects/template-objects-inl.h"
 
+#define Is64 Is64_HeapRefs
+
 namespace v8 {
 namespace internal {
 namespace compiler {
@@ -2520,3 +2522,5 @@ unsigned CodeRef::GetInlinedBytecodeSize() const {
 }  // namespace compiler
 }  // namespace internal
 }  // namespace v8
+
+#undef Is64
diff --git a/v8/src/compiler/revectorizer.cc b/v8/src/compiler/revectorizer.cc
index 1d332c42..dc9e3906 100644
--- a/v8/src/compiler/revectorizer.cc
+++ b/v8/src/compiler/revectorizer.cc
@@ -1459,3 +1459,5 @@ void Revectorizer::PrintStores(ZoneMap<Node*, StoreNodeSet>* store_chains) {
 }  // namespace compiler
 }  // namespace internal
 }  // namespace v8
+
+#undef TRACE
diff --git a/v8/src/compiler/turboshaft/loop-unrolling-reducer.cc b/v8/src/compiler/turboshaft/loop-unrolling-reducer.cc
index cc5b406f..e0f35349 100644
--- a/v8/src/compiler/turboshaft/loop-unrolling-reducer.cc
+++ b/v8/src/compiler/turboshaft/loop-unrolling-reducer.cc
@@ -577,3 +577,5 @@ StaticCanonicalForLoopMatcher::InvertComparisonOp(CmpOp op) {
 }
 
 }  // namespace v8::internal::compiler::turboshaft
+
+#undef TRACE
diff --git a/v8/src/compiler/turboshaft/wasm-in-js-inlining-reducer-inl.h b/v8/src/compiler/turboshaft/wasm-in-js-inlining-reducer-inl.h
index b73e8c38..357bde56 100644
--- a/v8/src/compiler/turboshaft/wasm-in-js-inlining-reducer-inl.h
+++ b/v8/src/compiler/turboshaft/wasm-in-js-inlining-reducer-inl.h
@@ -1289,6 +1289,8 @@ V<Any> WasmInJSInliningReducer<Next>::TryInlineWasmCall(
   return emitting_decoder.interface().Result();
 }
 
+#undef TRACE
+
 }  // namespace v8::internal::compiler::turboshaft
 
 #include "src/compiler/turboshaft/undef-assembler-macros.inc"
diff --git a/v8/src/compiler/turboshaft/wasm-load-elimination-reducer.h b/v8/src/compiler/turboshaft/wasm-load-elimination-reducer.h
index b60da48d..f9c568e5 100644
--- a/v8/src/compiler/turboshaft/wasm-load-elimination-reducer.h
+++ b/v8/src/compiler/turboshaft/wasm-load-elimination-reducer.h
@@ -533,6 +533,7 @@ class WasmLoadEliminationReducer : public Next {
   EMIT_OP(StringAsWtf16)
   EMIT_OP(StringPrepareForGetCodeUnit)
   EMIT_OP(AnyConvertExtern)
+#undef EMIT_OP
 
   OpIndex REDUCE_INPUT_GRAPH(StructSet)(OpIndex ig_index,
                                         const StructSetOp& op) {
diff --git a/v8/src/compiler/wasm-compiler.cc b/v8/src/compiler/wasm-compiler.cc
index 0cb01614..4d512397 100644
--- a/v8/src/compiler/wasm-compiler.cc
+++ b/v8/src/compiler/wasm-compiler.cc
@@ -70,7 +70,7 @@ namespace {
 
 // Use MachineType::Pointer() over Tagged() to load root pointers because they
 // do not get compressed.
-#define LOAD_ROOT(RootName, factory_name)                         \
+#define LOAD_ROOT_IN_WASM_COMPILER(RootName, factory_name)                         \
   (isolate_ ? graph()->NewNode(mcgraph()->common()->HeapConstant( \
                   isolate_->factory()->factory_name()))           \
             : gasm_->LoadImmutable(                               \
@@ -277,7 +277,7 @@ Node* WasmGraphBuilder::Int32Constant(int32_t value) {
 }
 
 Node* WasmGraphBuilder::UndefinedValue() {
-  return LOAD_ROOT(UndefinedValue, undefined_value);
+  return LOAD_ROOT_IN_WASM_COMPILER(UndefinedValue, undefined_value);
 }
 
 // TODO(ahaas): Merge TrapId with TrapReason.
@@ -1298,6 +1298,6 @@ AssemblerOptions WasmStubAssemblerOptions() {
   };
 }
 
-#undef LOAD_ROOT
+#undef LOAD_ROOT_IN_WASM_COMPILER
 
 }  // namespace v8::internal::compiler
diff --git a/v8/src/diagnostics/perf-jit.cc b/v8/src/diagnostics/perf-jit.cc
index c509e422..e9ccece0 100644
--- a/v8/src/diagnostics/perf-jit.cc
+++ b/v8/src/diagnostics/perf-jit.cc
@@ -37,6 +37,8 @@
 #include <sys/mman.h>
 #include <unistd.h>
 
+#undef MAP_TYPE
+
 #include <memory>
 
 #include "src/base/platform/wrappers.h"
diff --git a/v8/src/handles/global-handles.cc b/v8/src/handles/global-handles.cc
index 4a504500..fdb26add 100644
--- a/v8/src/handles/global-handles.cc
+++ b/v8/src/handles/global-handles.cc
@@ -756,7 +756,7 @@ void GlobalHandles::InvokeSecondPassPhantomCallbacks() {
   if (scope.CheckReenter()) {
     TRACE_EVENT0("v8", "V8.GCPhantomHandleProcessingCallback");
     isolate()->heap()->CallGCPrologueCallbacks(
-        GCType::kGCTypeProcessWeakCallbacks, kNoGCCallbackFlags,
+        v8::GCType::kGCTypeProcessWeakCallbacks, kNoGCCallbackFlags,
         GCTracer::Scope::HEAP_EXTERNAL_PROLOGUE);
     {
       TRACE_GC(isolate_->heap()->tracer(),
@@ -768,7 +768,7 @@ void GlobalHandles::InvokeSecondPassPhantomCallbacks() {
       }
     }
     isolate()->heap()->CallGCEpilogueCallbacks(
-        GCType::kGCTypeProcessWeakCallbacks, kNoGCCallbackFlags,
+        v8::GCType::kGCTypeProcessWeakCallbacks, kNoGCCallbackFlags,
         GCTracer::Scope::HEAP_EXTERNAL_EPILOGUE);
   }
 }
diff --git a/v8/src/heap/code-range.cc b/v8/src/heap/code-range.cc
index f46af5ff..3e70505d 100644
--- a/v8/src/heap/code-range.cc
+++ b/v8/src/heap/code-range.cc
@@ -472,3 +472,5 @@ uint8_t* CodeRange::RemapEmbeddedBuiltins(Isolate* isolate,
 
 }  // namespace internal
 }  // namespace v8
+
+#undef TRACE
diff --git a/v8/src/heap/cppgc/concurrent-marker.cc b/v8/src/heap/cppgc/concurrent-marker.cc
index 5b16920d..e1e5199d 100644
--- a/v8/src/heap/cppgc/concurrent-marker.cc
+++ b/v8/src/heap/cppgc/concurrent-marker.cc
@@ -19,6 +19,8 @@ namespace {
 static constexpr double kMarkingScheduleRatioBeforeConcurrentPriorityIncrease =
     0.5;
 
+#define kDefaultDeadlineCheckInterval kDefaultDeadlineCheckInterval_ConcurrentMarker
+
 static constexpr size_t kDefaultDeadlineCheckInterval = 750u;
 
 template <StatsCollector::ConcurrentScopeId scope_id,
@@ -272,3 +274,5 @@ std::unique_ptr<Visitor> ConcurrentMarker::CreateConcurrentMarkingVisitor(
 
 }  // namespace internal
 }  // namespace cppgc
+
+#undef kDefaultDeadlineCheckInterval
diff --git a/v8/src/heap/cppgc/marker.cc b/v8/src/heap/cppgc/marker.cc
index a4ac8b6e..d582998d 100644
--- a/v8/src/heap/cppgc/marker.cc
+++ b/v8/src/heap/cppgc/marker.cc
@@ -57,6 +57,8 @@ bool ExitIncrementalMarkingIfNeeded(MarkingConfig config, HeapBase& heap) {
   return false;
 }
 
+#define kDefaultDeadlineCheckInterval kDefaultDeadlineCheckInterval_Marker
+
 static constexpr size_t kDefaultDeadlineCheckInterval = 150u;
 
 template <StatsCollector::ScopeId scope_id,
@@ -799,3 +801,5 @@ Marker::Marker(HeapBase& heap, cppgc::Platform* platform, MarkingConfig config)
 
 }  // namespace internal
 }  // namespace cppgc
+
+#undef kDefaultDeadlineCheckInterval
diff --git a/v8/src/heap/minor-mark-sweep.cc b/v8/src/heap/minor-mark-sweep.cc
index f0eed1ee..ee994ecd 100644
--- a/v8/src/heap/minor-mark-sweep.cc
+++ b/v8/src/heap/minor-mark-sweep.cc
@@ -57,6 +57,8 @@
 #include "src/tasks/cancelable-task.h"
 #include "src/utils/utils-inl.h"
 
+#define NewSpacePageEvacuationThreshold NewSpacePageEvacuationThreshold_MinorMarkSweep
+
 namespace v8 {
 namespace internal {
 
@@ -1119,3 +1121,5 @@ void MinorMarkSweepCollector::RequestGC() {
 }
 }  // namespace internal
 }  // namespace v8
+
+#undef NewSpacePageEvacuationThreshold
diff --git a/v8/src/inspector/BUILD.gn b/v8/src/inspector/BUILD.gn
index 9a863232..422ea603 100644
--- a/v8/src/inspector/BUILD.gn
+++ b/v8/src/inspector/BUILD.gn
@@ -171,6 +171,7 @@ v8_source_set("inspector") {
     "value-mirror.cc",
     "value-mirror.h",
   ]
+  jumbo_excluded_sources = [ "value-mirror.cc" ]
 }
 
 #Target to generate all .cc files.
diff --git a/v8/src/inspector/value-mirror.cc b/v8/src/inspector/value-mirror.cc
index b02dc237..2a8da5f4 100644
--- a/v8/src/inspector/value-mirror.cc
+++ b/v8/src/inspector/value-mirror.cc
@@ -23,6 +23,8 @@
 #include "src/inspector/v8-inspector-impl.h"
 #include "src/inspector/v8-serialization-duplicate-tracker.h"
 
+#define descriptionForSymbol descriptionForSymbol_ValueMirror
+
 namespace v8_inspector {
 
 using protocol::Response;
@@ -1948,3 +1950,5 @@ std::unique_ptr<ValueMirror> ValueMirror::create(v8::Local<v8::Context> context,
 }
 
 }  // namespace v8_inspector
+
+#undef descriptionForSymbol
diff --git a/v8/src/libplatform/default-thread-isolated-allocator.cc b/v8/src/libplatform/default-thread-isolated-allocator.cc
index bda0e43c..36a365b2 100644
--- a/v8/src/libplatform/default-thread-isolated-allocator.cc
+++ b/v8/src/libplatform/default-thread-isolated-allocator.cc
@@ -16,6 +16,8 @@
 #include <unistd.h>
 #endif
 
+#undef MAP_TYPE
+
 #if V8_HAS_PKU_JIT_WRITE_PROTECT
 
 extern int pkey_alloc(unsigned int flags, unsigned int access_rights) V8_WEAK;
diff --git a/v8/src/maglev/arm/maglev-ir-arm.cc b/v8/src/maglev/arm/maglev-ir-arm.cc
index 06fd376e..9cc52478 100644
--- a/v8/src/maglev/arm/maglev-ir-arm.cc
+++ b/v8/src/maglev/arm/maglev-ir-arm.cc
@@ -912,6 +912,8 @@ void Return::GenerateCode(MaglevAssembler* masm, const ProcessingState& state) {
   __ Ret();
 }
 
+#undef __
+
 }  // namespace maglev
 }  // namespace internal
 }  // namespace v8
diff --git a/v8/src/maglev/maglev-assembler-inl.h b/v8/src/maglev/maglev-assembler-inl.h
index 12ed316a..f75a408a 100644
--- a/v8/src/maglev/maglev-assembler-inl.h
+++ b/v8/src/maglev/maglev-assembler-inl.h
@@ -599,11 +599,11 @@ void CheckArgs(Args&&... args) {}
 
 #endif  // DEBUG
 
-template <typename Descriptor, typename... Args>
+template <typename Descriptor2, typename... Args>
 void PushArgumentsForBuiltin(MaglevAssembler* masm, std::tuple<Args...> args) {
   std::apply(
       [&](auto&&... stack_args) {
-        if (Descriptor::kStackArgumentOrder == StackArgumentOrder::kDefault) {
+        if (Descriptor2::kStackArgumentOrder == StackArgumentOrder::kDefault) {
           masm->Push(std::forward<decltype(stack_args)>(stack_args)...);
         } else {
           masm->PushReverse(std::forward<decltype(stack_args)>(stack_args)...);
diff --git a/v8/src/maglev/maglev-assembler.cc b/v8/src/maglev/maglev-assembler.cc
index 18addeed..ea3630ca 100644
--- a/v8/src/maglev/maglev-assembler.cc
+++ b/v8/src/maglev/maglev-assembler.cc
@@ -711,6 +711,8 @@ void MaglevAssembler::TryMigrateInstanceAndMarkMapAsMigrationTarget(
   save_register_state.DefineSafepoint();
 }
 
+#undef __
+
 }  // namespace maglev
 }  // namespace internal
 }  // namespace v8
diff --git a/v8/src/maglev/maglev-code-generator.cc b/v8/src/maglev/maglev-code-generator.cc
index 3bc1becd..f55a2864 100644
--- a/v8/src/maglev/maglev-code-generator.cc
+++ b/v8/src/maglev/maglev-code-generator.cc
@@ -427,7 +427,6 @@ class ParallelMoveResolver {
       // but otherwise this code cannot be compiled by compilers not yet
       // implementing CWG2518.
       static_assert(DecompressIfNeeded && COMPRESS_POINTERS_BOOL);
-
       if (targets.needs_decompression == kNeedsDecompression) {
         __ DecompressTagged(source_reg, source_reg);
       }
@@ -474,7 +473,6 @@ class ParallelMoveResolver {
       // but otherwise this code cannot be compiled by compilers not yet
       // implementing CWG2518.
       static_assert(DecompressIfNeeded && COMPRESS_POINTERS_BOOL);
-
       if (targets.needs_decompression == kNeedsDecompression) {
         __ DecompressTagged(register_with_slot_value, register_with_slot_value);
         targets.needs_decompression = kDoesNotNeedDecompression;
@@ -2091,6 +2089,8 @@ Handle<DeoptimizationData> MaglevCodeGenerator::GenerateDeoptimizationData(
   return data;
 }
 
+#undef __
+
 }  // namespace maglev
 }  // namespace internal
 }  // namespace v8
diff --git a/v8/src/maglev/maglev-graph-builder.cc b/v8/src/maglev/maglev-graph-builder.cc
index 3163f9f0..bde91b7b 100644
--- a/v8/src/maglev/maglev-graph-builder.cc
+++ b/v8/src/maglev/maglev-graph-builder.cc
@@ -15249,3 +15249,6 @@ DEBUG_BREAK_BYTECODE_LIST(DEBUG_BREAK)
 ReduceResult MaglevGraphBuilder::VisitIllegal() { UNREACHABLE(); }
 
 }  // namespace v8::internal::maglev
+
+#undef TRACE
+#undef FAIL
diff --git a/v8/src/maglev/maglev-ir.cc b/v8/src/maglev/maglev-ir.cc
index f642da05..cc0b0d64 100644
--- a/v8/src/maglev/maglev-ir.cc
+++ b/v8/src/maglev/maglev-ir.cc
@@ -8134,6 +8134,8 @@ std::optional<int32_t> NodeBase::TryGetInt32ConstantInput(int index) {
   return {};
 }
 
+#undef __
+
 }  // namespace maglev
 }  // namespace internal
 }  // namespace v8
diff --git a/v8/src/objects/js-atomics-synchronization.h b/v8/src/objects/js-atomics-synchronization.h
index 73a03828..8b458f2f 100644
--- a/v8/src/objects/js-atomics-synchronization.h
+++ b/v8/src/objects/js-atomics-synchronization.h
@@ -29,11 +29,11 @@ template <typename T>
 class AsyncWaiterQueueNode;
 }  // namespace detail
 
-using detail::WaiterQueueLockGuard;
-using detail::WaiterQueueNode;
-using LockAsyncWaiterQueueNode = detail::AsyncWaiterQueueNode<JSAtomicsMutex>;
+using internal::detail::WaiterQueueLockGuard;
+using internal::detail::WaiterQueueNode;
+using LockAsyncWaiterQueueNode = internal::detail::AsyncWaiterQueueNode<JSAtomicsMutex>;
 using WaitAsyncWaiterQueueNode =
-    detail::AsyncWaiterQueueNode<JSAtomicsCondition>;
+    internal::detail::AsyncWaiterQueueNode<JSAtomicsCondition>;
 
 // JSSynchronizationPrimitive is the base class for JSAtomicsMutex and
 // JSAtomicsCondition. It contains a 32-bit state field and a pointer to a
diff --git a/v8/src/objects/js-collator.cc b/v8/src/objects/js-collator.cc
index 405cad15..3c5032b7 100644
--- a/v8/src/objects/js-collator.cc
+++ b/v8/src/objects/js-collator.cc
@@ -52,6 +52,8 @@ Maybe<CaseFirst> GetCaseFirst(Isolate* isolate,
       CaseFirst::kUndefined);
 }
 
+#define CreateDataPropertyForOptions CreateDataPropertyForOptions_JSCollator
+
 // TODO(gsathya): Consider internalizing the value strings.
 void CreateDataPropertyForOptions(Isolate* isolate,
                                   DirectHandle<JSObject> options,
@@ -593,3 +595,5 @@ const std::set<std::string>& JSCollator::GetAvailableLocales() {
 
 }  // namespace internal
 }  // namespace v8
+
+#undef CreateDataPropertyForOptions
diff --git a/v8/src/objects/js-duration-format.cc b/v8/src/objects/js-duration-format.cc
index 4524d71d..7134c666 100644
--- a/v8/src/objects/js-duration-format.cc
+++ b/v8/src/objects/js-duration-format.cc
@@ -1071,7 +1071,7 @@ MaybeDirectHandle<String> FormattedToString(
   return Intl::FormattedToString(isolate, formatted);
 }
 
-MaybeDirectHandle<JSArray> FormattedListToJSArray(
+MaybeDirectHandle<JSArray> FormattedListToJSArray_JSDurationFormat(
     Isolate* isolate, const icu::FormattedValue& formatted,
     const std::vector<std::vector<Part>>* parts,
     JSDurationFormat::Separator separator) {
@@ -1134,7 +1134,7 @@ MaybeDirectHandle<JSArray> JSDurationFormat::FormatToParts(
     Isolate* isolate, DirectHandle<JSDurationFormat> df,
     Handle<Object> duration) {
   const char* method_name = "Intl.DurationFormat.prototype.formatToParts";
-  return FormatCommon<JSArray, true, FormattedListToJSArray>(
+  return FormatCommon<JSArray, true, FormattedListToJSArray_JSDurationFormat>(
       isolate, df, duration, method_name);
 }
 
diff --git a/v8/src/objects/js-list-format.cc b/v8/src/objects/js-list-format.cc
index 97a0f6a8..eb3b69f0 100644
--- a/v8/src/objects/js-list-format.cc
+++ b/v8/src/objects/js-list-format.cc
@@ -247,7 +247,7 @@ DirectHandle<String> IcuFieldIdToType(Isolate* isolate, int32_t field_id) {
 
 // A helper function to convert the FormattedList to a
 // MaybeHandle<JSArray> for the implementation of formatToParts.
-MaybeDirectHandle<JSArray> FormattedListToJSArray(
+MaybeDirectHandle<JSArray> FormattedListToJSArray_JSListFormat(
     Isolate* isolate, const icu::FormattedValue& formatted) {
   DirectHandle<JSArray> array = isolate->factory()->NewJSArray(0);
   icu::ConstrainedFieldPosition cfpos;
@@ -285,7 +285,7 @@ MaybeDirectHandle<JSArray> JSListFormat::FormatListToParts(
     Isolate* isolate, DirectHandle<JSListFormat> format,
     DirectHandle<FixedArray> list) {
   return FormatListCommon<JSArray>(isolate, format, list,
-                                   FormattedListToJSArray);
+                                   FormattedListToJSArray_JSListFormat);
 }
 
 namespace {
diff --git a/v8/src/objects/js-plural-rules.cc b/v8/src/objects/js-plural-rules.cc
index 4606b75f..ad3d6187 100644
--- a/v8/src/objects/js-plural-rules.cc
+++ b/v8/src/objects/js-plural-rules.cc
@@ -223,6 +223,8 @@ MaybeDirectHandle<String> JSPluralRules::ResolvePluralRange(
   return Intl::ToString(isolate, result);
 }
 
+#define CreateDataPropertyForOptions CreateDataPropertyForOptions_JSPluralRules
+
 namespace {
 
 void CreateDataPropertyForOptions(Isolate* isolate,
@@ -387,3 +389,5 @@ const std::set<std::string>& JSPluralRules::GetAvailableLocales() {
 
 }  // namespace internal
 }  // namespace v8
+
+#undef CreateDataPropertyForOptions
diff --git a/v8/src/regexp/experimental/experimental-compiler.cc b/v8/src/regexp/experimental/experimental-compiler.cc
index 7bee9f11..391dac8c 100644
--- a/v8/src/regexp/experimental/experimental-compiler.cc
+++ b/v8/src/regexp/experimental/experimental-compiler.cc
@@ -224,7 +224,7 @@ bool ExperimentalRegExpCompiler::CanBeHandled(RegExpTree* tree,
   return CanBeHandledVisitor::Check(tree, flags, capture_count);
 }
 
-namespace {
+namespace experimental {
 
 // A label in bytecode which starts with no known address. The address *must*
 // be bound with `Bind` before the label goes out of scope.
@@ -1226,7 +1226,7 @@ class CompileVisitor : private RegExpVisitor {
 
 ZoneList<RegExpInstruction> ExperimentalRegExpCompiler::Compile(
     RegExpTree* tree, RegExpFlags flags, Zone* zone) {
-  return CompileVisitor::Compile(tree, flags, zone);
+  return experimental::CompileVisitor::Compile(tree, flags, zone);
 }
 
 }  // namespace internal
diff --git a/v8/src/regexp/regexp-compiler-tonode.cc b/v8/src/regexp/regexp-compiler-tonode.cc
index a71b6112..735773cd 100644
--- a/v8/src/regexp/regexp-compiler-tonode.cc
+++ b/v8/src/regexp/regexp-compiler-tonode.cc
@@ -18,6 +18,8 @@
 #include "unicode/utypes.h"
 #endif  // V8_INTL_SUPPORT
 
+#define kMaxCodePoint kMaxCodePoint_RegExpCompilerToNode
+
 namespace v8 {
 namespace internal {
 
@@ -2071,3 +2073,5 @@ RegExpNode* RegExpQuantifier::ToNode(int min, int max, bool is_greedy,
 
 }  // namespace internal
 }  // namespace v8
+
+#undef kMaxCodePoint
diff --git a/v8/src/sandbox/testing.cc b/v8/src/sandbox/testing.cc
index 5fd8a557..a049f497 100644
--- a/v8/src/sandbox/testing.cc
+++ b/v8/src/sandbox/testing.cc
@@ -18,6 +18,7 @@
 #include <signal.h>
 #include <sys/mman.h>
 #include <unistd.h>
+#undef MAP_TYPE
 #endif  // V8_OS_LINUX
 
 #ifdef V8_USE_ADDRESS_SANITIZER
diff --git a/v8/src/snapshot/read-only-deserializer.cc b/v8/src/snapshot/read-only-deserializer.cc
index c6eb0694..a79565a7 100644
--- a/v8/src/snapshot/read-only-deserializer.cc
+++ b/v8/src/snapshot/read-only-deserializer.cc
@@ -14,6 +14,8 @@
 #include "src/snapshot/read-only-serializer-deserializer.h"
 #include "src/snapshot/snapshot-data.h"
 
+#define NoExternalReferencesCallback NoExternalReferencesCallback_ReadOnlyDeserializer
+
 namespace v8 {
 namespace internal {
 
@@ -387,3 +389,5 @@ void ReadOnlyDeserializer::PostProcessNewObjects() {
 
 }  // namespace internal
 }  // namespace v8
+
+#undef NoExternalReferencesCallback
diff --git a/v8/src/torque/csa-generator.cc b/v8/src/torque/csa-generator.cc
index 4495f0b1..2eb02e62 100644
--- a/v8/src/torque/csa-generator.cc
+++ b/v8/src/torque/csa-generator.cc
@@ -12,6 +12,8 @@
 #include "src/torque/types.h"
 #include "src/torque/utils.h"
 
+#define GetBitFieldSpecialization GetBitFieldSpecialization_CSAGenerator
+
 namespace v8::internal::torque {
 
 std::optional<Stack<std::string>> CSAGenerator::EmitGraph(
@@ -947,7 +949,7 @@ void CSAGenerator::EmitInstruction(const StoreReferenceInstruction& instruction,
 
 namespace {
 std::string GetBitFieldSpecialization(const Type* container,
-                                      const BitField& field) {
+                                       const BitField& field) {
   auto smi_tagged_type =
       Type::MatchUnaryGeneric(container, TypeOracle::GetSmiTaggedGeneric());
   std::string container_type = smi_tagged_type
@@ -1083,3 +1085,5 @@ void CSAGenerator::EmitCSAValue(VisitResult result,
 }
 
 }  // namespace v8::internal::torque
+
+#undef GetBitFieldSpecialization
diff --git a/v8/src/utils/sha-256.cc b/v8/src/utils/sha-256.cc
index 4b1d2bd4..f55c0b4a 100644
--- a/v8/src/utils/sha-256.cc
+++ b/v8/src/utils/sha-256.cc
@@ -174,3 +174,6 @@ const uint8_t* SHA256_hash(const void* data, size_t len, uint8_t* digest) {
 
 }  // namespace internal
 }  // namespace v8
+
+#undef ror
+#undef shr
diff --git a/v8/src/wasm/wasm-external-refs.cc b/v8/src/wasm/wasm-external-refs.cc
index 6dc9ee08..6bb780aa 100644
--- a/v8/src/wasm/wasm-external-refs.cc
+++ b/v8/src/wasm/wasm-external-refs.cc
@@ -750,6 +750,8 @@ V ReadAndIncrementOffset(Address data, size_t* offset) {
   return result;
 }
 
+#define kSuccess kSuccess_WASMExternalRefs
+
 constexpr int32_t kSuccess = 1;
 constexpr int32_t kOutOfBounds = 0;
 }  // namespace
@@ -1119,3 +1121,4 @@ Address load_old_fp(Isolate* isolate) {
 
 #undef V8_WITH_SANITIZER
 #undef RESET_THREAD_IN_WASM_FLAG_FOR_ASAN_ON_WINDOWS
+#undef kSuccess
diff --git a/v8/src/wasm/wrappers.cc b/v8/src/wasm/wrappers.cc
index dcd6e438..60aefe08 100644
--- a/v8/src/wasm/wrappers.cc
+++ b/v8/src/wasm/wrappers.cc
@@ -1327,4 +1327,6 @@ void BuildWasmWrapper(compiler::turboshaft::PipelineData* data,
   }
 }
 
+#include "src/compiler/turboshaft/undef-assembler-macros.inc"
+
 }  // namespace v8::internal::wasm
