diff -uNr protobuf-c-1.5.0/protoc-c/c_field.cc protobuf-c-1.5.0.mod/protoc-c/c_field.cc
--- protobuf-c-1.5.0/protoc-c/c_field.cc	2023-11-26 07:21:25.000000000 +0800
+++ protobuf-c-1.5.0.mod/protoc-c/c_field.cc	2023-11-26 11:44:02.078006952 +0800
@@ -236,7 +236,7 @@
 
 const FieldGenerator& FieldGeneratorMap::get(
     const FieldDescriptor* field) const {
-  GOOGLE_CHECK_EQ(field->containing_type(), descriptor_);
+  ABSL_CHECK_EQ(field->containing_type(), descriptor_);
   return *field_generators_[field->index()];
 }
 
diff -uNr protobuf-c-1.5.0/protoc-c/c_helpers.cc protobuf-c-1.5.0.mod/protoc-c/c_helpers.cc
--- protobuf-c-1.5.0/protoc-c/c_helpers.cc	2023-11-26 07:21:25.000000000 +0800
+++ protobuf-c-1.5.0.mod/protoc-c/c_helpers.cc	2023-11-26 11:42:41.850006983 +0800
@@ -286,7 +286,7 @@
 
 std::set<std::string> MakeKeywordsMap() {
   std::set<std::string> result;
-  for (size_t i = 0; i < GOOGLE_ARRAYSIZE(kKeywordList); i++) {
+  for (size_t i = 0; i < ABSL_ARRAYSIZE(kKeywordList); i++) {
     result.insert(kKeywordList[i]);
   }
   return result;
@@ -548,7 +548,7 @@
   std::unique_ptr<char[]> dest(new char[dest_length]);
   const int len = CEscapeInternal(src.data(), src.size(),
                                   dest.get(), dest_length, false);
-  GOOGLE_DCHECK_GE(len, 0);
+  ABSL_DCHECK_GE(len, 0);
   return std::string(dest.get(), len);
 }
 
diff -uNr protobuf-c-1.5.0/protoc-c/c_message.cc protobuf-c-1.5.0.mod/protoc-c/c_message.cc
--- protobuf-c-1.5.0/protoc-c/c_message.cc	2023-11-26 07:21:25.000000000 +0800
+++ protobuf-c-1.5.0.mod/protoc-c/c_message.cc	2023-11-26 11:43:11.254006971 +0800
@@ -499,7 +499,7 @@
 	  // NOTE: not supported by protobuf
 	  vars["maybe_static"] = "";
 	  vars["field_dv_ctype"] = "{ ... }";
-	  GOOGLE_LOG(FATAL) << "Messages can't have default values!";
+	  ABSL_LOG(FATAL) << "Messages can't have default values!";
 	  break;
 	case FieldDescriptor::CPPTYPE_STRING:
 	  if (fd->type() == FieldDescriptor::TYPE_BYTES || opt.string_as_bytes())
@@ -521,7 +521,7 @@
 	    break;
 	  }
 	default:
-	  GOOGLE_LOG(FATAL) << "Unknown CPPTYPE";
+	  ABSL_LOG(FATAL) << "Unknown CPPTYPE";
 	  break;
 	}
 	if (!already_defined)
diff -uNr protobuf-c-1.5.0/protoc-c/c_primitive_field.cc protobuf-c-1.5.0.mod/protoc-c/c_primitive_field.cc
--- protobuf-c-1.5.0/protoc-c/c_primitive_field.cc	2023-11-26 07:21:25.000000000 +0800
+++ protobuf-c-1.5.0.mod/protoc-c/c_primitive_field.cc	2023-11-26 11:43:46.002006958 +0800
@@ -99,7 +99,7 @@
     case FieldDescriptor::TYPE_STRING  :
     case FieldDescriptor::TYPE_BYTES   :
     case FieldDescriptor::TYPE_GROUP   :
-    case FieldDescriptor::TYPE_MESSAGE : GOOGLE_LOG(FATAL) << "not a primitive type"; break;
+    case FieldDescriptor::TYPE_MESSAGE : ABSL_LOG(FATAL) << "not a primitive type"; break;
 
     // No default because we want the compiler to complain if any new
     // types are added.
@@ -143,7 +143,7 @@
     case FieldDescriptor::CPPTYPE_BOOL:
       return descriptor_->default_value_bool() ? "1" : "0";
     default:
-      GOOGLE_LOG(FATAL) << "unexpected CPPTYPE in c_primitive_field";
+      ABSL_LOG(FATAL) << "unexpected CPPTYPE in c_primitive_field";
       return "UNEXPECTED_CPPTYPE";
   }
 }
@@ -197,7 +197,7 @@
     case FieldDescriptor::TYPE_STRING  :
     case FieldDescriptor::TYPE_BYTES   :
     case FieldDescriptor::TYPE_GROUP   :
-    case FieldDescriptor::TYPE_MESSAGE : GOOGLE_LOG(FATAL) << "not a primitive type"; break;
+    case FieldDescriptor::TYPE_MESSAGE : ABSL_LOG(FATAL) << "not a primitive type"; break;
 
     // No default because we want the compiler to complain if any new
     // types are added.
