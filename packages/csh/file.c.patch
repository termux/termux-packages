--- a/bin/csh/file.c
+++ b/bin/csh/file.c
@@ -43,7 +43,7 @@
 #include <sys/ioctl.h>
 #include <sys/param.h>
 #include <sys/stat.h>
-#include <sys/tty.h>
+#include <linux/tty.h>
 
 #include <dirent.h>
 #include <pwd.h>
@@ -93,7 +93,7 @@
 static void beep(void);
 static void print_recognized_stuff(Char *);
 static void extract_dir_and_name(Char *, Char *, Char *);
-static Char *getentry(DIR *, int);
+static Char *getentry(DIR *);
 static void free_items(Char **, size_t);
 static size_t tsearch(Char *, COMMAND, size_t);
 static int recognize(Char *, Char *, size_t, size_t);
@@ -438,16 +438,10 @@
 }
 
 static Char *
-getentry(DIR *dir_fd, int looking_for_lognames)
+getentry(DIR *dir_fd)
 {
     struct dirent *dirp;
-    struct passwd *pw;
 
-    if (looking_for_lognames) {
-	if ((pw = getpwent()) == NULL)
-	    return (NULL);
-	return (str2short(pw->pw_name));
-    }
     if ((dirp = readdir(dir_fd)) != NULL)
 	return (str2short(dirp->d_name));
     return (NULL);
@@ -483,7 +477,7 @@
     Char name[MAXNAMLEN + 1], tilded_dir[MAXPATHLEN + 1];
     DIR *dir_fd;
     Char *entry;
-    int ignoring, looking_for_lognames;
+    int ignoring;
     size_t name_length, nignored, numitems;
     Char **items = NULL;
     size_t maxitems = 0;
@@ -492,29 +486,20 @@
     ignoring = TRUE;
     nignored = 0;
 
-    looking_for_lognames = (*word == '~') && (Strchr(word, '/') == NULL);
-    if (looking_for_lognames) {
-	(void)setpwent();
-	copyn(name, &word[1], MAXNAMLEN);	/* name sans ~ */
-	dir_fd = NULL;
-    }
-    else {
-	extract_dir_and_name(word, dir, name);
-	if (tilde(tilded_dir, dir) == 0)
-	    return (0);
-	dir_fd = opendir(*tilded_dir ? short2str(tilded_dir) : ".");
-	if (dir_fd == NULL)
-	    return (0);
-    }
+    extract_dir_and_name(word, dir, name);
+    if (tilde(tilded_dir, dir) == 0)
+        return (0);
+    dir_fd = opendir(*tilded_dir ? short2str(tilded_dir) : ".");
+    if (dir_fd == NULL)
+        return (0);
 
 again:				/* search for matches */
     name_length = Strlen(name);
-    for (numitems = 0; (entry = getentry(dir_fd, looking_for_lognames)) != NULL;) {
+    for (numitems = 0; (entry = getentry(dir_fd)) != NULL;) {
 	if (!is_prefix(name, entry))
 	    continue;
 	/* Don't match . files on null prefix match */
-	if (name_length == 0 && entry[0] == '.' &&
-	    !looking_for_lognames)
+	if (name_length == 0 && entry[0] == '.')
 	    continue;
 	if (command == LIST) {
 	    if ((size_t)numitems >= maxitems) {
@@ -540,25 +525,16 @@
     if (ignoring && numitems == 0 && nignored > 0) {
 	ignoring = FALSE;
 	nignored = 0;
-	if (looking_for_lognames)
-	    (void)setpwent();
-	else
-	    rewinddir(dir_fd);
+	rewinddir(dir_fd);
 	goto again;
     }
 
-    if (looking_for_lognames)
-	(void)endpwent();
-    else
-	(void)closedir(dir_fd);
+    (void)closedir(dir_fd);
     if (numitems == 0)
 	return (0);
     if (command == RECOGNIZE) {
-	if (looking_for_lognames)
-	    copyn(word, STRtilde, 1);
-	else
-	    /* put back dir part */
-	    copyn(word, dir, max_word_length);
+	/* put back dir part */
+	copyn(word, dir, max_word_length);
 	/* add extended name */
 	catn(word, extended_name, max_word_length);
 	return (numitems);
@@ -566,8 +542,7 @@
     else {			/* LIST */
 	qsort(items, numitems, sizeof(items[0]), 
 		(int (*) (const void *, const void *)) sortscmp);
-	print_by_column(looking_for_lognames ? NULL : tilded_dir,
-			items, numitems);
+	print_by_column(tilded_dir, items, numitems);
 	if (items != NULL)
 	    FREE_ITEMS(items, numitems);
     }
