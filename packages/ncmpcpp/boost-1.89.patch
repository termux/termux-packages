--- a/m4/boost.m4
+++ b/m4/boost.m4
@@ -545,8 +545,7 @@ BOOST_DEFUN([Array],
 # ------------
 # Look for Boost.Asio (new in Boost 1.35).
 BOOST_DEFUN([Asio],
-[AC_REQUIRE([BOOST_SYSTEM])dnl
-BOOST_FIND_HEADER([boost/asio.hpp])])
+[BOOST_FIND_HEADER([boost/asio.hpp])])
 
 
 # BOOST_ASSIGN()
@@ -567,25 +566,9 @@ BOOST_DEFUN([Bind],
 # --------------
 # Look for Boost.Chrono.
 BOOST_DEFUN([Chrono],
-[# Do we have to check for Boost.System?  This link-time dependency was
-# added as of 1.35.0.  If we have a version <1.35, we must not attempt to
-# find Boost.System as it didn't exist by then.
-if test $boost_major_version -ge 135; then
-  BOOST_SYSTEM([$1])
-fi # end of the Boost.System check.
-boost_filesystem_save_LIBS=$LIBS
-boost_filesystem_save_LDFLAGS=$LDFLAGS
-m4_pattern_allow([^BOOST_SYSTEM_(LIBS|LDFLAGS)$])dnl
-LIBS="$LIBS $BOOST_SYSTEM_LIBS"
-LDFLAGS="$LDFLAGS $BOOST_SYSTEM_LDFLAGS"
-BOOST_FIND_LIB([chrono], [$1],
+[BOOST_FIND_LIB([chrono], [$1],
                 [boost/chrono.hpp],
                 [boost::chrono::thread_clock d;])
-if test $enable_static_boost = yes && test $boost_major_version -ge 135; then
-  BOOST_CHRONO_LIBS="$BOOST_CHRONO_LIBS $BOOST_SYSTEM_LIBS"
-fi
-LIBS=$boost_filesystem_save_LIBS
-LDFLAGS=$boost_filesystem_save_LDFLAGS
 ])# BOOST_CHRONO
 
 
@@ -688,12 +671,8 @@ boost_coroutine_save_LIBS=$LIBS
 boost_coroutine_save_LDFLAGS=$LDFLAGS
 # Link-time dependency from coroutine to context
 BOOST_CONTEXT([$1])
-# Starting from Boost 1.55 a dependency on Boost.System is added
-if test $boost_major_version -ge 155; then
-  BOOST_SYSTEM([$1])
-fi
-m4_pattern_allow([^BOOST_(CONTEXT|SYSTEM)_(LIBS|LDFLAGS)])
-LIBS="$LIBS $BOOST_CONTEXT_LIBS $BOOST_SYSTEM_LIBS"
+m4_pattern_allow([^BOOST_(CONTEXT)_(LIBS|LDFLAGS)])
+LIBS="$LIBS $BOOST_CONTEXT_LIBS"
 LDFLAGS="$LDFLAGS $BOOST_CONTEXT_LDFLAGS"
 
 # in 1.53 coroutine was a header only library
@@ -717,10 +696,6 @@ if test $boost_major_version -eq 153 || test $enable_static_boost = yes && test
   BOOST_COROUTINE_LIBS="$BOOST_COROUTINE_LIBS $BOOST_CONTEXT_LIBS"
   BOOST_COROUTINE_LDFLAGS="$BOOST_COROUTINE_LDFLAGS $BOOST_CONTEXT_LDFLAGS"
 fi
-if test $enable_static_boost = yes && test $boost_major_version -ge 155; then
-  BOOST_COROUTINE_LIBS="$BOOST_COROUTINE_LIBS $BOOST_SYSTEM_LIBS"
-  BOOST_COROUTINE_LDFLAGS="$BOOST_COROUTINE_LDFLAGS $BOOST_SYSTEM_LDFLAGS"
-fi
 LIBS=$boost_coroutine_save_LIBS
 LDFLAGS=$boost_coroutine_save_LDFLAGS
 ])# BOOST_COROUTINE
@@ -752,24 +752,8 @@ BOOST_DEFUN([Date_Time],
 # Do not check for boost/filesystem.hpp because this file was introduced in
 # 1.34.
 BOOST_DEFUN([Filesystem],
-[# Do we have to check for Boost.System?  This link-time dependency was
-# added as of 1.35.0.  If we have a version <1.35, we must not attempt to
-# find Boost.System as it didn't exist by then.
-if test $boost_major_version -ge 135; then
-  BOOST_SYSTEM([$1])
-fi # end of the Boost.System check.
-boost_filesystem_save_LIBS=$LIBS
-boost_filesystem_save_LDFLAGS=$LDFLAGS
-m4_pattern_allow([^BOOST_SYSTEM_(LIBS|LDFLAGS)$])dnl
-LIBS="$LIBS $BOOST_SYSTEM_LIBS"
-LDFLAGS="$LDFLAGS $BOOST_SYSTEM_LDFLAGS"
-BOOST_FIND_LIB([filesystem], [$1],
+[BOOST_FIND_LIB([filesystem], [$1],
                 [boost/filesystem/path.hpp], [boost::filesystem::path p;])
-if test $enable_static_boost = yes && test $boost_major_version -ge 135; then
-  BOOST_FILESYSTEM_LIBS="$BOOST_FILESYSTEM_LIBS $BOOST_SYSTEM_LIBS"
-fi
-LIBS=$boost_filesystem_save_LIBS
-LDFLAGS=$boost_filesystem_save_LDFLAGS
 ])# BOOST_FILESYSTEM
 
 
@@ -851,21 +826,9 @@ BOOST_DEFUN([Lambda],
 # --------------
 # Look for Boost.Locale
 BOOST_DEFUN([Locale],
-[
-boost_locale_save_LIBS=$LIBS
-boost_locale_save_LDFLAGS=$LDFLAGS
-# require SYSTEM for boost-1.50.0 and up
-if test $boost_major_version -ge 150; then
-  BOOST_SYSTEM([$1])
-  m4_pattern_allow([^BOOST_SYSTEM_(LIBS|LDFLAGS)$])dnl
-  LIBS="$LIBS $BOOST_SYSTEM_LIBS"
-  LDFLAGS="$LDFLAGS $BOOST_SYSTEM_LDFLAGS"
-fi # end of the Boost.System check.
-BOOST_FIND_LIB([locale], [$1],
+[BOOST_FIND_LIB([locale], [$1],
     [boost/locale.hpp],
     [[boost::locale::generator gen; std::locale::global(gen(""));]])
-LIBS=$boost_locale_save_LIBS
-LDFLAGS=$boost_locale_save_LDFLAGS
 ])# BOOST_LOCALE
 
 # BOOST_LOG([PREFERRED-RT-OPT])
@@ -875,12 +838,11 @@ LDFLAGS=$boost_locale_save_LDFLAGS
 BOOST_DEFUN([Log],
 [boost_log_save_LIBS=$LIBS
 boost_log_save_LDFLAGS=$LDFLAGS
-BOOST_SYSTEM([$1])
 BOOST_FILESYSTEM([$1])
 BOOST_DATE_TIME([$1])
-m4_pattern_allow([^BOOST_(SYSTEM|FILESYSTEM|DATE_TIME)_(LIBS|LDFLAGS)$])dnl
-LIBS="$LIBS $BOOST_DATE_TIME_LIBS $BOOST_FILESYSTEM_LIBS $BOOST_SYSTEM_LIBS"
-LDFLAGS="$LDFLAGS $BOOST_DATE_TIME_LDFLAGS $BOOST_FILESYSTEM_LDFLAGS $BOOST_SYSTEM_LDFLAGS"
+m4_pattern_allow([^BOOST_(FILESYSTEM|DATE_TIME)_(LIBS|LDFLAGS)$])dnl
+LIBS="$LIBS $BOOST_DATE_TIME_LIBS $BOOST_FILESYSTEM_LIBS"
+LDFLAGS="$LDFLAGS $BOOST_DATE_TIME_LDFLAGS $BOOST_FILESYSTEM_LDFLAGS"
 BOOST_FIND_LIB([log], [$1],
     [boost/log/core/core.hpp],
     [boost::log::attribute a; a.get_value();])
@@ -1114,18 +1076,6 @@ BOOST_DEFUN([String_Algo],
 ])
 
 
-# BOOST_SYSTEM([PREFERRED-RT-OPT])
-# --------------------------------
-# Look for Boost.System.  For the documentation of PREFERRED-RT-OPT, see the
-# documentation of BOOST_FIND_LIB above.  This library was introduced in Boost
-# 1.35.0.
-BOOST_DEFUN([System],
-[BOOST_FIND_LIB([system], [$1],
-                [boost/system/error_code.hpp],
-                [boost::system::error_code e; e.clear();])
-])# BOOST_SYSTEM
-
-
 # BOOST_TEST([PREFERRED-RT-OPT])
 # ------------------------------
 # Look for Boost.Test.  For the documentation of PREFERRED-RT-OPT, see the
@@ -1150,15 +1100,8 @@ dnl boost/thread.hpp would complain if we try to compile without
 dnl -pthread on GNU/Linux.
 AC_REQUIRE([_BOOST_PTHREAD_FLAG])dnl
 boost_thread_save_LIBS=$LIBS
-boost_thread_save_LDFLAGS=$LDFLAGS
 boost_thread_save_CPPFLAGS=$CPPFLAGS
-# Link-time dependency from thread to system was added as of 1.49.0.
-if test $boost_major_version -ge 149; then
-BOOST_SYSTEM([$1])
-fi # end of the Boost.System check.
-m4_pattern_allow([^BOOST_SYSTEM_(LIBS|LDFLAGS)$])dnl
-LIBS="$LIBS $BOOST_SYSTEM_LIBS $boost_cv_pthread_flag"
-LDFLAGS="$LDFLAGS $BOOST_SYSTEM_LDFLAGS"
+LIBS="$LIBS $boost_cv_pthread_flag"
 CPPFLAGS="$CPPFLAGS $boost_cv_pthread_flag"
 
 # When compiling for the Windows platform, the threads library is named
@@ -1179,11 +1122,9 @@ case $host_os in
   (*mingw*) boost_thread_w32_socket_link=-lws2_32;;
 esac
 
-BOOST_THREAD_LIBS="$BOOST_THREAD_LIBS $BOOST_SYSTEM_LIBS $boost_cv_pthread_flag $boost_thread_w32_socket_link"
-BOOST_THREAD_LDFLAGS="$BOOST_SYSTEM_LDFLAGS"
+BOOST_THREAD_LIBS="$BOOST_THREAD_LIBS $boost_cv_pthread_flag $boost_thread_w32_socket_link"
 BOOST_CPPFLAGS="$BOOST_CPPFLAGS $boost_cv_pthread_flag"
 LIBS=$boost_thread_save_LIBS
-LDFLAGS=$boost_thread_save_LDFLAGS
 CPPFLAGS=$boost_thread_save_CPPFLAGS
 ])# BOOST_THREAD
 
@@ -1261,9 +1202,9 @@ AC_REQUIRE([BOOST_DATE_TIME])dnl
 boost_wave_save_LIBS=$LIBS
 boost_wave_save_LDFLAGS=$LDFLAGS
 m4_pattern_allow([^BOOST_((FILE)?SYSTEM|DATE_TIME|THREAD)_(LIBS|LDFLAGS)$])dnl
-LIBS="$LIBS $BOOST_SYSTEM_LIBS $BOOST_FILESYSTEM_LIBS $BOOST_DATE_TIME_LIBS \
+LIBS="$LIBS $BOOST_FILESYSTEM_LIBS $BOOST_DATE_TIME_LIBS \
 $BOOST_THREAD_LIBS"
-LDFLAGS="$LDFLAGS $BOOST_SYSTEM_LDFLAGS $BOOST_FILESYSTEM_LDFLAGS \
+LDFLAGS="$LDFLAGS $BOOST_FILESYSTEM_LDFLAGS \
 $BOOST_DATE_TIME_LDFLAGS $BOOST_THREAD_LDFLAGS"
 BOOST_FIND_LIB([wave], [$1],
                 [boost/wave.hpp],
